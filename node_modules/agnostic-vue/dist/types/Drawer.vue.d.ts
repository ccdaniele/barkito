import { DialogDrawerPlacement, DialogRoles } from "./DialogApi";
export interface DrawerProps {
    id: string;
    drawerRoot: string;
    placement?: DialogDrawerPlacement;
    title?: string;
    /**
     * Passing in 'alertdialog' for this can be used to make a "sticky" drawer such that
     * ESC or clicking the overlay does NOT close the drawer.
     */
    role?: DialogRoles;
    isAnimationFadeIn?: boolean;
}
declare const _default: import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DrawerProps>, {
    title: string;
    role: string;
    isAnimationFadeIn: boolean;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "instance"[], "instance", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DrawerProps>, {
    title: string;
    role: string;
    isAnimationFadeIn: boolean;
}>>> & {
    onInstance?: ((...args: any[]) => any) | undefined;
}, {
    isAnimationFadeIn: boolean;
    title: string;
    role: DialogRoles;
}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
