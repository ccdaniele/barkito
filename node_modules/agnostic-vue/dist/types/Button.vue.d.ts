import { ButtonSize, ButtonType } from "./ButtonApi";
export interface ButtonProps {
    mode?: string;
    isDisabled?: boolean;
    isBlank?: boolean;
    isLink?: boolean;
    isBlock?: boolean;
    isCapsule?: boolean;
    isBordered?: boolean;
    isGrouped?: boolean;
    isCircle?: boolean;
    isRounded?: boolean;
    isSkinned?: boolean;
    type?: ButtonType;
    size?: ButtonSize;
    css?: string;
}
declare const _default: import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ButtonProps>, {
    primary: boolean;
    isSkinned: boolean;
    type: string;
    size: string;
    css: string;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ButtonProps>, {
    primary: boolean;
    isSkinned: boolean;
    type: string;
    size: string;
    css: string;
}>>> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    type: ButtonType;
    isSkinned: boolean;
    size: ButtonSize;
    css: string;
}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
