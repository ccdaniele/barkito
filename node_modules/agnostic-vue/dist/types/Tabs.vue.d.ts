export interface TabsProps {
    activatedTab?: number;
    /**
     * The use case for tabType button is to allow the consumer to inject their own
     * AgnosticUI <Button type="faux" mode="primary"... or just <button> if they prefer,
     * but signifies that we should use a div to wrap the slot (not a button which would
     * mean nested buttons!). Note,
     */
    tabType?: "tab" | "custom";
    isVertical?: boolean;
    isSkinned?: boolean;
    isDisabled?: boolean;
    isBorderless?: boolean;
    disabledOptions?: string[];
    size?: "large" | "xlarge" | "";
}
declare const _default: import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TabsProps>, {
    activatedTab: number;
    tabType: string;
    isSkinned: boolean;
    disabledOptions: () => never[];
    size: string;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "selected"[], "selected", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TabsProps>, {
    activatedTab: number;
    tabType: string;
    isSkinned: boolean;
    disabledOptions: () => never[];
    size: string;
}>>> & {
    onSelected?: ((...args: any[]) => any) | undefined;
}, {
    isSkinned: boolean;
    size: "" | "large" | "xlarge";
    disabledOptions: string[];
    activatedTab: number;
    tabType: "tab" | "custom";
}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
