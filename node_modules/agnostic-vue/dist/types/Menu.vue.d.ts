export interface MenuProps {
    id: string;
    type?: "simple" | "kebab" | "hamburger" | "meatball";
    size?: "small" | "large" | "";
    menuTitle: string;
    isDisabled?: boolean;
    isItemsRight?: boolean;
    disabledItems?: string[];
    isBordered?: boolean;
    isRounded?: boolean;
    closeOnSelect?: boolean;
    closeOnClickOutside?: boolean;
}
declare const _default: import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<MenuProps>, {
    type: string;
    size: string;
    disabledItems: () => never[];
    closeOnSelect: boolean;
    closeOnClickOutside: boolean;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "open")[], "close" | "open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<MenuProps>, {
    type: string;
    size: string;
    disabledItems: () => never[];
    closeOnSelect: boolean;
    closeOnClickOutside: boolean;
}>>> & {
    onClose?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
}, {
    type: "simple" | "kebab" | "hamburger" | "meatball";
    size: "" | "small" | "large";
    disabledItems: string[];
    closeOnSelect: boolean;
    closeOnClickOutside: boolean;
}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
