{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeHeapProfile = exports.serializeCpuProfile = exports.serializeTimeProfile = void 0;\n\nconst profile_1 = require(\"../../proto/profile\");\n\nfunction isGeneratedLocation(location) {\n  return location.column !== undefined && location.line !== undefined && location.line > 0;\n}\n/**\n * Used to build string table and access strings and their ids within the table\n * when serializing a profile.\n */\n\n\nclass StringTable {\n  constructor() {\n    this.strings = [];\n    this.stringsMap = new Map();\n    this.getIndexOrAdd('');\n  }\n  /**\n   * @return index of str within the table. Also adds str to string table if\n   * str is not in the table already.\n   */\n\n\n  getIndexOrAdd(str) {\n    let idx = this.stringsMap.get(str);\n\n    if (idx !== undefined) {\n      return idx;\n    }\n\n    idx = this.strings.push(str) - 1;\n    this.stringsMap.set(str, idx);\n    return idx;\n  }\n\n}\n/**\n * Takes v8 profile and populates sample, location, and function fields of\n * profile.proto.\n *\n * @param profile - profile.proto with empty sample, location, and function\n * fields.\n * @param root - root of v8 profile tree describing samples to be appended\n * to profile.\n * @param appendToSamples - function which converts entry to sample(s)  and\n * appends these to end of an array of samples.\n * @param stringTable - string table for the existing profile.\n */\n\n\nfunction serialize(profile, root, appendToSamples, stringTable, ignoreSamplesPath, sourceMapper) {\n  const samples = [];\n  const locations = [];\n  const functions = [];\n  const functionIdMap = new Map();\n  const locationIdMap = new Map();\n  const entries = root.children.map(n => ({\n    node: n,\n    stack: []\n  }));\n\n  while (entries.length > 0) {\n    const entry = entries.pop();\n    const node = entry.node;\n\n    if (ignoreSamplesPath && node.scriptName.indexOf(ignoreSamplesPath) > -1) {\n      continue;\n    }\n\n    if (node.name === '(idle)' || node.name === '(program)') continue;\n    const stack = entry.stack;\n    const location = getLocation(node, sourceMapper);\n    stack.unshift(location.id);\n    appendToSamples(entry, samples);\n\n    for (const child of node.children) {\n      entries.push({\n        node: child,\n        stack: stack.slice()\n      });\n    }\n  }\n\n  profile.sample = samples;\n  profile.location = locations;\n  profile.function = functions;\n  profile.stringTable = stringTable.strings;\n\n  function getLocation(node, sourceMapper) {\n    let profLoc = {\n      file: node.scriptName || '',\n      line: node.lineNumber,\n      column: node.columnNumber,\n      name: node.name\n    };\n\n    if (profLoc.line) {\n      if (sourceMapper && isGeneratedLocation(profLoc)) {\n        profLoc = sourceMapper.mappingInfo(profLoc);\n      }\n    }\n\n    const keyStr = `${node.scriptId}:${profLoc.line}:${profLoc.column}:${profLoc.name}`;\n    let id = locationIdMap.get(keyStr);\n\n    if (id !== undefined) {\n      // id is index+1, since 0 is not valid id.\n      return locations[id - 1];\n    }\n\n    id = locations.length + 1;\n    locationIdMap.set(keyStr, id);\n    const line = getLine(node.scriptId, profLoc.file, profLoc.name, profLoc.line);\n    const location = new profile_1.perftools.profiles.Location({\n      id,\n      line: [line]\n    });\n    locations.push(location);\n    return location;\n  }\n\n  function getLine(scriptId, scriptName, name, line) {\n    return new profile_1.perftools.profiles.Line({\n      functionId: getFunction(scriptId, scriptName, name).id,\n      line\n    });\n  }\n\n  function getFunction(scriptId, scriptName, name) {\n    const keyStr = `${scriptId}:${name}`;\n    let id = functionIdMap.get(keyStr);\n\n    if (id !== undefined) {\n      // id is index+1, since 0 is not valid id.\n      return functions[id - 1];\n    }\n\n    id = functions.length + 1;\n    functionIdMap.set(keyStr, id);\n    const nameId = stringTable.getIndexOrAdd(name || '(anonymous)');\n    const f = new profile_1.perftools.profiles.Function({\n      id,\n      name: nameId,\n      systemName: nameId,\n      filename: stringTable.getIndexOrAdd(scriptName || '')\n    });\n    functions.push(f);\n    return f;\n  }\n}\n/**\n * @return value type for sample counts (type:sample, units:count), and\n * adds strings used in this value type to the table.\n */\n\n\nfunction createSampleCountValueType(table) {\n  return new profile_1.perftools.profiles.ValueType({\n    type: table.getIndexOrAdd('sample'),\n    unit: table.getIndexOrAdd('count')\n  });\n}\n/**\n * @return value type for time samples (type:wall, units:nanoseconds), and\n * adds strings used in this value type to the table.\n */\n\n\nfunction createTimeValueType(table) {\n  return new profile_1.perftools.profiles.ValueType({\n    type: table.getIndexOrAdd('wall'),\n    unit: table.getIndexOrAdd('nanoseconds')\n  });\n}\n/**\n * @return value type for cpu samples (type:cpu, units:nanoseconds), and\n * adds strings used in this value type to the table.\n */\n\n\nfunction createCpuValueType(table) {\n  return new profile_1.perftools.profiles.ValueType({\n    type: table.getIndexOrAdd('cpu'),\n    unit: table.getIndexOrAdd('nanoseconds')\n  });\n}\n/**\n * @return value type for object counts (type:objects, units:count), and\n * adds strings used in this value type to the table.\n */\n\n\nfunction createObjectCountValueType(table) {\n  return new profile_1.perftools.profiles.ValueType({\n    type: table.getIndexOrAdd('objects'),\n    unit: table.getIndexOrAdd('count')\n  });\n}\n/**\n * @return value type for memory allocations (type:space, units:bytes), and\n * adds strings used in this value type to the table.\n */\n\n\nfunction createAllocationValueType(table) {\n  return new profile_1.perftools.profiles.ValueType({\n    type: table.getIndexOrAdd('space'),\n    unit: table.getIndexOrAdd('bytes')\n  });\n}\n/**\n * Converts v8 time profile into into a profile proto.\n * (https://github.com/google/pprof/blob/master/proto/profile.proto)\n *\n * @param prof - profile to be converted.\n * @param intervalMicros - average time (microseconds) between samples.\n */\n\n\nfunction serializeTimeProfile(prof, intervalMicros, sourceMapper) {\n  const intervalNanos = intervalMicros * 1000;\n\n  const appendTimeEntryToSamples = (entry, samples) => {\n    if (entry.node.hitCount > 0) {\n      const sample = new profile_1.perftools.profiles.Sample({\n        locationId: entry.stack,\n        value: [entry.node.hitCount, entry.node.hitCount * intervalNanos]\n      });\n      samples.push(sample);\n    }\n  };\n\n  const stringTable = new StringTable();\n  const sampleValueType = createSampleCountValueType(stringTable);\n  const timeValueType = createTimeValueType(stringTable);\n  const profile = {\n    sampleType: [sampleValueType, timeValueType],\n    timeNanos: Date.now() * 1000 * 1000,\n    durationNanos: (prof.endTime - prof.startTime) * 1000,\n    periodType: timeValueType,\n    period: intervalMicros\n  };\n  serialize(profile, prof.topDownRoot, appendTimeEntryToSamples, stringTable, undefined, sourceMapper);\n  return profile;\n}\n\nexports.serializeTimeProfile = serializeTimeProfile;\n\nfunction buildLabels(labelSet, stringTable) {\n  const labels = [];\n\n  for (const [key, value] of Object.entries(labelSet)) {\n    if (typeof value === 'number' || typeof value === 'string') {\n      const label = new profile_1.perftools.profiles.Label({\n        key: stringTable.getIndexOrAdd(key),\n        num: typeof value === 'number' ? value : undefined,\n        str: typeof value === 'string' ? stringTable.getIndexOrAdd(value) : undefined\n      });\n      labels.push(label);\n    }\n  }\n\n  return labels;\n}\n/**\n * Converts cpu profile into into a profile proto.\n * (https://github.com/google/pprof/blob/master/proto/profile.proto)\n *\n * @param prof - profile to be converted.\n * @param intervalMicros - average time (microseconds) between samples.\n */\n\n\nfunction serializeCpuProfile(prof, intervalMicros, sourceMapper) {\n  const intervalNanos = intervalMicros * 1000;\n\n  const appendCpuEntryToSamples = (entry, samples) => {\n    for (const labelSet of entry.node.labelSets) {\n      const sample = new profile_1.perftools.profiles.Sample({\n        locationId: entry.stack,\n        value: [1, intervalNanos],\n        label: buildLabels(labelSet, stringTable)\n      });\n      samples.push(sample);\n    }\n\n    const unknownEntryCount = entry.node.hitCount - entry.node.labelSets.length;\n\n    if (unknownEntryCount > 0) {\n      const sample = new profile_1.perftools.profiles.Sample({\n        locationId: entry.stack,\n        value: [unknownEntryCount, entry.node.cpuTime // unknownEntryCount * intervalNanos,\n        ]\n      });\n      samples.push(sample);\n    }\n  };\n\n  const stringTable = new StringTable();\n  const sampleValueType = createSampleCountValueType(stringTable); // const wallValueType = createTimeValueType(stringTable);\n\n  const cpuValueType = createCpuValueType(stringTable);\n  const profile = {\n    sampleType: [sampleValueType, cpuValueType\n    /*, wallValueType*/\n    ],\n    timeNanos: Date.now() * 1000 * 1000,\n    durationNanos: prof.endTime - prof.startTime,\n    periodType: cpuValueType,\n    period: intervalMicros\n  };\n  serialize(profile, prof.topDownRoot, appendCpuEntryToSamples, stringTable, undefined, sourceMapper);\n  return profile;\n}\n\nexports.serializeCpuProfile = serializeCpuProfile;\n/**\n * Converts v8 heap profile into into a profile proto.\n * (https://github.com/google/pprof/blob/master/proto/profile.proto)\n *\n * @param prof - profile to be converted.\n * @param startTimeNanos - start time of profile, in nanoseconds (POSIX time).\n * @param durationsNanos - duration of the profile (wall clock time) in\n * nanoseconds.\n * @param intervalBytes - bytes allocated between samples.\n */\n\nfunction serializeHeapProfile(prof, startTimeNanos, intervalBytes, ignoreSamplesPath, sourceMapper) {\n  const appendHeapEntryToSamples = (entry, samples) => {\n    if (entry.node.allocations.length > 0) {\n      for (const alloc of entry.node.allocations) {\n        const sample = new profile_1.perftools.profiles.Sample({\n          locationId: entry.stack,\n          value: [alloc.count, alloc.sizeBytes * alloc.count] // TODO: add tag for allocation size\n\n        });\n        samples.push(sample);\n      }\n    }\n  };\n\n  const stringTable = new StringTable();\n  const sampleValueType = createObjectCountValueType(stringTable);\n  const allocationValueType = createAllocationValueType(stringTable);\n  const profile = {\n    sampleType: [sampleValueType, allocationValueType],\n    timeNanos: startTimeNanos,\n    periodType: allocationValueType,\n    period: intervalBytes\n  };\n  serialize(profile, prof, appendHeapEntryToSamples, stringTable, ignoreSamplesPath, sourceMapper);\n  return profile;\n}\n\nexports.serializeHeapProfile = serializeHeapProfile;","map":{"version":3,"mappings":"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","names":["isGeneratedLocation","location","column","undefined","line","StringTable","constructor","strings","stringsMap","Map","getIndexOrAdd","str","idx","get","push","set","serialize","profile","root","appendToSamples","stringTable","ignoreSamplesPath","sourceMapper","samples","locations","functions","functionIdMap","locationIdMap","entries","children","map","n","node","stack","length","entry","pop","scriptName","indexOf","name","getLocation","unshift","id","child","slice","sample","function","profLoc","file","lineNumber","columnNumber","mappingInfo","keyStr","scriptId","getLine","profile_1","profiles","Location","Line","functionId","getFunction","nameId","f","Function","systemName","filename","createSampleCountValueType","table","ValueType","type","unit","createTimeValueType","createCpuValueType","createObjectCountValueType","createAllocationValueType","serializeTimeProfile","prof","intervalMicros","intervalNanos","appendTimeEntryToSamples","hitCount","Sample","locationId","value","sampleValueType","timeValueType","sampleType","timeNanos","Date","now","durationNanos","endTime","startTime","periodType","period","topDownRoot","exports","buildLabels","labelSet","labels","key","Object","label","Label","num","serializeCpuProfile","appendCpuEntryToSamples","labelSets","unknownEntryCount","cpuTime","cpuValueType","serializeHeapProfile","startTimeNanos","intervalBytes","appendHeapEntryToSamples","allocations","alloc","count","sizeBytes","allocationValueType"],"sources":["../../ts/src/profile-serializer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}