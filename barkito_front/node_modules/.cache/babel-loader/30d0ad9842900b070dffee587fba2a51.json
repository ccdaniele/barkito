{"ast":null,"code":"'use strict';\n\nconst request = require('../common/request');\n\nconst {\n  startupLog\n} = require('../../startup-log');\n\nconst metrics = require('../../metrics');\n\nconst log = require('../../log');\n\nconst tracerVersion = require('../../../../../package.json').version;\n\nconst BaseWriter = require('../common/writer');\n\nconst METRIC_PREFIX = 'datadog.tracer.node.exporter.agent';\n\nclass Writer extends BaseWriter {\n  constructor(_ref) {\n    let {\n      prioritySampler,\n      lookup,\n      protocolVersion,\n      headers\n    } = _ref;\n    super(...arguments);\n    const AgentEncoder = getEncoder(protocolVersion);\n    this._prioritySampler = prioritySampler;\n    this._lookup = lookup;\n    this._protocolVersion = protocolVersion;\n    this._encoder = new AgentEncoder(this);\n    this._headers = headers;\n  }\n\n  _sendPayload(data, count, done) {\n    metrics.increment(`${METRIC_PREFIX}.requests`, true);\n    const {\n      _headers,\n      _lookup,\n      _protocolVersion,\n      _url\n    } = this;\n    makeRequest(_protocolVersion, data, count, _url, _headers, _lookup, true, (err, res, status) => {\n      if (status) {\n        metrics.increment(`${METRIC_PREFIX}.responses`, true);\n        metrics.increment(`${METRIC_PREFIX}.responses.by.status`, `status:${status}`, true);\n      } else if (err) {\n        metrics.increment(`${METRIC_PREFIX}.errors`, true);\n        metrics.increment(`${METRIC_PREFIX}.errors.by.name`, `name:${err.name}`, true);\n\n        if (err.code) {\n          metrics.increment(`${METRIC_PREFIX}.errors.by.code`, `code:${err.code}`, true);\n        }\n      }\n\n      startupLog({\n        agentError: err\n      });\n\n      if (err) {\n        log.error(err);\n        done();\n        return;\n      }\n\n      log.debug(`Response from the agent: ${res}`);\n\n      try {\n        this._prioritySampler.update(JSON.parse(res).rate_by_service);\n      } catch (e) {\n        log.error(e);\n        metrics.increment(`${METRIC_PREFIX}.errors`, true);\n        metrics.increment(`${METRIC_PREFIX}.errors.by.name`, `name:${e.name}`, true);\n      }\n\n      done();\n    });\n  }\n\n}\n\nfunction setHeader(headers, key, value) {\n  if (value) {\n    headers[key] = value;\n  }\n}\n\nfunction getEncoder(protocolVersion) {\n  if (protocolVersion === '0.5') {\n    return require('../../encode/0.5').AgentEncoder;\n  } else {\n    return require('../../encode/0.4').AgentEncoder;\n  }\n}\n\nfunction makeRequest(version, data, count, url, headers, lookup, needsStartupLog, cb) {\n  const options = {\n    path: `/v${version}/traces`,\n    method: 'PUT',\n    headers: { ...headers,\n      'Content-Type': 'application/msgpack',\n      'Datadog-Meta-Tracer-Version': tracerVersion,\n      'X-Datadog-Trace-Count': String(count)\n    },\n    lookup\n  };\n  setHeader(options.headers, 'Datadog-Meta-Lang', 'nodejs');\n  setHeader(options.headers, 'Datadog-Meta-Lang-Version', process.version);\n  setHeader(options.headers, 'Datadog-Meta-Lang-Interpreter', process.jsEngine || 'v8');\n\n  if (url.protocol === 'unix:') {\n    options.socketPath = url.pathname;\n  } else {\n    options.protocol = url.protocol;\n    options.hostname = url.hostname;\n    options.port = url.port;\n  }\n\n  log.debug(() => `Request to the agent: ${JSON.stringify(options)}`);\n  request(data, options, (err, res, status) => {\n    if (needsStartupLog) {\n      // Note that logging will only happen once, regardless of how many times this is called.\n      startupLog({\n        agentError: status !== 404 && status !== 200 ? err : undefined\n      });\n    }\n\n    cb(err, res, status);\n  });\n}\n\nmodule.exports = Writer;","map":{"version":3,"names":["request","require","startupLog","metrics","log","tracerVersion","version","BaseWriter","METRIC_PREFIX","Writer","constructor","prioritySampler","lookup","protocolVersion","headers","arguments","AgentEncoder","getEncoder","_prioritySampler","_lookup","_protocolVersion","_encoder","_headers","_sendPayload","data","count","done","increment","_url","makeRequest","err","res","status","name","code","agentError","error","debug","update","JSON","parse","rate_by_service","e","setHeader","key","value","url","needsStartupLog","cb","options","path","method","String","process","jsEngine","protocol","socketPath","pathname","hostname","port","stringify","undefined","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/exporters/agent/writer.js"],"sourcesContent":["'use strict'\n\nconst request = require('../common/request')\nconst { startupLog } = require('../../startup-log')\nconst metrics = require('../../metrics')\nconst log = require('../../log')\nconst tracerVersion = require('../../../../../package.json').version\nconst BaseWriter = require('../common/writer')\n\nconst METRIC_PREFIX = 'datadog.tracer.node.exporter.agent'\n\nclass Writer extends BaseWriter {\n  constructor ({ prioritySampler, lookup, protocolVersion, headers }) {\n    super(...arguments)\n    const AgentEncoder = getEncoder(protocolVersion)\n\n    this._prioritySampler = prioritySampler\n    this._lookup = lookup\n    this._protocolVersion = protocolVersion\n    this._encoder = new AgentEncoder(this)\n    this._headers = headers\n  }\n\n  _sendPayload (data, count, done) {\n    metrics.increment(`${METRIC_PREFIX}.requests`, true)\n\n    const { _headers, _lookup, _protocolVersion, _url } = this\n    makeRequest(_protocolVersion, data, count, _url, _headers, _lookup, true, (err, res, status) => {\n      if (status) {\n        metrics.increment(`${METRIC_PREFIX}.responses`, true)\n        metrics.increment(`${METRIC_PREFIX}.responses.by.status`, `status:${status}`, true)\n      } else if (err) {\n        metrics.increment(`${METRIC_PREFIX}.errors`, true)\n        metrics.increment(`${METRIC_PREFIX}.errors.by.name`, `name:${err.name}`, true)\n\n        if (err.code) {\n          metrics.increment(`${METRIC_PREFIX}.errors.by.code`, `code:${err.code}`, true)\n        }\n      }\n\n      startupLog({ agentError: err })\n\n      if (err) {\n        log.error(err)\n        done()\n        return\n      }\n\n      log.debug(`Response from the agent: ${res}`)\n\n      try {\n        this._prioritySampler.update(JSON.parse(res).rate_by_service)\n      } catch (e) {\n        log.error(e)\n\n        metrics.increment(`${METRIC_PREFIX}.errors`, true)\n        metrics.increment(`${METRIC_PREFIX}.errors.by.name`, `name:${e.name}`, true)\n      }\n      done()\n    })\n  }\n}\n\nfunction setHeader (headers, key, value) {\n  if (value) {\n    headers[key] = value\n  }\n}\n\nfunction getEncoder (protocolVersion) {\n  if (protocolVersion === '0.5') {\n    return require('../../encode/0.5').AgentEncoder\n  } else {\n    return require('../../encode/0.4').AgentEncoder\n  }\n}\n\nfunction makeRequest (version, data, count, url, headers, lookup, needsStartupLog, cb) {\n  const options = {\n    path: `/v${version}/traces`,\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/msgpack',\n      'Datadog-Meta-Tracer-Version': tracerVersion,\n      'X-Datadog-Trace-Count': String(count)\n    },\n    lookup\n  }\n\n  setHeader(options.headers, 'Datadog-Meta-Lang', 'nodejs')\n  setHeader(options.headers, 'Datadog-Meta-Lang-Version', process.version)\n  setHeader(options.headers, 'Datadog-Meta-Lang-Interpreter', process.jsEngine || 'v8')\n\n  if (url.protocol === 'unix:') {\n    options.socketPath = url.pathname\n  } else {\n    options.protocol = url.protocol\n    options.hostname = url.hostname\n    options.port = url.port\n  }\n\n  log.debug(() => `Request to the agent: ${JSON.stringify(options)}`)\n\n  request(data, options, (err, res, status) => {\n    if (needsStartupLog) {\n      // Note that logging will only happen once, regardless of how many times this is called.\n      startupLog({\n        agentError: status !== 404 && status !== 200 ? err : undefined\n      })\n    }\n    cb(err, res, status)\n  })\n}\n\nmodule.exports = Writer\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}