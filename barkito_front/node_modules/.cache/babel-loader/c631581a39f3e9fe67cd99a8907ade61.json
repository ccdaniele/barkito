{"ast":null,"code":"'use strict';\n\nconst log = require('../../../dd-trace/src/log');\n\nconst BaseAwsSdkPlugin = require('../base');\n\nclass Sns extends BaseAwsSdkPlugin {\n  generateTags(params, operation, response) {\n    if (!params) return {};\n    if (!params.TopicArn && !(response.data && response.data.TopicArn)) return {};\n    return {\n      'resource.name': `${operation} ${params.TopicArn || response.data.TopicArn}`,\n      'aws.sns.topic_arn': params.TopicArn || response.data.TopicArn\n    }; // TODO: should arn be sanitized or quantized in some way here,\n    // for example if it contains a phone number?\n  }\n\n  requestInject(span, request) {\n    const operation = request.operation;\n\n    if (operation === 'publish' || operation === 'publishBatch') {\n      if (!request.params) {\n        request.params = {};\n      }\n\n      let injectPath;\n\n      if (request.params.PublishBatchRequestEntries && request.params.PublishBatchRequestEntries.length > 0) {\n        injectPath = request.params.PublishBatchRequestEntries[0];\n      } else if (request.params.Message) {\n        injectPath = request.params;\n      }\n\n      if (!injectPath.MessageAttributes) {\n        injectPath.MessageAttributes = {};\n      }\n\n      if (Object.keys(injectPath.MessageAttributes).length >= 10) {\n        // SNS quota\n        log.info('Message attributes full, skipping trace context injection');\n        return;\n      }\n\n      const ddInfo = {};\n      this.tracer.inject(span, 'text_map', ddInfo);\n      injectPath.MessageAttributes._datadog = {\n        DataType: 'Binary',\n        BinaryValue: JSON.stringify(ddInfo) // BINARY types are automatically base64 encoded\n\n      };\n    }\n  }\n\n}\n\nmodule.exports = Sns;","map":{"version":3,"names":["log","require","BaseAwsSdkPlugin","Sns","generateTags","params","operation","response","TopicArn","data","requestInject","span","request","injectPath","PublishBatchRequestEntries","length","Message","MessageAttributes","Object","keys","info","ddInfo","tracer","inject","_datadog","DataType","BinaryValue","JSON","stringify","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-aws-sdk/src/services/sns.js"],"sourcesContent":["'use strict'\nconst log = require('../../../dd-trace/src/log')\nconst BaseAwsSdkPlugin = require('../base')\n\nclass Sns extends BaseAwsSdkPlugin {\n  generateTags (params, operation, response) {\n    if (!params) return {}\n\n    if (!params.TopicArn && !(response.data && response.data.TopicArn)) return {}\n\n    return {\n      'resource.name': `${operation} ${params.TopicArn || response.data.TopicArn}`,\n      'aws.sns.topic_arn': params.TopicArn || response.data.TopicArn\n    }\n\n    // TODO: should arn be sanitized or quantized in some way here,\n    // for example if it contains a phone number?\n  }\n\n  requestInject (span, request) {\n    const operation = request.operation\n    if (operation === 'publish' || operation === 'publishBatch') {\n      if (!request.params) {\n        request.params = {}\n      }\n      let injectPath\n      if (request.params.PublishBatchRequestEntries && request.params.PublishBatchRequestEntries.length > 0) {\n        injectPath = request.params.PublishBatchRequestEntries[0]\n      } else if (request.params.Message) {\n        injectPath = request.params\n      }\n      if (!injectPath.MessageAttributes) {\n        injectPath.MessageAttributes = {}\n      }\n      if (Object.keys(injectPath.MessageAttributes).length >= 10) { // SNS quota\n        log.info('Message attributes full, skipping trace context injection')\n        return\n      }\n      const ddInfo = {}\n      this.tracer.inject(span, 'text_map', ddInfo)\n      injectPath.MessageAttributes._datadog = {\n        DataType: 'Binary',\n        BinaryValue: JSON.stringify(ddInfo) // BINARY types are automatically base64 encoded\n      }\n    }\n  }\n}\n\nmodule.exports = Sns\n"],"mappings":"AAAA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,2BAAD,CAAnB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,SAAD,CAAhC;;AAEA,MAAME,GAAN,SAAkBD,gBAAlB,CAAmC;EACjCE,YAAY,CAAEC,MAAF,EAAUC,SAAV,EAAqBC,QAArB,EAA+B;IACzC,IAAI,CAACF,MAAL,EAAa,OAAO,EAAP;IAEb,IAAI,CAACA,MAAM,CAACG,QAAR,IAAoB,EAAED,QAAQ,CAACE,IAAT,IAAiBF,QAAQ,CAACE,IAAT,CAAcD,QAAjC,CAAxB,EAAoE,OAAO,EAAP;IAEpE,OAAO;MACL,iBAAkB,GAAEF,SAAU,IAAGD,MAAM,CAACG,QAAP,IAAmBD,QAAQ,CAACE,IAAT,CAAcD,QAAS,EADtE;MAEL,qBAAqBH,MAAM,CAACG,QAAP,IAAmBD,QAAQ,CAACE,IAAT,CAAcD;IAFjD,CAAP,CALyC,CAUzC;IACA;EACD;;EAEDE,aAAa,CAAEC,IAAF,EAAQC,OAAR,EAAiB;IAC5B,MAAMN,SAAS,GAAGM,OAAO,CAACN,SAA1B;;IACA,IAAIA,SAAS,KAAK,SAAd,IAA2BA,SAAS,KAAK,cAA7C,EAA6D;MAC3D,IAAI,CAACM,OAAO,CAACP,MAAb,EAAqB;QACnBO,OAAO,CAACP,MAAR,GAAiB,EAAjB;MACD;;MACD,IAAIQ,UAAJ;;MACA,IAAID,OAAO,CAACP,MAAR,CAAeS,0BAAf,IAA6CF,OAAO,CAACP,MAAR,CAAeS,0BAAf,CAA0CC,MAA1C,GAAmD,CAApG,EAAuG;QACrGF,UAAU,GAAGD,OAAO,CAACP,MAAR,CAAeS,0BAAf,CAA0C,CAA1C,CAAb;MACD,CAFD,MAEO,IAAIF,OAAO,CAACP,MAAR,CAAeW,OAAnB,EAA4B;QACjCH,UAAU,GAAGD,OAAO,CAACP,MAArB;MACD;;MACD,IAAI,CAACQ,UAAU,CAACI,iBAAhB,EAAmC;QACjCJ,UAAU,CAACI,iBAAX,GAA+B,EAA/B;MACD;;MACD,IAAIC,MAAM,CAACC,IAAP,CAAYN,UAAU,CAACI,iBAAvB,EAA0CF,MAA1C,IAAoD,EAAxD,EAA4D;QAAE;QAC5Df,GAAG,CAACoB,IAAJ,CAAS,2DAAT;QACA;MACD;;MACD,MAAMC,MAAM,GAAG,EAAf;MACA,KAAKC,MAAL,CAAYC,MAAZ,CAAmBZ,IAAnB,EAAyB,UAAzB,EAAqCU,MAArC;MACAR,UAAU,CAACI,iBAAX,CAA6BO,QAA7B,GAAwC;QACtCC,QAAQ,EAAE,QAD4B;QAEtCC,WAAW,EAAEC,IAAI,CAACC,SAAL,CAAeP,MAAf,CAFyB,CAEF;;MAFE,CAAxC;IAID;EACF;;AAzCgC;;AA4CnCQ,MAAM,CAACC,OAAP,GAAiB3B,GAAjB"},"metadata":{},"sourceType":"script"}