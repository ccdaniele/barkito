{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stop = exports.start = exports.profile = exports.v8Profile = void 0;\n\nconst heap_profiler_bindings_1 = require(\"./heap-profiler-bindings\");\n\nconst profile_serializer_1 = require(\"./profile-serializer\");\n\nlet enabled = false;\nlet heapIntervalBytes = 0;\nlet heapStackDepth = 0;\n/*\n * Collects a heap profile when heapProfiler is enabled. Otherwise throws\n * an error.\n *\n * Data is returned in V8 allocation profile format.\n */\n\nfunction v8Profile() {\n  if (!enabled) {\n    throw new Error('Heap profiler is not enabled.');\n  }\n\n  return (0, heap_profiler_bindings_1.getAllocationProfile)();\n}\n\nexports.v8Profile = v8Profile;\n/**\n * Collects a profile and returns it serialized in pprof format.\n * Throws if heap profiler is not enabled.\n *\n * @param ignoreSamplePath\n * @param sourceMapper\n */\n\nfunction profile(ignoreSamplePath, sourceMapper) {\n  const startTimeNanos = Date.now() * 1000 * 1000;\n  const result = v8Profile(); // Add node for external memory usage.\n  // Current type definitions do not have external.\n  // TODO: remove any once type definition is updated to include external.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  const {\n    external\n  } = process.memoryUsage();\n\n  if (external > 0) {\n    const externalNode = {\n      name: '(external)',\n      scriptName: '',\n      children: [],\n      allocations: [{\n        sizeBytes: external,\n        count: 1\n      }]\n    };\n    result.children.push(externalNode);\n  }\n\n  return (0, profile_serializer_1.serializeHeapProfile)(result, startTimeNanos, heapIntervalBytes, ignoreSamplePath, sourceMapper);\n}\n\nexports.profile = profile;\n/**\n * Starts heap profiling. If heap profiling has already been started with\n * the same parameters, this is a noop. If heap profiler has already been\n * started with different parameters, this throws an error.\n *\n * @param intervalBytes - average number of bytes between samples.\n * @param stackDepth - maximum stack depth for samples collected.\n */\n\nfunction start(intervalBytes, stackDepth) {\n  if (enabled) {\n    throw new Error(`Heap profiler is already started  with intervalBytes ${heapIntervalBytes} and stackDepth ${stackDepth}`);\n  }\n\n  heapIntervalBytes = intervalBytes;\n  heapStackDepth = stackDepth;\n  (0, heap_profiler_bindings_1.startSamplingHeapProfiler)(heapIntervalBytes, heapStackDepth);\n  enabled = true;\n}\n\nexports.start = start; // Stops heap profiling. If heap profiling has not been started, does nothing.\n\nfunction stop() {\n  if (enabled) {\n    enabled = false;\n    (0, heap_profiler_bindings_1.stopSamplingHeapProfiler)();\n  }\n}\n\nexports.stop = stop;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAkBA;;AAKA;;AAIA,IAAIA,OAAO,GAAG,KAAd;AACA,IAAIC,iBAAiB,GAAG,CAAxB;AACA,IAAIC,cAAc,GAAG,CAArB;AAEA;;;;;;;AAMA,SAAgBC,SAAhB,GAAyB;EACvB,IAAI,CAACH,OAAL,EAAc;IACZ,MAAM,IAAII,KAAJ,CAAU,+BAAV,CAAN;EACD;;EACD,OAAO,oDAAP;AACD;;AALDC;AAOA;;;;;;;;AAOA,SAAgBC,OAAhB,CACEC,gBADF,EAEEC,YAFF,EAE6B;EAE3B,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAb,GAAoB,IAA3C;EACA,MAAMC,MAAM,GAAGT,SAAS,EAAxB,CAH2B,CAI3B;EACA;EACA;EACA;;EACA,MAAM;IAACU;EAAD,IAAiCC,OAAO,CAACC,WAAR,EAAvC;;EACA,IAAIF,QAAQ,GAAG,CAAf,EAAkB;IAChB,MAAMG,YAAY,GAA0B;MAC1CC,IAAI,EAAE,YADoC;MAE1CC,UAAU,EAAE,EAF8B;MAG1CC,QAAQ,EAAE,EAHgC;MAI1CC,WAAW,EAAE,CAAC;QAACC,SAAS,EAAER,QAAZ;QAAsBS,KAAK,EAAE;MAA7B,CAAD;IAJ6B,CAA5C;IAMAV,MAAM,CAACO,QAAP,CAAgBI,IAAhB,CAAqBP,YAArB;EACD;;EACD,OAAO,+CACLJ,MADK,EAELH,cAFK,EAGLR,iBAHK,EAILM,gBAJK,EAKLC,YALK,CAAP;AAOD;;AA3BDH;AA6BA;;;;;;;;;AAQA,SAAgBmB,KAAhB,CAAsBC,aAAtB,EAA6CC,UAA7C,EAA+D;EAC7D,IAAI1B,OAAJ,EAAa;IACX,MAAM,IAAII,KAAJ,CACJ,wDAAwDH,iBAAiB,mBAAmByB,UAAU,EADlG,CAAN;EAGD;;EACDzB,iBAAiB,GAAGwB,aAApB;EACAvB,cAAc,GAAGwB,UAAjB;EACA,wDAA0BzB,iBAA1B,EAA6CC,cAA7C;EACAF,OAAO,GAAG,IAAV;AACD;;AAVDK,sB,CAYA;;AACA,SAAgBsB,IAAhB,GAAoB;EAClB,IAAI3B,OAAJ,EAAa;IACXA,OAAO,GAAG,KAAV;IACA;EACD;AACF;;AALDK","names":["enabled","heapIntervalBytes","heapStackDepth","v8Profile","Error","exports","profile","ignoreSamplePath","sourceMapper","startTimeNanos","Date","now","result","external","process","memoryUsage","externalNode","name","scriptName","children","allocations","sizeBytes","count","push","start","intervalBytes","stackDepth","stop"],"sources":["../../ts/src/heap-profiler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}