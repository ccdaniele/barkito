{"ast":null,"code":"'use strict';\n\nconst DatabasePlugin = require('../../dd-trace/src/plugins/database');\n\nconst log = require('../../dd-trace/src/log');\n\nclass OracledbPlugin extends DatabasePlugin {\n  static get name() {\n    return 'oracledb';\n  }\n\n  static get system() {\n    return 'oracle';\n  }\n\n  start(_ref) {\n    let {\n      query,\n      connAttrs\n    } = _ref;\n    const service = getServiceName(this.config, connAttrs);\n    const url = getUrl(connAttrs.connectString);\n    this.startSpan('oracle.query', {\n      service,\n      resource: query,\n      type: 'sql',\n      kind: 'client',\n      meta: {\n        'sql.query': query,\n        'db.user': this.config.user,\n        'db.instance': url.pathname && url.pathname.substring(1),\n        'db.hostname': url.hostname,\n        'db.port': url.port\n      }\n    });\n  }\n\n}\n\nfunction getServiceName(config, connAttrs) {\n  if (typeof config.service === 'function') {\n    return config.service(connAttrs);\n  }\n\n  return config.service;\n} // TODO: Avoid creating an error since it's a heavy operation.\n\n\nfunction getUrl(connectString) {\n  try {\n    return new URL(`http://${connectString}`);\n  } catch (e) {\n    log.error(e);\n    return {};\n  }\n}\n\nmodule.exports = OracledbPlugin;","map":{"version":3,"names":["DatabasePlugin","require","log","OracledbPlugin","name","system","start","query","connAttrs","service","getServiceName","config","url","getUrl","connectString","startSpan","resource","type","kind","meta","user","pathname","substring","hostname","port","URL","e","error","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-oracledb/src/index.js"],"sourcesContent":["'use strict'\n\nconst DatabasePlugin = require('../../dd-trace/src/plugins/database')\nconst log = require('../../dd-trace/src/log')\n\nclass OracledbPlugin extends DatabasePlugin {\n  static get name () { return 'oracledb' }\n  static get system () { return 'oracle' }\n\n  start ({ query, connAttrs }) {\n    const service = getServiceName(this.config, connAttrs)\n    const url = getUrl(connAttrs.connectString)\n\n    this.startSpan('oracle.query', {\n      service,\n      resource: query,\n      type: 'sql',\n      kind: 'client',\n      meta: {\n        'sql.query': query,\n        'db.user': this.config.user,\n        'db.instance': url.pathname && url.pathname.substring(1),\n        'db.hostname': url.hostname,\n        'db.port': url.port\n      }\n    })\n  }\n}\n\nfunction getServiceName (config, connAttrs) {\n  if (typeof config.service === 'function') {\n    return config.service(connAttrs)\n  }\n\n  return config.service\n}\n\n// TODO: Avoid creating an error since it's a heavy operation.\nfunction getUrl (connectString) {\n  try {\n    return new URL(`http://${connectString}`)\n  } catch (e) {\n    log.error(e)\n    return {}\n  }\n}\n\nmodule.exports = OracledbPlugin\n"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,qCAAD,CAA9B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,wBAAD,CAAnB;;AAEA,MAAME,cAAN,SAA6BH,cAA7B,CAA4C;EAC3B,WAAJI,IAAI,GAAI;IAAE,OAAO,UAAP;EAAmB;;EACvB,WAANC,MAAM,GAAI;IAAE,OAAO,QAAP;EAAiB;;EAExCC,KAAK,OAAwB;IAAA,IAAtB;MAAEC,KAAF;MAASC;IAAT,CAAsB;IAC3B,MAAMC,OAAO,GAAGC,cAAc,CAAC,KAAKC,MAAN,EAAcH,SAAd,CAA9B;IACA,MAAMI,GAAG,GAAGC,MAAM,CAACL,SAAS,CAACM,aAAX,CAAlB;IAEA,KAAKC,SAAL,CAAe,cAAf,EAA+B;MAC7BN,OAD6B;MAE7BO,QAAQ,EAAET,KAFmB;MAG7BU,IAAI,EAAE,KAHuB;MAI7BC,IAAI,EAAE,QAJuB;MAK7BC,IAAI,EAAE;QACJ,aAAaZ,KADT;QAEJ,WAAW,KAAKI,MAAL,CAAYS,IAFnB;QAGJ,eAAeR,GAAG,CAACS,QAAJ,IAAgBT,GAAG,CAACS,QAAJ,CAAaC,SAAb,CAAuB,CAAvB,CAH3B;QAIJ,eAAeV,GAAG,CAACW,QAJf;QAKJ,WAAWX,GAAG,CAACY;MALX;IALuB,CAA/B;EAaD;;AArByC;;AAwB5C,SAASd,cAAT,CAAyBC,MAAzB,EAAiCH,SAAjC,EAA4C;EAC1C,IAAI,OAAOG,MAAM,CAACF,OAAd,KAA0B,UAA9B,EAA0C;IACxC,OAAOE,MAAM,CAACF,OAAP,CAAeD,SAAf,CAAP;EACD;;EAED,OAAOG,MAAM,CAACF,OAAd;AACD,C,CAED;;;AACA,SAASI,MAAT,CAAiBC,aAAjB,EAAgC;EAC9B,IAAI;IACF,OAAO,IAAIW,GAAJ,CAAS,UAASX,aAAc,EAAhC,CAAP;EACD,CAFD,CAEE,OAAOY,CAAP,EAAU;IACVxB,GAAG,CAACyB,KAAJ,CAAUD,CAAV;IACA,OAAO,EAAP;EACD;AACF;;AAEDE,MAAM,CAACC,OAAP,GAAiB1B,cAAjB"},"metadata":{},"sourceType":"script"}