{"ast":null,"code":"const {\n  channel\n} = require('diagnostics_channel');\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin');\n\nconst {\n  storage\n} = require('../../datadog-core');\n\nconst {\n  CI_APP_ORIGIN,\n  TEST_STATUS,\n  JEST_TEST_RUNNER,\n  finishAllTraceSpans,\n  getTestEnvironmentMetadata,\n  getTestParentSpan,\n  getTestCommonTags,\n  getTestSessionCommonTags,\n  getTestSuiteCommonTags,\n  TEST_PARAMETERS,\n  getCodeOwnersFileEntries,\n  getCodeOwnersForFilename,\n  TEST_CODE_OWNERS,\n  TEST_SESSION_ID,\n  TEST_SUITE_ID,\n  TEST_COMMAND,\n  TEST_ITR_TESTS_SKIPPED,\n  TEST_CODE_COVERAGE_LINES_TOTAL\n} = require('../../dd-trace/src/plugins/util/test');\n\nconst {\n  getSkippableSuites\n} = require('../../dd-trace/src/ci-visibility/intelligent-test-runner/get-skippable-suites');\n\nconst {\n  getItrConfiguration\n} = require('../../dd-trace/src/ci-visibility/intelligent-test-runner/get-itr-configuration'); // https://github.com/facebook/jest/blob/d6ad15b0f88a05816c2fe034dd6900d28315d570/packages/jest-worker/src/types.ts#L38\n\n\nconst CHILD_MESSAGE_END = 2;\n\nfunction getTestSpanMetadata(tracer, test) {\n  const childOf = getTestParentSpan(tracer);\n  const {\n    suite,\n    name,\n    runner,\n    testParameters\n  } = test;\n  const commonTags = getTestCommonTags(name, suite, tracer._version);\n  return {\n    childOf,\n    ...commonTags,\n    [JEST_TEST_RUNNER]: runner,\n    [TEST_PARAMETERS]: testParameters\n  };\n}\n\nclass JestPlugin extends Plugin {\n  static get name() {\n    return 'jest';\n  }\n\n  constructor() {\n    super(...arguments);\n    const gitMetadataUploadFinishCh = channel('ci:git-metadata-upload:finish'); // `gitMetadataPromise` is used to wait until git metadata is uploaded to\n    // proceed with calculating the suites to skip\n    // TODO: add timeout after which the promise is resolved\n\n    const gitMetadataPromise = new Promise(resolve => {\n      gitMetadataUploadFinishCh.subscribe(err => {\n        resolve(err);\n      });\n    }); // Used to handle the end of a jest worker to be able to flush\n\n    const handler = _ref => {\n      let [message] = _ref;\n\n      if (message === CHILD_MESSAGE_END) {\n        this.tracer._exporter._writer.flush(() => {\n          // eslint-disable-next-line\n          // https://github.com/facebook/jest/blob/24ed3b5ecb419c023ee6fdbc838f07cc028fc007/packages/jest-worker/src/workers/processChild.ts#L118-L133\n          // Only after the flush is done we clean up open handles\n          // so the worker process can hopefully exit gracefully\n          process.removeListener('message', handler);\n        });\n      }\n    };\n\n    process.on('message', handler);\n    this.testEnvironmentMetadata = getTestEnvironmentMetadata('jest', this.config);\n    this.codeOwnersEntries = getCodeOwnersFileEntries();\n    const {\n      'git.repository_url': repositoryUrl,\n      'git.commit.sha': sha,\n      'os.version': osVersion,\n      'os.platform': osPlatform,\n      'os.architecture': osArchitecture,\n      'runtime.name': runtimeName,\n      'runtime.version': runtimeVersion,\n      'git.branch': gitBranch\n    } = this.testEnvironmentMetadata;\n    this.addSub('ci:jest:configuration', _ref2 => {\n      let {\n        onResponse,\n        onError\n      } = _ref2;\n\n      if (!this.config.isAgentlessEnabled || !this.config.isIntelligentTestRunnerEnabled) {\n        onResponse({});\n        return;\n      }\n\n      const testConfiguration = {\n        site: this.config.site,\n        env: this.tracer._env,\n        service: this.config.service || this.tracer._service,\n        repositoryUrl,\n        sha,\n        osVersion,\n        osPlatform,\n        osArchitecture,\n        runtimeName,\n        runtimeVersion,\n        branch: gitBranch\n      };\n      getItrConfiguration(testConfiguration, (err, config) => {\n        if (err) {\n          onError(err);\n        } else {\n          onResponse(config);\n        }\n      });\n    });\n    this.addSub('ci:jest:test-suite:skippable', _ref3 => {\n      let {\n        onResponse,\n        onError\n      } = _ref3;\n\n      if (!this.config.isAgentlessEnabled || !this.config.isIntelligentTestRunnerEnabled) {\n        return onResponse([]);\n      } // we only request after git upload has happened, if it didn't fail\n\n\n      gitMetadataPromise.then(gitUploadError => {\n        if (gitUploadError) {\n          return onError(gitUploadError);\n        }\n\n        const testConfiguration = {\n          site: this.config.site,\n          env: this.tracer._env,\n          service: this.config.service || this.tracer._service,\n          repositoryUrl,\n          sha,\n          osVersion,\n          osPlatform,\n          osArchitecture,\n          runtimeName,\n          runtimeVersion,\n          branch: gitBranch\n        };\n        getSkippableSuites(testConfiguration, (err, skippableTests) => {\n          if (err) {\n            onError(err);\n          } else {\n            onResponse(skippableTests);\n          }\n        });\n      });\n    });\n    this.addSub('ci:jest:session:start', command => {\n      if (!this.config.isAgentlessEnabled) {\n        return;\n      }\n\n      const store = storage.getStore();\n      const childOf = getTestParentSpan(this.tracer);\n      const testSessionSpanMetadata = getTestSessionCommonTags(command, this.tracer._version);\n      const testSessionSpan = this.tracer.startSpan('jest.test_session', {\n        childOf,\n        tags: { ...this.testEnvironmentMetadata,\n          ...testSessionSpanMetadata\n        }\n      });\n      this.enter(testSessionSpan, store);\n    });\n    this.addSub('ci:jest:session:finish', _ref4 => {\n      let {\n        status,\n        isTestsSkipped,\n        testCodeCoverageLinesTotal\n      } = _ref4;\n\n      if (!this.config.isAgentlessEnabled) {\n        return;\n      }\n\n      const testSessionSpan = storage.getStore().span;\n      testSessionSpan.setTag(TEST_STATUS, status);\n\n      if (isTestsSkipped) {\n        testSessionSpan.setTag(TEST_ITR_TESTS_SKIPPED, 'true');\n      }\n\n      if (testCodeCoverageLinesTotal !== undefined) {\n        testSessionSpan.setTag(TEST_CODE_COVERAGE_LINES_TOTAL, testCodeCoverageLinesTotal);\n      }\n\n      testSessionSpan.finish();\n      finishAllTraceSpans(testSessionSpan);\n\n      this.tracer._exporter._writer.flush();\n    }); // Test suites can be run in a different process from jest's main one.\n    // This subscriber changes the configuration objects from jest to inject the trace id\n    // of the test session to the processes that run the test suites.\n\n    this.addSub('ci:jest:session:configuration', configs => {\n      if (!this.config.isAgentlessEnabled) {\n        return;\n      }\n\n      const testSessionSpan = storage.getStore().span;\n      configs.forEach(config => {\n        config._ddTestSessionId = testSessionSpan.context()._traceId.toString(10);\n        config._ddTestCommand = testSessionSpan.context()._tags[TEST_COMMAND];\n      });\n    });\n    this.addSub('ci:jest:test-suite:start', _ref5 => {\n      let {\n        testSuite,\n        testEnvironmentOptions\n      } = _ref5;\n\n      if (!this.config.isAgentlessEnabled) {\n        return;\n      }\n\n      const {\n        _ddTestSessionId: testSessionId,\n        _ddTestCommand: testCommand\n      } = testEnvironmentOptions;\n      const store = storage.getStore();\n      const testSessionSpanContext = this.tracer.extract('text_map', {\n        'x-datadog-trace-id': testSessionId,\n        'x-datadog-parent-id': '0000000000000000'\n      });\n      const testSuiteMetadata = getTestSuiteCommonTags(testCommand, this.tracer._version, testSuite);\n      const testSuiteSpan = this.tracer.startSpan('jest.test_suite', {\n        childOf: testSessionSpanContext,\n        tags: { ...this.testEnvironmentMetadata,\n          ...testSuiteMetadata\n        }\n      });\n      this.enter(testSuiteSpan, store);\n    });\n    this.addSub('ci:jest:test-suite:finish', _ref6 => {\n      let {\n        status,\n        errorMessage\n      } = _ref6;\n\n      if (!this.config.isAgentlessEnabled) {\n        return;\n      }\n\n      const testSuiteSpan = storage.getStore().span;\n      testSuiteSpan.setTag(TEST_STATUS, status);\n\n      if (errorMessage) {\n        testSuiteSpan.setTag('error', new Error(errorMessage));\n      }\n\n      testSuiteSpan.finish();\n    });\n    this.addSub('ci:jest:test-suite:code-coverage', coverageFiles => {\n      if (!this.config.isAgentlessEnabled || !this.config.isIntelligentTestRunnerEnabled) {\n        return;\n      }\n\n      const testSuiteSpan = storage.getStore().span;\n\n      this.tracer._exporter.exportCoverage({\n        span: testSuiteSpan,\n        coverageFiles\n      });\n    });\n    this.addSub('ci:jest:test:start', test => {\n      const store = storage.getStore();\n      const span = this.startTestSpan(test);\n      this.enter(span, store);\n    });\n    this.addSub('ci:jest:test:finish', status => {\n      const span = storage.getStore().span;\n      span.setTag(TEST_STATUS, status);\n      span.finish();\n      finishAllTraceSpans(span);\n    });\n    this.addSub('ci:jest:test:err', error => {\n      if (error) {\n        const span = storage.getStore().span;\n        span.setTag(TEST_STATUS, 'fail');\n        span.setTag('error', error);\n      }\n    });\n    this.addSub('ci:jest:test:skip', test => {\n      const span = this.startTestSpan(test);\n      span.setTag(TEST_STATUS, 'skip');\n      span.finish();\n    });\n  }\n\n  startTestSpan(test) {\n    const suiteTags = {};\n    const store = storage.getStore();\n    const testSuiteSpan = store ? store.span : undefined;\n\n    if (testSuiteSpan) {\n      const testSuiteId = testSuiteSpan.context()._spanId.toString(10);\n\n      suiteTags[TEST_SUITE_ID] = testSuiteId;\n      suiteTags[TEST_SESSION_ID] = testSuiteSpan.context()._traceId.toString(10);\n      suiteTags[TEST_COMMAND] = testSuiteSpan.context()._tags[TEST_COMMAND];\n    }\n\n    const {\n      childOf,\n      ...testSpanMetadata\n    } = getTestSpanMetadata(this.tracer, test);\n    const codeOwners = getCodeOwnersForFilename(test.suite, this.codeOwnersEntries);\n\n    if (codeOwners) {\n      testSpanMetadata[TEST_CODE_OWNERS] = codeOwners;\n    }\n\n    const testSpan = this.tracer.startSpan('jest.test', {\n      childOf,\n      tags: { ...this.testEnvironmentMetadata,\n        ...testSpanMetadata,\n        ...suiteTags\n      }\n    });\n    testSpan.context()._trace.origin = CI_APP_ORIGIN;\n    return testSpan;\n  }\n\n}\n\nmodule.exports = JestPlugin;","map":{"version":3,"names":["channel","require","Plugin","storage","CI_APP_ORIGIN","TEST_STATUS","JEST_TEST_RUNNER","finishAllTraceSpans","getTestEnvironmentMetadata","getTestParentSpan","getTestCommonTags","getTestSessionCommonTags","getTestSuiteCommonTags","TEST_PARAMETERS","getCodeOwnersFileEntries","getCodeOwnersForFilename","TEST_CODE_OWNERS","TEST_SESSION_ID","TEST_SUITE_ID","TEST_COMMAND","TEST_ITR_TESTS_SKIPPED","TEST_CODE_COVERAGE_LINES_TOTAL","getSkippableSuites","getItrConfiguration","CHILD_MESSAGE_END","getTestSpanMetadata","tracer","test","childOf","suite","name","runner","testParameters","commonTags","_version","JestPlugin","constructor","gitMetadataUploadFinishCh","gitMetadataPromise","Promise","resolve","subscribe","err","handler","message","_exporter","_writer","flush","process","removeListener","on","testEnvironmentMetadata","config","codeOwnersEntries","repositoryUrl","sha","osVersion","osPlatform","osArchitecture","runtimeName","runtimeVersion","gitBranch","addSub","onResponse","onError","isAgentlessEnabled","isIntelligentTestRunnerEnabled","testConfiguration","site","env","_env","service","_service","branch","then","gitUploadError","skippableTests","command","store","getStore","testSessionSpanMetadata","testSessionSpan","startSpan","tags","enter","status","isTestsSkipped","testCodeCoverageLinesTotal","span","setTag","undefined","finish","configs","forEach","_ddTestSessionId","context","_traceId","toString","_ddTestCommand","_tags","testSuite","testEnvironmentOptions","testSessionId","testCommand","testSessionSpanContext","extract","testSuiteMetadata","testSuiteSpan","errorMessage","Error","coverageFiles","exportCoverage","startTestSpan","error","suiteTags","testSuiteId","_spanId","testSpanMetadata","codeOwners","testSpan","_trace","origin","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-jest/src/index.js"],"sourcesContent":["const { channel } = require('diagnostics_channel')\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin')\nconst { storage } = require('../../datadog-core')\n\nconst {\n  CI_APP_ORIGIN,\n  TEST_STATUS,\n  JEST_TEST_RUNNER,\n  finishAllTraceSpans,\n  getTestEnvironmentMetadata,\n  getTestParentSpan,\n  getTestCommonTags,\n  getTestSessionCommonTags,\n  getTestSuiteCommonTags,\n  TEST_PARAMETERS,\n  getCodeOwnersFileEntries,\n  getCodeOwnersForFilename,\n  TEST_CODE_OWNERS,\n  TEST_SESSION_ID,\n  TEST_SUITE_ID,\n  TEST_COMMAND,\n  TEST_ITR_TESTS_SKIPPED,\n  TEST_CODE_COVERAGE_LINES_TOTAL\n} = require('../../dd-trace/src/plugins/util/test')\n\nconst { getSkippableSuites } = require('../../dd-trace/src/ci-visibility/intelligent-test-runner/get-skippable-suites')\nconst {\n  getItrConfiguration\n} = require('../../dd-trace/src/ci-visibility/intelligent-test-runner/get-itr-configuration')\n\n// https://github.com/facebook/jest/blob/d6ad15b0f88a05816c2fe034dd6900d28315d570/packages/jest-worker/src/types.ts#L38\nconst CHILD_MESSAGE_END = 2\n\nfunction getTestSpanMetadata (tracer, test) {\n  const childOf = getTestParentSpan(tracer)\n\n  const { suite, name, runner, testParameters } = test\n\n  const commonTags = getTestCommonTags(name, suite, tracer._version)\n\n  return {\n    childOf,\n    ...commonTags,\n    [JEST_TEST_RUNNER]: runner,\n    [TEST_PARAMETERS]: testParameters\n  }\n}\n\nclass JestPlugin extends Plugin {\n  static get name () {\n    return 'jest'\n  }\n\n  constructor (...args) {\n    super(...args)\n\n    const gitMetadataUploadFinishCh = channel('ci:git-metadata-upload:finish')\n    // `gitMetadataPromise` is used to wait until git metadata is uploaded to\n    // proceed with calculating the suites to skip\n    // TODO: add timeout after which the promise is resolved\n    const gitMetadataPromise = new Promise(resolve => {\n      gitMetadataUploadFinishCh.subscribe(err => {\n        resolve(err)\n      })\n    })\n\n    // Used to handle the end of a jest worker to be able to flush\n    const handler = ([message]) => {\n      if (message === CHILD_MESSAGE_END) {\n        this.tracer._exporter._writer.flush(() => {\n          // eslint-disable-next-line\n          // https://github.com/facebook/jest/blob/24ed3b5ecb419c023ee6fdbc838f07cc028fc007/packages/jest-worker/src/workers/processChild.ts#L118-L133\n          // Only after the flush is done we clean up open handles\n          // so the worker process can hopefully exit gracefully\n          process.removeListener('message', handler)\n        })\n      }\n    }\n    process.on('message', handler)\n\n    this.testEnvironmentMetadata = getTestEnvironmentMetadata('jest', this.config)\n    this.codeOwnersEntries = getCodeOwnersFileEntries()\n\n    const {\n      'git.repository_url': repositoryUrl,\n      'git.commit.sha': sha,\n      'os.version': osVersion,\n      'os.platform': osPlatform,\n      'os.architecture': osArchitecture,\n      'runtime.name': runtimeName,\n      'runtime.version': runtimeVersion,\n      'git.branch': gitBranch\n    } = this.testEnvironmentMetadata\n\n    this.addSub('ci:jest:configuration', ({ onResponse, onError }) => {\n      if (!this.config.isAgentlessEnabled || !this.config.isIntelligentTestRunnerEnabled) {\n        onResponse({})\n        return\n      }\n      const testConfiguration = {\n        site: this.config.site,\n        env: this.tracer._env,\n        service: this.config.service || this.tracer._service,\n        repositoryUrl,\n        sha,\n        osVersion,\n        osPlatform,\n        osArchitecture,\n        runtimeName,\n        runtimeVersion,\n        branch: gitBranch\n      }\n      getItrConfiguration(testConfiguration, (err, config) => {\n        if (err) {\n          onError(err)\n        } else {\n          onResponse(config)\n        }\n      })\n    })\n\n    this.addSub('ci:jest:test-suite:skippable', ({ onResponse, onError }) => {\n      if (!this.config.isAgentlessEnabled || !this.config.isIntelligentTestRunnerEnabled) {\n        return onResponse([])\n      }\n      // we only request after git upload has happened, if it didn't fail\n      gitMetadataPromise.then((gitUploadError) => {\n        if (gitUploadError) {\n          return onError(gitUploadError)\n        }\n        const testConfiguration = {\n          site: this.config.site,\n          env: this.tracer._env,\n          service: this.config.service || this.tracer._service,\n          repositoryUrl,\n          sha,\n          osVersion,\n          osPlatform,\n          osArchitecture,\n          runtimeName,\n          runtimeVersion,\n          branch: gitBranch\n        }\n        getSkippableSuites(testConfiguration, (err, skippableTests) => {\n          if (err) {\n            onError(err)\n          } else {\n            onResponse(skippableTests)\n          }\n        })\n      })\n    })\n\n    this.addSub('ci:jest:session:start', (command) => {\n      if (!this.config.isAgentlessEnabled) {\n        return\n      }\n      const store = storage.getStore()\n      const childOf = getTestParentSpan(this.tracer)\n      const testSessionSpanMetadata = getTestSessionCommonTags(command, this.tracer._version)\n\n      const testSessionSpan = this.tracer.startSpan('jest.test_session', {\n        childOf,\n        tags: {\n          ...this.testEnvironmentMetadata,\n          ...testSessionSpanMetadata\n        }\n      })\n      this.enter(testSessionSpan, store)\n    })\n\n    this.addSub('ci:jest:session:finish', ({ status, isTestsSkipped, testCodeCoverageLinesTotal }) => {\n      if (!this.config.isAgentlessEnabled) {\n        return\n      }\n      const testSessionSpan = storage.getStore().span\n      testSessionSpan.setTag(TEST_STATUS, status)\n      if (isTestsSkipped) {\n        testSessionSpan.setTag(TEST_ITR_TESTS_SKIPPED, 'true')\n      }\n      if (testCodeCoverageLinesTotal !== undefined) {\n        testSessionSpan.setTag(TEST_CODE_COVERAGE_LINES_TOTAL, testCodeCoverageLinesTotal)\n      }\n      testSessionSpan.finish()\n      finishAllTraceSpans(testSessionSpan)\n      this.tracer._exporter._writer.flush()\n    })\n\n    // Test suites can be run in a different process from jest's main one.\n    // This subscriber changes the configuration objects from jest to inject the trace id\n    // of the test session to the processes that run the test suites.\n    this.addSub('ci:jest:session:configuration', configs => {\n      if (!this.config.isAgentlessEnabled) {\n        return\n      }\n      const testSessionSpan = storage.getStore().span\n      configs.forEach(config => {\n        config._ddTestSessionId = testSessionSpan.context()._traceId.toString(10)\n        config._ddTestCommand = testSessionSpan.context()._tags[TEST_COMMAND]\n      })\n    })\n\n    this.addSub('ci:jest:test-suite:start', ({ testSuite, testEnvironmentOptions }) => {\n      if (!this.config.isAgentlessEnabled) {\n        return\n      }\n\n      const { _ddTestSessionId: testSessionId, _ddTestCommand: testCommand } = testEnvironmentOptions\n\n      const store = storage.getStore()\n\n      const testSessionSpanContext = this.tracer.extract('text_map', {\n        'x-datadog-trace-id': testSessionId,\n        'x-datadog-parent-id': '0000000000000000'\n      })\n\n      const testSuiteMetadata = getTestSuiteCommonTags(testCommand, this.tracer._version, testSuite)\n\n      const testSuiteSpan = this.tracer.startSpan('jest.test_suite', {\n        childOf: testSessionSpanContext,\n        tags: {\n          ...this.testEnvironmentMetadata,\n          ...testSuiteMetadata\n        }\n      })\n      this.enter(testSuiteSpan, store)\n    })\n\n    this.addSub('ci:jest:test-suite:finish', ({ status, errorMessage }) => {\n      if (!this.config.isAgentlessEnabled) {\n        return\n      }\n      const testSuiteSpan = storage.getStore().span\n      testSuiteSpan.setTag(TEST_STATUS, status)\n      if (errorMessage) {\n        testSuiteSpan.setTag('error', new Error(errorMessage))\n      }\n      testSuiteSpan.finish()\n    })\n\n    this.addSub('ci:jest:test-suite:code-coverage', (coverageFiles) => {\n      if (!this.config.isAgentlessEnabled || !this.config.isIntelligentTestRunnerEnabled) {\n        return\n      }\n      const testSuiteSpan = storage.getStore().span\n      this.tracer._exporter.exportCoverage({ span: testSuiteSpan, coverageFiles })\n    })\n\n    this.addSub('ci:jest:test:start', (test) => {\n      const store = storage.getStore()\n      const span = this.startTestSpan(test)\n\n      this.enter(span, store)\n    })\n\n    this.addSub('ci:jest:test:finish', (status) => {\n      const span = storage.getStore().span\n      span.setTag(TEST_STATUS, status)\n      span.finish()\n      finishAllTraceSpans(span)\n    })\n\n    this.addSub('ci:jest:test:err', (error) => {\n      if (error) {\n        const span = storage.getStore().span\n        span.setTag(TEST_STATUS, 'fail')\n        span.setTag('error', error)\n      }\n    })\n\n    this.addSub('ci:jest:test:skip', (test) => {\n      const span = this.startTestSpan(test)\n      span.setTag(TEST_STATUS, 'skip')\n      span.finish()\n    })\n  }\n\n  startTestSpan (test) {\n    const suiteTags = {}\n    const store = storage.getStore()\n    const testSuiteSpan = store ? store.span : undefined\n    if (testSuiteSpan) {\n      const testSuiteId = testSuiteSpan.context()._spanId.toString(10)\n      suiteTags[TEST_SUITE_ID] = testSuiteId\n      suiteTags[TEST_SESSION_ID] = testSuiteSpan.context()._traceId.toString(10)\n      suiteTags[TEST_COMMAND] = testSuiteSpan.context()._tags[TEST_COMMAND]\n    }\n\n    const {\n      childOf,\n      ...testSpanMetadata\n    } = getTestSpanMetadata(this.tracer, test)\n\n    const codeOwners = getCodeOwnersForFilename(test.suite, this.codeOwnersEntries)\n\n    if (codeOwners) {\n      testSpanMetadata[TEST_CODE_OWNERS] = codeOwners\n    }\n\n    const testSpan = this.tracer\n      .startSpan('jest.test', {\n        childOf,\n        tags: {\n          ...this.testEnvironmentMetadata,\n          ...testSpanMetadata,\n          ...suiteTags\n        }\n      })\n\n    testSpan.context()._trace.origin = CI_APP_ORIGIN\n\n    return testSpan\n  }\n}\n\nmodule.exports = JestPlugin\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}