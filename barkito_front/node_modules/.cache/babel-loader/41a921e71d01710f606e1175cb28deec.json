{"ast":null,"code":"const request = require('../exporters/common/request');\n\nlet seqId = 0;\n\nfunction sendData(config, application, host, reqType) {\n  let payload = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  const {\n    hostname,\n    port\n  } = config;\n  const options = {\n    hostname,\n    port,\n    method: 'POST',\n    path: '/telemetry/proxy/api/v2/apmtelemetry',\n    headers: {\n      'content-type': 'application/json',\n      'dd-telemetry-api-version': 'v1',\n      'dd-telemetry-request-type': reqType\n    }\n  };\n  const data = JSON.stringify({\n    api_version: 'v1',\n    request_type: reqType,\n    tracer_time: Math.floor(Date.now() / 1000),\n    runtime_id: config.tags['runtime-id'],\n    seq_id: ++seqId,\n    payload,\n    application,\n    host\n  });\n  request(data, options, () => {// ignore errors\n  });\n}\n\nmodule.exports = {\n  sendData\n};","map":{"version":3,"names":["request","require","seqId","sendData","config","application","host","reqType","payload","hostname","port","options","method","path","headers","data","JSON","stringify","api_version","request_type","tracer_time","Math","floor","Date","now","runtime_id","tags","seq_id","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/telemetry/send-data.js"],"sourcesContent":["const request = require('../exporters/common/request')\nlet seqId = 0\nfunction sendData (config, application, host, reqType, payload = {}) {\n  const {\n    hostname,\n    port\n  } = config\n  const options = {\n    hostname,\n    port,\n    method: 'POST',\n    path: '/telemetry/proxy/api/v2/apmtelemetry',\n    headers: {\n      'content-type': 'application/json',\n      'dd-telemetry-api-version': 'v1',\n      'dd-telemetry-request-type': reqType\n    }\n  }\n  const data = JSON.stringify({\n    api_version: 'v1',\n    request_type: reqType,\n    tracer_time: Math.floor(Date.now() / 1000),\n    runtime_id: config.tags['runtime-id'],\n    seq_id: ++seqId,\n    payload,\n    application,\n    host\n  })\n\n  request(data, options, () => {\n    // ignore errors\n  })\n}\n\nmodule.exports = { sendData }\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,6BAAD,CAAvB;;AACA,IAAIC,KAAK,GAAG,CAAZ;;AACA,SAASC,QAAT,CAAmBC,MAAnB,EAA2BC,WAA3B,EAAwCC,IAAxC,EAA8CC,OAA9C,EAAqE;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACnE,MAAM;IACJC,QADI;IAEJC;EAFI,IAGFN,MAHJ;EAIA,MAAMO,OAAO,GAAG;IACdF,QADc;IAEdC,IAFc;IAGdE,MAAM,EAAE,MAHM;IAIdC,IAAI,EAAE,sCAJQ;IAKdC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEP,4BAA4B,IAFrB;MAGP,6BAA6BP;IAHtB;EALK,CAAhB;EAWA,MAAMQ,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;IAC1BC,WAAW,EAAE,IADa;IAE1BC,YAAY,EAAEZ,OAFY;IAG1Ba,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAHa;IAI1BC,UAAU,EAAErB,MAAM,CAACsB,IAAP,CAAY,YAAZ,CAJc;IAK1BC,MAAM,EAAE,EAAEzB,KALgB;IAM1BM,OAN0B;IAO1BH,WAP0B;IAQ1BC;EAR0B,CAAf,CAAb;EAWAN,OAAO,CAACe,IAAD,EAAOJ,OAAP,EAAgB,MAAM,CAC3B;EACD,CAFM,CAAP;AAGD;;AAEDiB,MAAM,CAACC,OAAP,GAAiB;EAAE1B;AAAF,CAAjB"},"metadata":{},"sourceType":"script"}