{"ast":null,"code":"const {\n  execSync\n} = require('child_process');\n\nconst os = require('os');\n\nconst path = require('path');\n\nconst log = require('../../log');\n\nconst {\n  sanitizedExec\n} = require('./exec');\n\nconst {\n  GIT_COMMIT_SHA,\n  GIT_BRANCH,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_MESSAGE,\n  GIT_COMMIT_COMMITTER_DATE,\n  GIT_COMMIT_COMMITTER_EMAIL,\n  GIT_COMMIT_COMMITTER_NAME,\n  GIT_COMMIT_AUTHOR_DATE,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  CI_WORKSPACE_PATH\n} = require('./tags');\n\nconst GIT_REV_LIST_MAX_BUFFER = 8 * 1024 * 1024; // 8MB\n\nfunction getRepositoryUrl() {\n  return sanitizedExec('git config --get remote.origin.url', {\n    stdio: 'pipe'\n  });\n}\n\nfunction getLatestCommits() {\n  try {\n    return execSync('git log --format=%H -n 1000 --since=\"1 month ago\"', {\n      stdio: 'pipe'\n    }).toString().split('\\n').filter(commit => commit);\n  } catch (err) {\n    log.error(err);\n    return [];\n  }\n}\n\nfunction getCommitsToUpload(commitsToExclude) {\n  let gitCommandToGetCommitsToUpload = 'git rev-list --objects --no-object-names --filter=blob:none --since=\"1 month ago\" HEAD';\n  commitsToExclude.forEach(commit => {\n    gitCommandToGetCommitsToUpload = `${gitCommandToGetCommitsToUpload} ^${commit}`;\n  });\n\n  try {\n    return execSync(gitCommandToGetCommitsToUpload, {\n      stdio: 'pipe',\n      maxBuffer: GIT_REV_LIST_MAX_BUFFER\n    }).toString().split('\\n').filter(commit => commit);\n  } catch (err) {\n    log.error(err);\n    return [];\n  }\n}\n\nfunction generatePackFilesForCommits(commitsToUpload) {\n  const tmpFolder = os.tmpdir();\n  const randomPrefix = String(Math.floor(Math.random() * 10000));\n  const temporaryPath = path.join(tmpFolder, randomPrefix);\n  const cwdPath = path.join(process.cwd(), randomPrefix); // Generates pack files to upload and\n  // returns the ordered list of packfiles' paths\n\n  function execGitPackObjects(targetPath) {\n    return execSync(`git pack-objects --compression=9 --max-pack-size=3m ${targetPath}`, {\n      input: commitsToUpload.join('\\n')\n    }).toString().split('\\n').filter(commit => commit).map(commit => `${targetPath}-${commit}.pack`);\n  }\n\n  try {\n    return execGitPackObjects(temporaryPath, commitsToUpload);\n  } catch (err) {\n    log.error(err);\n    /**\n     * The generation of pack files in the temporary folder (from `os.tmpdir()`)\n     * sometimes fails in certain CI setups with the error message\n     * `unable to rename temporary pack file: Invalid cross-device link`.\n     * The reason why is unclear.\n     *\n     * A workaround is to attempt to generate the pack files in `process.cwd()`.\n     * While this works most of the times, it's not ideal since it affects the git status.\n     * This workaround is intended to be temporary.\n     *\n     * TODO: fix issue and remove workaround.\n     */\n\n    try {\n      return execGitPackObjects(cwdPath, commitsToUpload);\n    } catch (err) {\n      log.error(err);\n    }\n\n    return [];\n  }\n} // If there is ciMetadata, it takes precedence.\n\n\nfunction getGitMetadata(ciMetadata) {\n  const {\n    commitSHA,\n    branch,\n    repositoryUrl,\n    tag,\n    commitMessage,\n    authorName: ciAuthorName,\n    authorEmail: ciAuthorEmail,\n    ciWorkspacePath\n  } = ciMetadata; // With stdio: 'pipe', errors in this command will not be output to the parent process,\n  // so if `git` is not present in the env, we won't show a warning to the user.\n\n  const [authorName, authorEmail, authorDate, committerName, committerEmail, committerDate] = sanitizedExec('git show -s --format=%an,%ae,%aI,%cn,%ce,%cI', {\n    stdio: 'pipe'\n  }).split(',');\n  return {\n    [GIT_REPOSITORY_URL]: repositoryUrl || sanitizedExec('git ls-remote --get-url', {\n      stdio: 'pipe'\n    }),\n    [GIT_COMMIT_MESSAGE]: commitMessage || sanitizedExec('git show -s --format=%s', {\n      stdio: 'pipe'\n    }),\n    [GIT_COMMIT_AUTHOR_DATE]: authorDate,\n    [GIT_COMMIT_AUTHOR_NAME]: ciAuthorName || authorName,\n    [GIT_COMMIT_AUTHOR_EMAIL]: ciAuthorEmail || authorEmail,\n    [GIT_COMMIT_COMMITTER_DATE]: committerDate,\n    [GIT_COMMIT_COMMITTER_NAME]: committerName,\n    [GIT_COMMIT_COMMITTER_EMAIL]: committerEmail,\n    [GIT_BRANCH]: branch || sanitizedExec('git rev-parse --abbrev-ref HEAD', {\n      stdio: 'pipe'\n    }),\n    [GIT_COMMIT_SHA]: commitSHA || sanitizedExec('git rev-parse HEAD', {\n      stdio: 'pipe'\n    }),\n    [GIT_TAG]: tag,\n    [CI_WORKSPACE_PATH]: ciWorkspacePath || sanitizedExec('git rev-parse --show-toplevel', {\n      stdio: 'pipe'\n    })\n  };\n}\n\nmodule.exports = {\n  getGitMetadata,\n  getLatestCommits,\n  getRepositoryUrl,\n  generatePackFilesForCommits,\n  getCommitsToUpload,\n  GIT_REV_LIST_MAX_BUFFER\n};","map":{"version":3,"names":["execSync","require","os","path","log","sanitizedExec","GIT_COMMIT_SHA","GIT_BRANCH","GIT_REPOSITORY_URL","GIT_TAG","GIT_COMMIT_MESSAGE","GIT_COMMIT_COMMITTER_DATE","GIT_COMMIT_COMMITTER_EMAIL","GIT_COMMIT_COMMITTER_NAME","GIT_COMMIT_AUTHOR_DATE","GIT_COMMIT_AUTHOR_EMAIL","GIT_COMMIT_AUTHOR_NAME","CI_WORKSPACE_PATH","GIT_REV_LIST_MAX_BUFFER","getRepositoryUrl","stdio","getLatestCommits","toString","split","filter","commit","err","error","getCommitsToUpload","commitsToExclude","gitCommandToGetCommitsToUpload","forEach","maxBuffer","generatePackFilesForCommits","commitsToUpload","tmpFolder","tmpdir","randomPrefix","String","Math","floor","random","temporaryPath","join","cwdPath","process","cwd","execGitPackObjects","targetPath","input","map","getGitMetadata","ciMetadata","commitSHA","branch","repositoryUrl","tag","commitMessage","authorName","ciAuthorName","authorEmail","ciAuthorEmail","ciWorkspacePath","authorDate","committerName","committerEmail","committerDate","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/plugins/util/git.js"],"sourcesContent":["const { execSync } = require('child_process')\nconst os = require('os')\nconst path = require('path')\n\nconst log = require('../../log')\nconst { sanitizedExec } = require('./exec')\nconst {\n  GIT_COMMIT_SHA,\n  GIT_BRANCH,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_MESSAGE,\n  GIT_COMMIT_COMMITTER_DATE,\n  GIT_COMMIT_COMMITTER_EMAIL,\n  GIT_COMMIT_COMMITTER_NAME,\n  GIT_COMMIT_AUTHOR_DATE,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  CI_WORKSPACE_PATH\n} = require('./tags')\n\nconst GIT_REV_LIST_MAX_BUFFER = 8 * 1024 * 1024 // 8MB\n\nfunction getRepositoryUrl () {\n  return sanitizedExec('git config --get remote.origin.url', { stdio: 'pipe' })\n}\n\nfunction getLatestCommits () {\n  try {\n    return execSync('git log --format=%H -n 1000 --since=\"1 month ago\"', { stdio: 'pipe' })\n      .toString()\n      .split('\\n')\n      .filter(commit => commit)\n  } catch (err) {\n    log.error(err)\n    return []\n  }\n}\n\nfunction getCommitsToUpload (commitsToExclude) {\n  let gitCommandToGetCommitsToUpload =\n    'git rev-list --objects --no-object-names --filter=blob:none --since=\"1 month ago\" HEAD'\n\n  commitsToExclude.forEach(commit => {\n    gitCommandToGetCommitsToUpload = `${gitCommandToGetCommitsToUpload} ^${commit}`\n  })\n\n  try {\n    return execSync(gitCommandToGetCommitsToUpload, { stdio: 'pipe', maxBuffer: GIT_REV_LIST_MAX_BUFFER })\n      .toString()\n      .split('\\n')\n      .filter(commit => commit)\n  } catch (err) {\n    log.error(err)\n    return []\n  }\n}\n\nfunction generatePackFilesForCommits (commitsToUpload) {\n  const tmpFolder = os.tmpdir()\n\n  const randomPrefix = String(Math.floor(Math.random() * 10000))\n  const temporaryPath = path.join(tmpFolder, randomPrefix)\n  const cwdPath = path.join(process.cwd(), randomPrefix)\n\n  // Generates pack files to upload and\n  // returns the ordered list of packfiles' paths\n  function execGitPackObjects (targetPath) {\n    return execSync(\n      `git pack-objects --compression=9 --max-pack-size=3m ${targetPath}`,\n      { input: commitsToUpload.join('\\n') }\n    ).toString().split('\\n').filter(commit => commit).map(commit => `${targetPath}-${commit}.pack`)\n  }\n\n  try {\n    return execGitPackObjects(temporaryPath, commitsToUpload)\n  } catch (err) {\n    log.error(err)\n    /**\n     * The generation of pack files in the temporary folder (from `os.tmpdir()`)\n     * sometimes fails in certain CI setups with the error message\n     * `unable to rename temporary pack file: Invalid cross-device link`.\n     * The reason why is unclear.\n     *\n     * A workaround is to attempt to generate the pack files in `process.cwd()`.\n     * While this works most of the times, it's not ideal since it affects the git status.\n     * This workaround is intended to be temporary.\n     *\n     * TODO: fix issue and remove workaround.\n     */\n    try {\n      return execGitPackObjects(cwdPath, commitsToUpload)\n    } catch (err) {\n      log.error(err)\n    }\n\n    return []\n  }\n}\n\n// If there is ciMetadata, it takes precedence.\nfunction getGitMetadata (ciMetadata) {\n  const {\n    commitSHA,\n    branch,\n    repositoryUrl,\n    tag,\n    commitMessage,\n    authorName: ciAuthorName,\n    authorEmail: ciAuthorEmail,\n    ciWorkspacePath\n  } = ciMetadata\n\n  // With stdio: 'pipe', errors in this command will not be output to the parent process,\n  // so if `git` is not present in the env, we won't show a warning to the user.\n  const [\n    authorName,\n    authorEmail,\n    authorDate,\n    committerName,\n    committerEmail,\n    committerDate\n  ] = sanitizedExec('git show -s --format=%an,%ae,%aI,%cn,%ce,%cI', { stdio: 'pipe' }).split(',')\n\n  return {\n    [GIT_REPOSITORY_URL]:\n      repositoryUrl || sanitizedExec('git ls-remote --get-url', { stdio: 'pipe' }),\n    [GIT_COMMIT_MESSAGE]:\n      commitMessage || sanitizedExec('git show -s --format=%s', { stdio: 'pipe' }),\n    [GIT_COMMIT_AUTHOR_DATE]: authorDate,\n    [GIT_COMMIT_AUTHOR_NAME]: ciAuthorName || authorName,\n    [GIT_COMMIT_AUTHOR_EMAIL]: ciAuthorEmail || authorEmail,\n    [GIT_COMMIT_COMMITTER_DATE]: committerDate,\n    [GIT_COMMIT_COMMITTER_NAME]: committerName,\n    [GIT_COMMIT_COMMITTER_EMAIL]: committerEmail,\n    [GIT_BRANCH]: branch || sanitizedExec('git rev-parse --abbrev-ref HEAD', { stdio: 'pipe' }),\n    [GIT_COMMIT_SHA]: commitSHA || sanitizedExec('git rev-parse HEAD', { stdio: 'pipe' }),\n    [GIT_TAG]: tag,\n    [CI_WORKSPACE_PATH]: ciWorkspacePath || sanitizedExec('git rev-parse --show-toplevel', { stdio: 'pipe' })\n  }\n}\n\nmodule.exports = {\n  getGitMetadata,\n  getLatestCommits,\n  getRepositoryUrl,\n  generatePackFilesForCommits,\n  getCommitsToUpload,\n  GIT_REV_LIST_MAX_BUFFER\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}