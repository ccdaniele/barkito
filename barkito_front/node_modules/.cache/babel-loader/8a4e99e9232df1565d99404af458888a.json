{"ast":null,"code":"const request = require('../../exporters/common/request');\n\nconst id = require('../../id');\n\nfunction getItrConfiguration(_ref, done) {\n  let {\n    site,\n    env,\n    service,\n    repositoryUrl,\n    sha,\n    osVersion,\n    osPlatform,\n    osArchitecture,\n    runtimeName,\n    runtimeVersion,\n    branch\n  } = _ref;\n  const url = new URL(`https://api.${site}`);\n  const apiKey = process.env.DATADOG_API_KEY || process.env.DD_API_KEY;\n  const appKey = process.env.DATADOG_APP_KEY || process.env.DD_APP_KEY || process.env.DATADOG_APPLICATION_KEY || process.env.DD_APPLICATION_KEY;\n\n  if (!apiKey || !appKey) {\n    done(new Error('App key or API key undefined'));\n    return;\n  }\n\n  const options = {\n    path: '/api/v2/libraries/tests/services/setting',\n    method: 'POST',\n    headers: {\n      'dd-api-key': apiKey,\n      'dd-application-key': appKey,\n      'Content-Type': 'application/json'\n    },\n    protocol: url.protocol,\n    hostname: url.hostname,\n    port: url.port\n  };\n  const data = JSON.stringify({\n    data: {\n      id: id().toString(10),\n      type: 'ci_app_test_service_libraries_settings',\n      attributes: {\n        test_level: 'suite',\n        configurations: {\n          'os.platform': osPlatform,\n          'os.version': osVersion,\n          'os.architecture': osArchitecture,\n          'runtime.name': runtimeName,\n          'runtime.version': runtimeVersion\n        },\n        service,\n        env,\n        repository_url: repositoryUrl,\n        sha,\n        branch\n      }\n    }\n  });\n  request(data, options, (err, res) => {\n    if (err) {\n      done(err);\n    } else {\n      try {\n        const {\n          data: {\n            attributes: {\n              code_coverage: isCodeCoverageEnabled,\n              tests_skipping: isSuitesSkippingEnabled\n            }\n          }\n        } = JSON.parse(res);\n        done(null, {\n          isCodeCoverageEnabled,\n          isSuitesSkippingEnabled\n        });\n      } catch (e) {\n        done(e);\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  getItrConfiguration\n};","map":{"version":3,"names":["request","require","id","getItrConfiguration","done","site","env","service","repositoryUrl","sha","osVersion","osPlatform","osArchitecture","runtimeName","runtimeVersion","branch","url","URL","apiKey","process","DATADOG_API_KEY","DD_API_KEY","appKey","DATADOG_APP_KEY","DD_APP_KEY","DATADOG_APPLICATION_KEY","DD_APPLICATION_KEY","Error","options","path","method","headers","protocol","hostname","port","data","JSON","stringify","toString","type","attributes","test_level","configurations","repository_url","err","res","code_coverage","isCodeCoverageEnabled","tests_skipping","isSuitesSkippingEnabled","parse","e","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/ci-visibility/intelligent-test-runner/get-itr-configuration.js"],"sourcesContent":["const request = require('../../exporters/common/request')\nconst id = require('../../id')\n\nfunction getItrConfiguration ({\n  site,\n  env,\n  service,\n  repositoryUrl,\n  sha,\n  osVersion,\n  osPlatform,\n  osArchitecture,\n  runtimeName,\n  runtimeVersion,\n  branch\n}, done) {\n  const url = new URL(`https://api.${site}`)\n\n  const apiKey = process.env.DATADOG_API_KEY || process.env.DD_API_KEY\n  const appKey = process.env.DATADOG_APP_KEY ||\n    process.env.DD_APP_KEY ||\n    process.env.DATADOG_APPLICATION_KEY ||\n    process.env.DD_APPLICATION_KEY\n\n  if (!apiKey || !appKey) {\n    done(new Error('App key or API key undefined'))\n    return\n  }\n\n  const options = {\n    path: '/api/v2/libraries/tests/services/setting',\n    method: 'POST',\n    headers: {\n      'dd-api-key': apiKey,\n      'dd-application-key': appKey,\n      'Content-Type': 'application/json'\n    },\n    protocol: url.protocol,\n    hostname: url.hostname,\n    port: url.port\n  }\n\n  const data = JSON.stringify({\n    data: {\n      id: id().toString(10),\n      type: 'ci_app_test_service_libraries_settings',\n      attributes: {\n        test_level: 'suite',\n        configurations: {\n          'os.platform': osPlatform,\n          'os.version': osVersion,\n          'os.architecture': osArchitecture,\n          'runtime.name': runtimeName,\n          'runtime.version': runtimeVersion\n        },\n        service,\n        env,\n        repository_url: repositoryUrl,\n        sha,\n        branch\n      }\n    }\n  })\n\n  request(data, options, (err, res) => {\n    if (err) {\n      done(err)\n    } else {\n      try {\n        const {\n          data: {\n            attributes: {\n              code_coverage: isCodeCoverageEnabled,\n              tests_skipping: isSuitesSkippingEnabled\n            }\n          }\n        } = JSON.parse(res)\n\n        done(null, { isCodeCoverageEnabled, isSuitesSkippingEnabled })\n      } catch (e) {\n        done(e)\n      }\n    }\n  })\n}\n\nmodule.exports = { getItrConfiguration }\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,gCAAD,CAAvB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,UAAD,CAAlB;;AAEA,SAASE,mBAAT,OAYGC,IAZH,EAYS;EAAA,IAZqB;IAC5BC,IAD4B;IAE5BC,GAF4B;IAG5BC,OAH4B;IAI5BC,aAJ4B;IAK5BC,GAL4B;IAM5BC,SAN4B;IAO5BC,UAP4B;IAQ5BC,cAR4B;IAS5BC,WAT4B;IAU5BC,cAV4B;IAW5BC;EAX4B,CAYrB;EACP,MAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAS,eAAcZ,IAAK,EAA5B,CAAZ;EAEA,MAAMa,MAAM,GAAGC,OAAO,CAACb,GAAR,CAAYc,eAAZ,IAA+BD,OAAO,CAACb,GAAR,CAAYe,UAA1D;EACA,MAAMC,MAAM,GAAGH,OAAO,CAACb,GAAR,CAAYiB,eAAZ,IACbJ,OAAO,CAACb,GAAR,CAAYkB,UADC,IAEbL,OAAO,CAACb,GAAR,CAAYmB,uBAFC,IAGbN,OAAO,CAACb,GAAR,CAAYoB,kBAHd;;EAKA,IAAI,CAACR,MAAD,IAAW,CAACI,MAAhB,EAAwB;IACtBlB,IAAI,CAAC,IAAIuB,KAAJ,CAAU,8BAAV,CAAD,CAAJ;IACA;EACD;;EAED,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,0CADQ;IAEdC,MAAM,EAAE,MAFM;IAGdC,OAAO,EAAE;MACP,cAAcb,MADP;MAEP,sBAAsBI,MAFf;MAGP,gBAAgB;IAHT,CAHK;IAQdU,QAAQ,EAAEhB,GAAG,CAACgB,QARA;IASdC,QAAQ,EAAEjB,GAAG,CAACiB,QATA;IAUdC,IAAI,EAAElB,GAAG,CAACkB;EAVI,CAAhB;EAaA,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;IAC1BF,IAAI,EAAE;MACJjC,EAAE,EAAEA,EAAE,GAAGoC,QAAL,CAAc,EAAd,CADA;MAEJC,IAAI,EAAE,wCAFF;MAGJC,UAAU,EAAE;QACVC,UAAU,EAAE,OADF;QAEVC,cAAc,EAAE;UACd,eAAe/B,UADD;UAEd,cAAcD,SAFA;UAGd,mBAAmBE,cAHL;UAId,gBAAgBC,WAJF;UAKd,mBAAmBC;QALL,CAFN;QASVP,OATU;QAUVD,GAVU;QAWVqC,cAAc,EAAEnC,aAXN;QAYVC,GAZU;QAaVM;MAbU;IAHR;EADoB,CAAf,CAAb;EAsBAf,OAAO,CAACmC,IAAD,EAAOP,OAAP,EAAgB,CAACgB,GAAD,EAAMC,GAAN,KAAc;IACnC,IAAID,GAAJ,EAAS;MACPxC,IAAI,CAACwC,GAAD,CAAJ;IACD,CAFD,MAEO;MACL,IAAI;QACF,MAAM;UACJT,IAAI,EAAE;YACJK,UAAU,EAAE;cACVM,aAAa,EAAEC,qBADL;cAEVC,cAAc,EAAEC;YAFN;UADR;QADF,IAOFb,IAAI,CAACc,KAAL,CAAWL,GAAX,CAPJ;QASAzC,IAAI,CAAC,IAAD,EAAO;UAAE2C,qBAAF;UAAyBE;QAAzB,CAAP,CAAJ;MACD,CAXD,CAWE,OAAOE,CAAP,EAAU;QACV/C,IAAI,CAAC+C,CAAD,CAAJ;MACD;IACF;EACF,CAnBM,CAAP;AAoBD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;EAAElD;AAAF,CAAjB"},"metadata":{},"sourceType":"script"}