{"ast":null,"code":"const path = require('path');\n\nconst fs = require('fs');\n\nconst ignore = require('ignore');\n\nconst {\n  getGitMetadata\n} = require('./git');\n\nconst {\n  getUserProviderGitMetadata\n} = require('./user-provided-git');\n\nconst {\n  getCIMetadata\n} = require('./ci');\n\nconst {\n  getRuntimeAndOSMetadata\n} = require('./env');\n\nconst {\n  GIT_BRANCH,\n  GIT_COMMIT_SHA,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  GIT_COMMIT_MESSAGE,\n  CI_WORKSPACE_PATH\n} = require('./tags');\n\nconst id = require('../../id');\n\nconst {\n  SPAN_TYPE,\n  RESOURCE_NAME,\n  SAMPLING_PRIORITY\n} = require('../../../../../ext/tags');\n\nconst {\n  SAMPLING_RULE_DECISION\n} = require('../../constants');\n\nconst {\n  AUTO_KEEP\n} = require('../../../../../ext/priority');\n\nconst {\n  version: ddTraceVersion\n} = require('../../../../../package.json');\n\nconst TEST_FRAMEWORK = 'test.framework';\nconst TEST_FRAMEWORK_VERSION = 'test.framework_version';\nconst TEST_TYPE = 'test.type';\nconst TEST_NAME = 'test.name';\nconst TEST_SUITE = 'test.suite';\nconst TEST_STATUS = 'test.status';\nconst TEST_PARAMETERS = 'test.parameters';\nconst TEST_SKIP_REASON = 'test.skip_reason';\nconst TEST_IS_RUM_ACTIVE = 'test.is_rum_active';\nconst TEST_CODE_OWNERS = 'test.codeowners';\nconst TEST_SOURCE_FILE = 'test.source.file';\nconst LIBRARY_VERSION = 'library_version';\nconst TEST_COMMAND = 'test.command';\nconst TEST_SESSION_ID = 'test_session_id';\nconst TEST_SUITE_ID = 'test_suite_id';\nconst ERROR_TYPE = 'error.type';\nconst ERROR_MESSAGE = 'error.msg';\nconst ERROR_STACK = 'error.stack';\nconst CI_APP_ORIGIN = 'ciapp-test';\nconst JEST_TEST_RUNNER = 'test.jest.test_runner';\nconst TEST_ITR_TESTS_SKIPPED = '_dd.ci.itr.tests_skipped';\nconst TEST_CODE_COVERAGE_LINES_TOTAL = 'test.codecov_lines_total';\nmodule.exports = {\n  TEST_CODE_OWNERS,\n  TEST_FRAMEWORK,\n  TEST_FRAMEWORK_VERSION,\n  JEST_TEST_RUNNER,\n  TEST_TYPE,\n  TEST_NAME,\n  TEST_SUITE,\n  TEST_STATUS,\n  TEST_PARAMETERS,\n  TEST_SKIP_REASON,\n  TEST_IS_RUM_ACTIVE,\n  TEST_SOURCE_FILE,\n  ERROR_TYPE,\n  ERROR_MESSAGE,\n  ERROR_STACK,\n  CI_APP_ORIGIN,\n  LIBRARY_VERSION,\n  getTestEnvironmentMetadata,\n  getTestParametersString,\n  finishAllTraceSpans,\n  getTestParentSpan,\n  getTestSuitePath,\n  getCodeOwnersFileEntries,\n  getCodeOwnersForFilename,\n  getTestCommonTags,\n  getTestSessionCommonTags,\n  getTestSuiteCommonTags,\n  TEST_COMMAND,\n  TEST_SESSION_ID,\n  TEST_SUITE_ID,\n  TEST_ITR_TESTS_SKIPPED,\n  TEST_CODE_COVERAGE_LINES_TOTAL\n};\n\nfunction getTestEnvironmentMetadata(testFramework, config) {\n  // TODO: eventually these will come from the tracer (generally available)\n  const ciMetadata = getCIMetadata();\n  const {\n    [GIT_COMMIT_SHA]: commitSHA,\n    [GIT_BRANCH]: branch,\n    [GIT_REPOSITORY_URL]: repositoryUrl,\n    [GIT_TAG]: tag,\n    [GIT_COMMIT_AUTHOR_NAME]: authorName,\n    [GIT_COMMIT_AUTHOR_EMAIL]: authorEmail,\n    [GIT_COMMIT_MESSAGE]: commitMessage,\n    [CI_WORKSPACE_PATH]: ciWorkspacePath\n  } = ciMetadata;\n  const gitMetadata = getGitMetadata({\n    commitSHA,\n    branch,\n    repositoryUrl,\n    tag,\n    authorName,\n    authorEmail,\n    commitMessage,\n    ciWorkspacePath\n  });\n  const userProvidedGitMetadata = getUserProviderGitMetadata();\n  const runtimeAndOSMetadata = getRuntimeAndOSMetadata();\n  const metadata = {\n    [TEST_FRAMEWORK]: testFramework,\n    ...gitMetadata,\n    ...ciMetadata,\n    ...userProvidedGitMetadata,\n    ...runtimeAndOSMetadata\n  };\n\n  if (config && config.service) {\n    metadata['service.name'] = config.service;\n  }\n\n  return metadata;\n}\n\nfunction getTestParametersString(parametersByTestName, testName) {\n  if (!parametersByTestName[testName]) {\n    return '';\n  }\n\n  try {\n    // test is invoked with each parameter set sequencially\n    const testParameters = parametersByTestName[testName].shift();\n    return JSON.stringify({\n      arguments: testParameters,\n      metadata: {}\n    });\n  } catch (e) {\n    // We can't afford to interrupt the test if `testParameters` is not serializable to JSON,\n    // so we ignore the test parameters and move on\n    return '';\n  }\n}\n\nfunction finishAllTraceSpans(span) {\n  span.context()._trace.started.forEach(traceSpan => {\n    if (traceSpan !== span) {\n      traceSpan.finish();\n    }\n  });\n}\n\nfunction getTestParentSpan(tracer) {\n  return tracer.extract('text_map', {\n    'x-datadog-trace-id': id().toString(10),\n    'x-datadog-parent-id': '0000000000000000'\n  });\n}\n\nfunction getTestCommonTags(name, suite, version) {\n  return {\n    [SPAN_TYPE]: 'test',\n    [TEST_TYPE]: 'test',\n    [SAMPLING_RULE_DECISION]: 1,\n    [SAMPLING_PRIORITY]: AUTO_KEEP,\n    [TEST_NAME]: name,\n    [TEST_SUITE]: suite,\n    [TEST_SOURCE_FILE]: suite,\n    [RESOURCE_NAME]: `${suite}.${name}`,\n    [TEST_FRAMEWORK_VERSION]: version,\n    [LIBRARY_VERSION]: ddTraceVersion\n  };\n}\n/**\n * We want to make sure that test suites are reported the same way for\n * every OS, so we replace `path.sep` by `/`\n */\n\n\nfunction getTestSuitePath(testSuiteAbsolutePath, sourceRoot) {\n  if (!testSuiteAbsolutePath) {\n    return sourceRoot;\n  }\n\n  const testSuitePath = testSuiteAbsolutePath === sourceRoot ? testSuiteAbsolutePath : path.relative(sourceRoot, testSuiteAbsolutePath);\n  return testSuitePath.replace(path.sep, '/');\n}\n\nconst POSSIBLE_CODEOWNERS_LOCATIONS = ['CODEOWNERS', '.github/CODEOWNERS', 'docs/CODEOWNERS', '.gitlab/CODEOWNERS'];\n\nfunction getCodeOwnersFileEntries() {\n  let rootDir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();\n  let codeOwnersContent;\n  POSSIBLE_CODEOWNERS_LOCATIONS.forEach(location => {\n    try {\n      codeOwnersContent = fs.readFileSync(`${rootDir}/${location}`).toString();\n    } catch (e) {// retry with next path\n    }\n  });\n\n  if (!codeOwnersContent) {\n    return null;\n  }\n\n  const entries = [];\n  const lines = codeOwnersContent.split('\\n');\n\n  for (const line of lines) {\n    const [content] = line.split('#');\n    const trimmed = content.trim();\n    if (trimmed === '') continue;\n    const [pattern, ...owners] = trimmed.split(/\\s+/);\n    entries.push({\n      pattern,\n      owners\n    });\n  } // Reverse because rules defined last take precedence\n\n\n  return entries.reverse();\n}\n\nfunction getCodeOwnersForFilename(filename, entries) {\n  if (!entries) {\n    return null;\n  }\n\n  for (const entry of entries) {\n    try {\n      const isResponsible = ignore().add(entry.pattern).ignores(filename);\n\n      if (isResponsible) {\n        return JSON.stringify(entry.owners);\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  return null;\n}\n\nfunction getTestSessionCommonTags(command, version) {\n  return {\n    [SPAN_TYPE]: 'test_session_end',\n    [TEST_TYPE]: 'test',\n    [RESOURCE_NAME]: `test_session.${command}`,\n    [TEST_FRAMEWORK_VERSION]: version,\n    [LIBRARY_VERSION]: ddTraceVersion,\n    [TEST_COMMAND]: command\n  };\n}\n\nfunction getTestSuiteCommonTags(command, version, testSuite) {\n  return {\n    [SPAN_TYPE]: 'test_suite_end',\n    [TEST_TYPE]: 'test',\n    [RESOURCE_NAME]: `test_suite.${testSuite}`,\n    [TEST_FRAMEWORK_VERSION]: version,\n    [LIBRARY_VERSION]: ddTraceVersion,\n    [TEST_SUITE]: testSuite,\n    [TEST_COMMAND]: command\n  };\n}","map":{"version":3,"names":["path","require","fs","ignore","getGitMetadata","getUserProviderGitMetadata","getCIMetadata","getRuntimeAndOSMetadata","GIT_BRANCH","GIT_COMMIT_SHA","GIT_REPOSITORY_URL","GIT_TAG","GIT_COMMIT_AUTHOR_EMAIL","GIT_COMMIT_AUTHOR_NAME","GIT_COMMIT_MESSAGE","CI_WORKSPACE_PATH","id","SPAN_TYPE","RESOURCE_NAME","SAMPLING_PRIORITY","SAMPLING_RULE_DECISION","AUTO_KEEP","version","ddTraceVersion","TEST_FRAMEWORK","TEST_FRAMEWORK_VERSION","TEST_TYPE","TEST_NAME","TEST_SUITE","TEST_STATUS","TEST_PARAMETERS","TEST_SKIP_REASON","TEST_IS_RUM_ACTIVE","TEST_CODE_OWNERS","TEST_SOURCE_FILE","LIBRARY_VERSION","TEST_COMMAND","TEST_SESSION_ID","TEST_SUITE_ID","ERROR_TYPE","ERROR_MESSAGE","ERROR_STACK","CI_APP_ORIGIN","JEST_TEST_RUNNER","TEST_ITR_TESTS_SKIPPED","TEST_CODE_COVERAGE_LINES_TOTAL","module","exports","getTestEnvironmentMetadata","getTestParametersString","finishAllTraceSpans","getTestParentSpan","getTestSuitePath","getCodeOwnersFileEntries","getCodeOwnersForFilename","getTestCommonTags","getTestSessionCommonTags","getTestSuiteCommonTags","testFramework","config","ciMetadata","commitSHA","branch","repositoryUrl","tag","authorName","authorEmail","commitMessage","ciWorkspacePath","gitMetadata","userProvidedGitMetadata","runtimeAndOSMetadata","metadata","service","parametersByTestName","testName","testParameters","shift","JSON","stringify","arguments","e","span","context","_trace","started","forEach","traceSpan","finish","tracer","extract","toString","name","suite","testSuiteAbsolutePath","sourceRoot","testSuitePath","relative","replace","sep","POSSIBLE_CODEOWNERS_LOCATIONS","rootDir","process","cwd","codeOwnersContent","location","readFileSync","entries","lines","split","line","content","trimmed","trim","pattern","owners","push","reverse","filename","entry","isResponsible","add","ignores","command","testSuite"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/plugins/util/test.js"],"sourcesContent":["const path = require('path')\nconst fs = require('fs')\n\nconst ignore = require('ignore')\n\nconst { getGitMetadata } = require('./git')\nconst { getUserProviderGitMetadata } = require('./user-provided-git')\nconst { getCIMetadata } = require('./ci')\nconst { getRuntimeAndOSMetadata } = require('./env')\nconst {\n  GIT_BRANCH,\n  GIT_COMMIT_SHA,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  GIT_COMMIT_MESSAGE,\n  CI_WORKSPACE_PATH\n} = require('./tags')\nconst id = require('../../id')\n\nconst { SPAN_TYPE, RESOURCE_NAME, SAMPLING_PRIORITY } = require('../../../../../ext/tags')\nconst { SAMPLING_RULE_DECISION } = require('../../constants')\nconst { AUTO_KEEP } = require('../../../../../ext/priority')\nconst { version: ddTraceVersion } = require('../../../../../package.json')\n\nconst TEST_FRAMEWORK = 'test.framework'\nconst TEST_FRAMEWORK_VERSION = 'test.framework_version'\nconst TEST_TYPE = 'test.type'\nconst TEST_NAME = 'test.name'\nconst TEST_SUITE = 'test.suite'\nconst TEST_STATUS = 'test.status'\nconst TEST_PARAMETERS = 'test.parameters'\nconst TEST_SKIP_REASON = 'test.skip_reason'\nconst TEST_IS_RUM_ACTIVE = 'test.is_rum_active'\nconst TEST_CODE_OWNERS = 'test.codeowners'\nconst TEST_SOURCE_FILE = 'test.source.file'\nconst LIBRARY_VERSION = 'library_version'\nconst TEST_COMMAND = 'test.command'\nconst TEST_SESSION_ID = 'test_session_id'\nconst TEST_SUITE_ID = 'test_suite_id'\n\nconst ERROR_TYPE = 'error.type'\nconst ERROR_MESSAGE = 'error.msg'\nconst ERROR_STACK = 'error.stack'\n\nconst CI_APP_ORIGIN = 'ciapp-test'\n\nconst JEST_TEST_RUNNER = 'test.jest.test_runner'\n\nconst TEST_ITR_TESTS_SKIPPED = '_dd.ci.itr.tests_skipped'\n\nconst TEST_CODE_COVERAGE_LINES_TOTAL = 'test.codecov_lines_total'\n\nmodule.exports = {\n  TEST_CODE_OWNERS,\n  TEST_FRAMEWORK,\n  TEST_FRAMEWORK_VERSION,\n  JEST_TEST_RUNNER,\n  TEST_TYPE,\n  TEST_NAME,\n  TEST_SUITE,\n  TEST_STATUS,\n  TEST_PARAMETERS,\n  TEST_SKIP_REASON,\n  TEST_IS_RUM_ACTIVE,\n  TEST_SOURCE_FILE,\n  ERROR_TYPE,\n  ERROR_MESSAGE,\n  ERROR_STACK,\n  CI_APP_ORIGIN,\n  LIBRARY_VERSION,\n  getTestEnvironmentMetadata,\n  getTestParametersString,\n  finishAllTraceSpans,\n  getTestParentSpan,\n  getTestSuitePath,\n  getCodeOwnersFileEntries,\n  getCodeOwnersForFilename,\n  getTestCommonTags,\n  getTestSessionCommonTags,\n  getTestSuiteCommonTags,\n  TEST_COMMAND,\n  TEST_SESSION_ID,\n  TEST_SUITE_ID,\n  TEST_ITR_TESTS_SKIPPED,\n  TEST_CODE_COVERAGE_LINES_TOTAL\n}\n\nfunction getTestEnvironmentMetadata (testFramework, config) {\n  // TODO: eventually these will come from the tracer (generally available)\n  const ciMetadata = getCIMetadata()\n  const {\n    [GIT_COMMIT_SHA]: commitSHA,\n    [GIT_BRANCH]: branch,\n    [GIT_REPOSITORY_URL]: repositoryUrl,\n    [GIT_TAG]: tag,\n    [GIT_COMMIT_AUTHOR_NAME]: authorName,\n    [GIT_COMMIT_AUTHOR_EMAIL]: authorEmail,\n    [GIT_COMMIT_MESSAGE]: commitMessage,\n    [CI_WORKSPACE_PATH]: ciWorkspacePath\n  } = ciMetadata\n\n  const gitMetadata = getGitMetadata({\n    commitSHA,\n    branch,\n    repositoryUrl,\n    tag,\n    authorName,\n    authorEmail,\n    commitMessage,\n    ciWorkspacePath\n  })\n\n  const userProvidedGitMetadata = getUserProviderGitMetadata()\n\n  const runtimeAndOSMetadata = getRuntimeAndOSMetadata()\n\n  const metadata = {\n    [TEST_FRAMEWORK]: testFramework,\n    ...gitMetadata,\n    ...ciMetadata,\n    ...userProvidedGitMetadata,\n    ...runtimeAndOSMetadata\n  }\n  if (config && config.service) {\n    metadata['service.name'] = config.service\n  }\n  return metadata\n}\n\nfunction getTestParametersString (parametersByTestName, testName) {\n  if (!parametersByTestName[testName]) {\n    return ''\n  }\n  try {\n    // test is invoked with each parameter set sequencially\n    const testParameters = parametersByTestName[testName].shift()\n    return JSON.stringify({ arguments: testParameters, metadata: {} })\n  } catch (e) {\n    // We can't afford to interrupt the test if `testParameters` is not serializable to JSON,\n    // so we ignore the test parameters and move on\n    return ''\n  }\n}\n\nfunction finishAllTraceSpans (span) {\n  span.context()._trace.started.forEach(traceSpan => {\n    if (traceSpan !== span) {\n      traceSpan.finish()\n    }\n  })\n}\n\nfunction getTestParentSpan (tracer) {\n  return tracer.extract('text_map', {\n    'x-datadog-trace-id': id().toString(10),\n    'x-datadog-parent-id': '0000000000000000'\n  })\n}\n\nfunction getTestCommonTags (name, suite, version) {\n  return {\n    [SPAN_TYPE]: 'test',\n    [TEST_TYPE]: 'test',\n    [SAMPLING_RULE_DECISION]: 1,\n    [SAMPLING_PRIORITY]: AUTO_KEEP,\n    [TEST_NAME]: name,\n    [TEST_SUITE]: suite,\n    [TEST_SOURCE_FILE]: suite,\n    [RESOURCE_NAME]: `${suite}.${name}`,\n    [TEST_FRAMEWORK_VERSION]: version,\n    [LIBRARY_VERSION]: ddTraceVersion\n  }\n}\n\n/**\n * We want to make sure that test suites are reported the same way for\n * every OS, so we replace `path.sep` by `/`\n */\nfunction getTestSuitePath (testSuiteAbsolutePath, sourceRoot) {\n  if (!testSuiteAbsolutePath) {\n    return sourceRoot\n  }\n  const testSuitePath = testSuiteAbsolutePath === sourceRoot\n    ? testSuiteAbsolutePath : path.relative(sourceRoot, testSuiteAbsolutePath)\n\n  return testSuitePath.replace(path.sep, '/')\n}\n\nconst POSSIBLE_CODEOWNERS_LOCATIONS = [\n  'CODEOWNERS',\n  '.github/CODEOWNERS',\n  'docs/CODEOWNERS',\n  '.gitlab/CODEOWNERS'\n]\n\nfunction getCodeOwnersFileEntries (rootDir = process.cwd()) {\n  let codeOwnersContent\n\n  POSSIBLE_CODEOWNERS_LOCATIONS.forEach(location => {\n    try {\n      codeOwnersContent = fs.readFileSync(`${rootDir}/${location}`).toString()\n    } catch (e) {\n      // retry with next path\n    }\n  })\n  if (!codeOwnersContent) {\n    return null\n  }\n\n  const entries = []\n  const lines = codeOwnersContent.split('\\n')\n\n  for (const line of lines) {\n    const [content] = line.split('#')\n    const trimmed = content.trim()\n    if (trimmed === '') continue\n    const [pattern, ...owners] = trimmed.split(/\\s+/)\n    entries.push({ pattern, owners })\n  }\n  // Reverse because rules defined last take precedence\n  return entries.reverse()\n}\n\nfunction getCodeOwnersForFilename (filename, entries) {\n  if (!entries) {\n    return null\n  }\n  for (const entry of entries) {\n    try {\n      const isResponsible = ignore().add(entry.pattern).ignores(filename)\n      if (isResponsible) {\n        return JSON.stringify(entry.owners)\n      }\n    } catch (e) {\n      return null\n    }\n  }\n  return null\n}\n\nfunction getTestSessionCommonTags (command, version) {\n  return {\n    [SPAN_TYPE]: 'test_session_end',\n    [TEST_TYPE]: 'test',\n    [RESOURCE_NAME]: `test_session.${command}`,\n    [TEST_FRAMEWORK_VERSION]: version,\n    [LIBRARY_VERSION]: ddTraceVersion,\n    [TEST_COMMAND]: command\n  }\n}\n\nfunction getTestSuiteCommonTags (command, version, testSuite) {\n  return {\n    [SPAN_TYPE]: 'test_suite_end',\n    [TEST_TYPE]: 'test',\n    [RESOURCE_NAME]: `test_suite.${testSuite}`,\n    [TEST_FRAMEWORK_VERSION]: version,\n    [LIBRARY_VERSION]: ddTraceVersion,\n    [TEST_SUITE]: testSuite,\n    [TEST_COMMAND]: command\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}