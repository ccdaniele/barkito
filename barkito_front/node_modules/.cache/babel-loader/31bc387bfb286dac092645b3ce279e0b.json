{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.start = exports.profile = void 0;\n\nconst delay_1 = require(\"delay\");\n\nconst profile_serializer_1 = require(\"./profile-serializer\");\n\nconst time_profiler_bindings_1 = require(\"./time-profiler-bindings\");\n\nconst DEFAULT_INTERVAL_MICROS = 1000;\nconst majorVersion = process.version.slice(1).split('.').map(Number)[0];\n\nasync function profile(options) {\n  const stop = start(options.intervalMicros || DEFAULT_INTERVAL_MICROS, options.name, options.sourceMapper, options.lineNumbers);\n  await (0, delay_1.default)(options.durationMillis);\n  return stop();\n}\n\nexports.profile = profile;\n\nfunction ensureRunName(name) {\n  return name || `pprof-${Date.now()}-${Math.random()}`;\n} // NOTE: refreshing doesn't work if giving a profile name.\n\n\nfunction start() {\n  let intervalMicros = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_INTERVAL_MICROS;\n  let name = arguments.length > 1 ? arguments[1] : undefined;\n  let sourceMapper = arguments.length > 2 ? arguments[2] : undefined;\n  let lineNumbers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const profiler = new time_profiler_bindings_1.TimeProfiler(intervalMicros);\n  let runName = start();\n  return majorVersion < 16 ? stopOld : stop;\n\n  function start() {\n    const runName = ensureRunName(name);\n    profiler.start(runName, lineNumbers);\n    return runName;\n  } // Node.js versions prior to v16 leak memory if not disposed and recreated\n  // between each profile. As disposing deletes current profile data too,\n  // we must stop then dispose then start.\n\n\n  function stopOld() {\n    let restart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const result = profiler.stop(runName, lineNumbers);\n    profiler.dispose();\n\n    if (restart) {\n      runName = start();\n    }\n\n    return (0, profile_serializer_1.serializeTimeProfile)(result, intervalMicros, sourceMapper);\n  } // For Node.js v16+, we want to start the next profile before we stop the\n  // current one as otherwise the active profile count could reach zero which\n  // means V8 might tear down the symbolizer thread and need to start it again.\n\n\n  function stop() {\n    let restart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let nextRunName;\n\n    if (restart) {\n      nextRunName = start();\n    }\n\n    const result = profiler.stop(runName, lineNumbers);\n\n    if (nextRunName) {\n      runName = nextRunName;\n    }\n\n    if (!restart) profiler.dispose();\n    return (0, profile_serializer_1.serializeTimeProfile)(result, intervalMicros, sourceMapper);\n  }\n}\n\nexports.start = start;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAEA;;AAEA;;AAEA,MAAMA,uBAAuB,GAAiB,IAA9C;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAACC,OAAR,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyBC,KAAzB,CAA+B,GAA/B,EAAoCC,GAApC,CAAwCC,MAAxC,EAAgD,CAAhD,CAArB;;AAsBO,eAAeC,OAAf,CAAuBC,OAAvB,EAAmD;EACxD,MAAMC,IAAI,GAAGC,KAAK,CAChBF,OAAO,CAACG,cAAR,IAA0BZ,uBADV,EAEhBS,OAAO,CAACI,IAFQ,EAGhBJ,OAAO,CAACK,YAHQ,EAIhBL,OAAO,CAACM,WAJQ,CAAlB;EAMA,MAAM,qBAAMN,OAAO,CAACO,cAAd,CAAN;EACA,OAAON,IAAI,EAAX;AACD;;AATDO;;AAWA,SAASC,aAAT,CAAuBL,IAAvB,EAAoC;EAClC,OAAOA,IAAI,IAAI,SAASM,IAAI,CAACC,GAAL,EAAU,IAAIC,IAAI,CAACC,MAAL,EAAa,EAAnD;AACD,C,CAED;;;AACA,SAAgBX,KAAhB,GAIoB;EAAA,IAHlBC,cAGkB,uEAHaZ,uBAGb;EAAA,IAFlBa,IAEkB;EAAA,IADlBC,YACkB;EAAA,IAAlBC,WAAkB,uEAAJ,IAAI;EAElB,MAAMQ,QAAQ,GAAG,IAAIC,qCAAJ,CAAiBZ,cAAjB,CAAjB;EACA,IAAIa,OAAO,GAAGd,KAAK,EAAnB;EACA,OAAOV,YAAY,GAAG,EAAf,GAAoByB,OAApB,GAA8BhB,IAArC;;EAEA,SAASC,KAAT,GAAc;IACZ,MAAMc,OAAO,GAAGP,aAAa,CAACL,IAAD,CAA7B;IACAU,QAAQ,CAACZ,KAAT,CAAec,OAAf,EAAwBV,WAAxB;IACA,OAAOU,OAAP;EACD,CAViB,CAYlB;EACA;EACA;;;EACA,SAASC,OAAT,GAAgC;IAAA,IAAfC,OAAe,uEAAL,KAAK;IAC9B,MAAMC,MAAM,GAAGL,QAAQ,CAACb,IAAT,CAAce,OAAd,EAAuBV,WAAvB,CAAf;IACAQ,QAAQ,CAACM,OAAT;;IACA,IAAIF,OAAJ,EAAa;MACXF,OAAO,GAAGd,KAAK,EAAf;IACD;;IACD,OAAO,+CAAqBiB,MAArB,EAA6BhB,cAA7B,EAA6CE,YAA7C,CAAP;EACD,CAtBiB,CAwBlB;EACA;EACA;;;EACA,SAASJ,IAAT,GAA6B;IAAA,IAAfiB,OAAe,uEAAL,KAAK;IAC3B,IAAIG,WAAJ;;IACA,IAAIH,OAAJ,EAAa;MACXG,WAAW,GAAGnB,KAAK,EAAnB;IACD;;IACD,MAAMiB,MAAM,GAAGL,QAAQ,CAACb,IAAT,CAAce,OAAd,EAAuBV,WAAvB,CAAf;;IACA,IAAIe,WAAJ,EAAiB;MACfL,OAAO,GAAGK,WAAV;IACD;;IACD,IAAI,CAACH,OAAL,EAAcJ,QAAQ,CAACM,OAAT;IACd,OAAO,+CAAqBD,MAArB,EAA6BhB,cAA7B,EAA6CE,YAA7C,CAAP;EACD;AACF;;AA3CDG","names":["DEFAULT_INTERVAL_MICROS","majorVersion","process","version","slice","split","map","Number","profile","options","stop","start","intervalMicros","name","sourceMapper","lineNumbers","durationMillis","exports","ensureRunName","Date","now","Math","random","profiler","time_profiler_bindings_1","runName","stopOld","restart","result","dispose","nextRunName"],"sources":["../../ts/src/time-profiler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}