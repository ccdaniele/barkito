{"ast":null,"code":"'use strict';\n\nconst id = require('../../id');\n\nconst DatadogSpanContext = require('../span_context');\n\nclass LogPropagator {\n  constructor(config) {\n    this._config = config;\n  }\n\n  inject(spanContext, carrier) {\n    if (!carrier) return;\n    carrier.dd = {};\n\n    if (spanContext) {\n      carrier.dd.trace_id = spanContext.toTraceId();\n      carrier.dd.span_id = spanContext.toSpanId();\n    }\n\n    if (this._config.service) carrier.dd.service = this._config.service;\n    if (this._config.version) carrier.dd.version = this._config.version;\n    if (this._config.env) carrier.dd.env = this._config.env;\n  }\n\n  extract(carrier) {\n    if (!carrier || !carrier.dd || !carrier.dd.trace_id || !carrier.dd.span_id) {\n      return null;\n    }\n\n    const spanContext = new DatadogSpanContext({\n      traceId: id(carrier.dd.trace_id, 10),\n      spanId: id(carrier.dd.span_id, 10)\n    });\n    return spanContext;\n  }\n\n}\n\nmodule.exports = LogPropagator;","map":{"version":3,"names":["id","require","DatadogSpanContext","LogPropagator","constructor","config","_config","inject","spanContext","carrier","dd","trace_id","toTraceId","span_id","toSpanId","service","version","env","extract","traceId","spanId","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/opentracing/propagation/log.js"],"sourcesContent":["'use strict'\n\nconst id = require('../../id')\nconst DatadogSpanContext = require('../span_context')\n\nclass LogPropagator {\n  constructor (config) {\n    this._config = config\n  }\n\n  inject (spanContext, carrier) {\n    if (!carrier) return\n\n    carrier.dd = {}\n\n    if (spanContext) {\n      carrier.dd.trace_id = spanContext.toTraceId()\n      carrier.dd.span_id = spanContext.toSpanId()\n    }\n\n    if (this._config.service) carrier.dd.service = this._config.service\n    if (this._config.version) carrier.dd.version = this._config.version\n    if (this._config.env) carrier.dd.env = this._config.env\n  }\n\n  extract (carrier) {\n    if (!carrier || !carrier.dd || !carrier.dd.trace_id || !carrier.dd.span_id) {\n      return null\n    }\n\n    const spanContext = new DatadogSpanContext({\n      traceId: id(carrier.dd.trace_id, 10),\n      spanId: id(carrier.dd.span_id, 10)\n    })\n\n    return spanContext\n  }\n}\n\nmodule.exports = LogPropagator\n"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,iBAAD,CAAlC;;AAEA,MAAME,aAAN,CAAoB;EAClBC,WAAW,CAAEC,MAAF,EAAU;IACnB,KAAKC,OAAL,GAAeD,MAAf;EACD;;EAEDE,MAAM,CAAEC,WAAF,EAAeC,OAAf,EAAwB;IAC5B,IAAI,CAACA,OAAL,EAAc;IAEdA,OAAO,CAACC,EAAR,GAAa,EAAb;;IAEA,IAAIF,WAAJ,EAAiB;MACfC,OAAO,CAACC,EAAR,CAAWC,QAAX,GAAsBH,WAAW,CAACI,SAAZ,EAAtB;MACAH,OAAO,CAACC,EAAR,CAAWG,OAAX,GAAqBL,WAAW,CAACM,QAAZ,EAArB;IACD;;IAED,IAAI,KAAKR,OAAL,CAAaS,OAAjB,EAA0BN,OAAO,CAACC,EAAR,CAAWK,OAAX,GAAqB,KAAKT,OAAL,CAAaS,OAAlC;IAC1B,IAAI,KAAKT,OAAL,CAAaU,OAAjB,EAA0BP,OAAO,CAACC,EAAR,CAAWM,OAAX,GAAqB,KAAKV,OAAL,CAAaU,OAAlC;IAC1B,IAAI,KAAKV,OAAL,CAAaW,GAAjB,EAAsBR,OAAO,CAACC,EAAR,CAAWO,GAAX,GAAiB,KAAKX,OAAL,CAAaW,GAA9B;EACvB;;EAEDC,OAAO,CAAET,OAAF,EAAW;IAChB,IAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,EAArB,IAA2B,CAACD,OAAO,CAACC,EAAR,CAAWC,QAAvC,IAAmD,CAACF,OAAO,CAACC,EAAR,CAAWG,OAAnE,EAA4E;MAC1E,OAAO,IAAP;IACD;;IAED,MAAML,WAAW,GAAG,IAAIN,kBAAJ,CAAuB;MACzCiB,OAAO,EAAEnB,EAAE,CAACS,OAAO,CAACC,EAAR,CAAWC,QAAZ,EAAsB,EAAtB,CAD8B;MAEzCS,MAAM,EAAEpB,EAAE,CAACS,OAAO,CAACC,EAAR,CAAWG,OAAZ,EAAqB,EAArB;IAF+B,CAAvB,CAApB;IAKA,OAAOL,WAAP;EACD;;AA/BiB;;AAkCpBa,MAAM,CAACC,OAAP,GAAiBnB,aAAjB"},"metadata":{},"sourceType":"script"}