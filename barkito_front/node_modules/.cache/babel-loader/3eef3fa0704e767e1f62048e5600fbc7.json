{"ast":null,"code":"'use strict';\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin');\n\nconst {\n  storage\n} = require('../../datadog-core');\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nconst collapsedPathSym = Symbol('collapsedPaths');\n\nclass GraphQLResolvePlugin extends Plugin {\n  static get name() {\n    return 'graphql';\n  }\n\n  constructor() {\n    super(...arguments);\n    this.addSub('apm:graphql:resolve:start', _ref => {\n      let {\n        info,\n        context\n      } = _ref;\n      const store = storage.getStore();\n      depthPredicate(info, this.config, computedPath => {\n        const computedPathString = computedPath.join('.');\n\n        if (!this.config.collapse && !context.fields[computedPathString] || !context[collapsedPathSym] || !context[collapsedPathSym][computedPathString]) {\n          // cache the collapsed string here\n          if (this.config.collapse) {\n            if (!context[collapsedPathSym]) context[collapsedPathSym] = {};\n            context[collapsedPathSym][computedPathString] = true;\n          }\n\n          const service = this.config.service || this.tracer._service;\n          const childOf = store ? store.span : store;\n          const span = this.tracer.startSpan(`graphql.resolve`, {\n            childOf: childOf,\n            tags: {\n              'service.name': service,\n              'span.type': 'graphql'\n            }\n          });\n          const document = context.source;\n          const fieldNode = info.fieldNodes.find(fieldNode => fieldNode.kind === 'Field');\n          analyticsSampler.sample(span, this.config.measured);\n          span.addTags({\n            'resource.name': `${info.fieldName}:${info.returnType}`,\n            'graphql.field.name': info.fieldName,\n            'graphql.field.path': computedPathString,\n            'graphql.field.type': info.returnType.name\n          });\n\n          if (fieldNode) {\n            if (this.config.source && document && fieldNode.loc) {\n              span.setTag('graphql.source', document.substring(fieldNode.loc.start, fieldNode.loc.end));\n            }\n\n            if (this.config.variables && fieldNode.arguments) {\n              const variables = this.config.variables(info.variableValues);\n              fieldNode.arguments.filter(arg => arg.value && arg.value.kind === 'Variable').filter(arg => arg.value.name && variables[arg.value.name.value]).map(arg => arg.value.name.value).forEach(name => {\n                span.setTag(`graphql.variables.${name}`, variables[name]);\n              });\n            }\n          }\n\n          this.enter(span, store);\n        }\n      });\n    });\n    this.addSub('apm:graphql:resolve:updateField', _ref2 => {\n      let {\n        field,\n        info,\n        err\n      } = _ref2;\n      depthPredicate(info, this.config, () => {\n        const span = storage.getStore().span;\n        field.finishTime = span._getTime ? span._getTime() : 0;\n        field.error = field.error || err;\n      });\n    });\n    this.addSub('apm:graphql:resolve:error', this.addError);\n    this.addSub('apm:graphql:resolve:finish', finishTime => {\n      const span = storage.getStore().span;\n      span.finish(finishTime);\n    });\n  }\n\n} // helpers\n\n\nfunction depthPredicate(info, config, func) {\n  func = func || (() => {});\n\n  const path = getPath(info, config);\n  const depth = path.filter(item => typeof item === 'string').length;\n  if (config.depth < 0 || config.depth >= depth) func(path);\n}\n\nfunction getPath(info, config) {\n  const responsePathAsArray = config.collapse ? withCollapse(pathToArray) : pathToArray;\n  return responsePathAsArray(info && info.path);\n}\n\nfunction pathToArray(path) {\n  const flattened = [];\n  let curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n\nfunction withCollapse(responsePathAsArray) {\n  return function () {\n    return responsePathAsArray.apply(this, arguments).map(segment => typeof segment === 'number' ? '*' : segment);\n  };\n}\n\nmodule.exports = GraphQLResolvePlugin;","map":{"version":3,"names":["Plugin","require","storage","analyticsSampler","collapsedPathSym","Symbol","GraphQLResolvePlugin","name","constructor","addSub","info","context","store","getStore","depthPredicate","config","computedPath","computedPathString","join","collapse","fields","service","tracer","_service","childOf","span","startSpan","tags","document","source","fieldNode","fieldNodes","find","kind","sample","measured","addTags","fieldName","returnType","loc","setTag","substring","start","end","variables","arguments","variableValues","filter","arg","value","map","forEach","enter","field","err","finishTime","_getTime","error","addError","finish","func","path","getPath","depth","item","length","responsePathAsArray","withCollapse","pathToArray","flattened","curr","push","key","prev","reverse","apply","segment","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-graphql/src/resolve.js"],"sourcesContent":["'use strict'\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin')\nconst { storage } = require('../../datadog-core')\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\n\nconst collapsedPathSym = Symbol('collapsedPaths')\n\nclass GraphQLResolvePlugin extends Plugin {\n  static get name () {\n    return 'graphql'\n  }\n\n  constructor (...args) {\n    super(...args)\n\n    this.addSub('apm:graphql:resolve:start', ({ info, context }) => {\n      const store = storage.getStore()\n      depthPredicate(info, this.config, (computedPath) => {\n        const computedPathString = computedPath.join('.')\n        if ((!this.config.collapse && !context.fields[computedPathString]) ||\n             (!context[collapsedPathSym] || !context[collapsedPathSym][computedPathString])) {\n          // cache the collapsed string here\n          if (this.config.collapse) {\n            if (!context[collapsedPathSym]) context[collapsedPathSym] = {}\n            context[collapsedPathSym][computedPathString] = true\n          }\n\n          const service = this.config.service || this.tracer._service\n          const childOf = store ? store.span : store\n          const span = this.tracer.startSpan(`graphql.resolve`, {\n            childOf: childOf,\n            tags: {\n              'service.name': service,\n              'span.type': 'graphql'\n            }\n          })\n          const document = context.source\n          const fieldNode = info.fieldNodes.find(fieldNode => fieldNode.kind === 'Field')\n\n          analyticsSampler.sample(span, this.config.measured)\n\n          span.addTags({\n            'resource.name': `${info.fieldName}:${info.returnType}`,\n            'graphql.field.name': info.fieldName,\n            'graphql.field.path': computedPathString,\n            'graphql.field.type': info.returnType.name\n          })\n\n          if (fieldNode) {\n            if (this.config.source && document && fieldNode.loc) {\n              span.setTag('graphql.source', document.substring(fieldNode.loc.start, fieldNode.loc.end))\n            }\n\n            if (this.config.variables && fieldNode.arguments) {\n              const variables = this.config.variables(info.variableValues)\n\n              fieldNode.arguments\n                .filter(arg => arg.value && arg.value.kind === 'Variable')\n                .filter(arg => arg.value.name && variables[arg.value.name.value])\n                .map(arg => arg.value.name.value)\n                .forEach(name => {\n                  span.setTag(`graphql.variables.${name}`, variables[name])\n                })\n            }\n          }\n          this.enter(span, store)\n        }\n      })\n    })\n\n    this.addSub('apm:graphql:resolve:updateField', ({ field, info, err }) => {\n      depthPredicate(info, this.config, () => {\n        const span = storage.getStore().span\n        field.finishTime = span._getTime ? span._getTime() : 0\n        field.error = field.error || err\n      })\n    })\n\n    this.addSub('apm:graphql:resolve:error', this.addError)\n\n    this.addSub('apm:graphql:resolve:finish', finishTime => {\n      const span = storage.getStore().span\n      span.finish(finishTime)\n    })\n  }\n}\n\n// helpers\n\nfunction depthPredicate (info, config, func) {\n  func = func || (() => {})\n  const path = getPath(info, config)\n  const depth = path.filter(item => typeof item === 'string').length\n  if (config.depth < 0 || config.depth >= depth) func(path)\n}\n\nfunction getPath (info, config) {\n  const responsePathAsArray = config.collapse\n    ? withCollapse(pathToArray)\n    : pathToArray\n  return responsePathAsArray(info && info.path)\n}\n\nfunction pathToArray (path) {\n  const flattened = []\n  let curr = path\n  while (curr) {\n    flattened.push(curr.key)\n    curr = curr.prev\n  }\n  return flattened.reverse()\n}\n\nfunction withCollapse (responsePathAsArray) {\n  return function () {\n    return responsePathAsArray.apply(this, arguments)\n      .map(segment => typeof segment === 'number' ? '*' : segment)\n  }\n}\n\nmodule.exports = GraphQLResolvePlugin\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,mCAAD,CAAtB;;AACA,MAAM;EAAEC;AAAF,IAAcD,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,sCAAD,CAAhC;;AAEA,MAAMG,gBAAgB,GAAGC,MAAM,CAAC,gBAAD,CAA/B;;AAEA,MAAMC,oBAAN,SAAmCN,MAAnC,CAA0C;EACzB,WAAJO,IAAI,GAAI;IACjB,OAAO,SAAP;EACD;;EAEDC,WAAW,GAAW;IACpB,MAAM,YAAN;IAEA,KAAKC,MAAL,CAAY,2BAAZ,EAAyC,QAAuB;MAAA,IAAtB;QAAEC,IAAF;QAAQC;MAAR,CAAsB;MAC9D,MAAMC,KAAK,GAAGV,OAAO,CAACW,QAAR,EAAd;MACAC,cAAc,CAACJ,IAAD,EAAO,KAAKK,MAAZ,EAAqBC,YAAD,IAAkB;QAClD,MAAMC,kBAAkB,GAAGD,YAAY,CAACE,IAAb,CAAkB,GAAlB,CAA3B;;QACA,IAAK,CAAC,KAAKH,MAAL,CAAYI,QAAb,IAAyB,CAACR,OAAO,CAACS,MAAR,CAAeH,kBAAf,CAA3B,IACE,CAACN,OAAO,CAACP,gBAAD,CAAR,IAA8B,CAACO,OAAO,CAACP,gBAAD,CAAP,CAA0Ba,kBAA1B,CADrC,EACqF;UACnF;UACA,IAAI,KAAKF,MAAL,CAAYI,QAAhB,EAA0B;YACxB,IAAI,CAACR,OAAO,CAACP,gBAAD,CAAZ,EAAgCO,OAAO,CAACP,gBAAD,CAAP,GAA4B,EAA5B;YAChCO,OAAO,CAACP,gBAAD,CAAP,CAA0Ba,kBAA1B,IAAgD,IAAhD;UACD;;UAED,MAAMI,OAAO,GAAG,KAAKN,MAAL,CAAYM,OAAZ,IAAuB,KAAKC,MAAL,CAAYC,QAAnD;UACA,MAAMC,OAAO,GAAGZ,KAAK,GAAGA,KAAK,CAACa,IAAT,GAAgBb,KAArC;UACA,MAAMa,IAAI,GAAG,KAAKH,MAAL,CAAYI,SAAZ,CAAuB,iBAAvB,EAAyC;YACpDF,OAAO,EAAEA,OAD2C;YAEpDG,IAAI,EAAE;cACJ,gBAAgBN,OADZ;cAEJ,aAAa;YAFT;UAF8C,CAAzC,CAAb;UAOA,MAAMO,QAAQ,GAAGjB,OAAO,CAACkB,MAAzB;UACA,MAAMC,SAAS,GAAGpB,IAAI,CAACqB,UAAL,CAAgBC,IAAhB,CAAqBF,SAAS,IAAIA,SAAS,CAACG,IAAV,KAAmB,OAArD,CAAlB;UAEA9B,gBAAgB,CAAC+B,MAAjB,CAAwBT,IAAxB,EAA8B,KAAKV,MAAL,CAAYoB,QAA1C;UAEAV,IAAI,CAACW,OAAL,CAAa;YACX,iBAAkB,GAAE1B,IAAI,CAAC2B,SAAU,IAAG3B,IAAI,CAAC4B,UAAW,EAD3C;YAEX,sBAAsB5B,IAAI,CAAC2B,SAFhB;YAGX,sBAAsBpB,kBAHX;YAIX,sBAAsBP,IAAI,CAAC4B,UAAL,CAAgB/B;UAJ3B,CAAb;;UAOA,IAAIuB,SAAJ,EAAe;YACb,IAAI,KAAKf,MAAL,CAAYc,MAAZ,IAAsBD,QAAtB,IAAkCE,SAAS,CAACS,GAAhD,EAAqD;cACnDd,IAAI,CAACe,MAAL,CAAY,gBAAZ,EAA8BZ,QAAQ,CAACa,SAAT,CAAmBX,SAAS,CAACS,GAAV,CAAcG,KAAjC,EAAwCZ,SAAS,CAACS,GAAV,CAAcI,GAAtD,CAA9B;YACD;;YAED,IAAI,KAAK5B,MAAL,CAAY6B,SAAZ,IAAyBd,SAAS,CAACe,SAAvC,EAAkD;cAChD,MAAMD,SAAS,GAAG,KAAK7B,MAAL,CAAY6B,SAAZ,CAAsBlC,IAAI,CAACoC,cAA3B,CAAlB;cAEAhB,SAAS,CAACe,SAAV,CACGE,MADH,CACUC,GAAG,IAAIA,GAAG,CAACC,KAAJ,IAAaD,GAAG,CAACC,KAAJ,CAAUhB,IAAV,KAAmB,UADjD,EAEGc,MAFH,CAEUC,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAU1C,IAAV,IAAkBqC,SAAS,CAACI,GAAG,CAACC,KAAJ,CAAU1C,IAAV,CAAe0C,KAAhB,CAF5C,EAGGC,GAHH,CAGOF,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAU1C,IAAV,CAAe0C,KAH7B,EAIGE,OAJH,CAIW5C,IAAI,IAAI;gBACfkB,IAAI,CAACe,MAAL,CAAa,qBAAoBjC,IAAK,EAAtC,EAAyCqC,SAAS,CAACrC,IAAD,CAAlD;cACD,CANH;YAOD;UACF;;UACD,KAAK6C,KAAL,CAAW3B,IAAX,EAAiBb,KAAjB;QACD;MACF,CAlDa,CAAd;IAmDD,CArDD;IAuDA,KAAKH,MAAL,CAAY,iCAAZ,EAA+C,SAA0B;MAAA,IAAzB;QAAE4C,KAAF;QAAS3C,IAAT;QAAe4C;MAAf,CAAyB;MACvExC,cAAc,CAACJ,IAAD,EAAO,KAAKK,MAAZ,EAAoB,MAAM;QACtC,MAAMU,IAAI,GAAGvB,OAAO,CAACW,QAAR,GAAmBY,IAAhC;QACA4B,KAAK,CAACE,UAAN,GAAmB9B,IAAI,CAAC+B,QAAL,GAAgB/B,IAAI,CAAC+B,QAAL,EAAhB,GAAkC,CAArD;QACAH,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACI,KAAN,IAAeH,GAA7B;MACD,CAJa,CAAd;IAKD,CAND;IAQA,KAAK7C,MAAL,CAAY,2BAAZ,EAAyC,KAAKiD,QAA9C;IAEA,KAAKjD,MAAL,CAAY,4BAAZ,EAA0C8C,UAAU,IAAI;MACtD,MAAM9B,IAAI,GAAGvB,OAAO,CAACW,QAAR,GAAmBY,IAAhC;MACAA,IAAI,CAACkC,MAAL,CAAYJ,UAAZ;IACD,CAHD;EAID;;AA7EuC,C,CAgF1C;;;AAEA,SAASzC,cAAT,CAAyBJ,IAAzB,EAA+BK,MAA/B,EAAuC6C,IAAvC,EAA6C;EAC3CA,IAAI,GAAGA,IAAI,KAAK,MAAM,CAAE,CAAb,CAAX;;EACA,MAAMC,IAAI,GAAGC,OAAO,CAACpD,IAAD,EAAOK,MAAP,CAApB;EACA,MAAMgD,KAAK,GAAGF,IAAI,CAACd,MAAL,CAAYiB,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAApC,EAA8CC,MAA5D;EACA,IAAIlD,MAAM,CAACgD,KAAP,GAAe,CAAf,IAAoBhD,MAAM,CAACgD,KAAP,IAAgBA,KAAxC,EAA+CH,IAAI,CAACC,IAAD,CAAJ;AAChD;;AAED,SAASC,OAAT,CAAkBpD,IAAlB,EAAwBK,MAAxB,EAAgC;EAC9B,MAAMmD,mBAAmB,GAAGnD,MAAM,CAACI,QAAP,GACxBgD,YAAY,CAACC,WAAD,CADY,GAExBA,WAFJ;EAGA,OAAOF,mBAAmB,CAACxD,IAAI,IAAIA,IAAI,CAACmD,IAAd,CAA1B;AACD;;AAED,SAASO,WAAT,CAAsBP,IAAtB,EAA4B;EAC1B,MAAMQ,SAAS,GAAG,EAAlB;EACA,IAAIC,IAAI,GAAGT,IAAX;;EACA,OAAOS,IAAP,EAAa;IACXD,SAAS,CAACE,IAAV,CAAeD,IAAI,CAACE,GAApB;IACAF,IAAI,GAAGA,IAAI,CAACG,IAAZ;EACD;;EACD,OAAOJ,SAAS,CAACK,OAAV,EAAP;AACD;;AAED,SAASP,YAAT,CAAuBD,mBAAvB,EAA4C;EAC1C,OAAO,YAAY;IACjB,OAAOA,mBAAmB,CAACS,KAApB,CAA0B,IAA1B,EAAgC9B,SAAhC,EACJK,GADI,CACA0B,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAAnB,GAA8B,GAA9B,GAAoCA,OAD/C,CAAP;EAED,CAHD;AAID;;AAEDC,MAAM,CAACC,OAAP,GAAiBxE,oBAAjB"},"metadata":{},"sourceType":"script"}