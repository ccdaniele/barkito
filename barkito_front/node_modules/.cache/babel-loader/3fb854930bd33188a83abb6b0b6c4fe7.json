{"ast":null,"code":"'use strict';\n\nconst coalesce = require('koalas');\n\nconst os = require('os');\n\nconst {\n  URL\n} = require('url');\n\nconst {\n  AgentExporter\n} = require('./exporters/agent');\n\nconst {\n  FileExporter\n} = require('./exporters/file');\n\nconst {\n  ConsoleLogger\n} = require('./loggers/console');\n\nconst CpuProfiler = require('./profilers/cpu');\n\nconst WallProfiler = require('./profilers/wall');\n\nconst SpaceProfiler = require('./profilers/space');\n\nconst {\n  tagger\n} = require('./tagger');\n\nconst {\n  DD_PROFILING_ENABLED,\n  DD_PROFILING_PROFILERS,\n  DD_PROFILING_ENDPOINT_COLLECTION_ENABLED,\n  DD_ENV,\n  DD_TAGS,\n  DD_SERVICE,\n  DD_VERSION,\n  DD_TRACE_AGENT_URL,\n  DD_AGENT_HOST,\n  DD_TRACE_AGENT_PORT,\n  DD_PROFILING_UPLOAD_TIMEOUT,\n  DD_PROFILING_SOURCE_MAP\n} = process.env;\n\nclass Config {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const enabled = coalesce(options.enabled, DD_PROFILING_ENABLED, true);\n    const env = coalesce(options.env, DD_ENV);\n    const service = options.service || DD_SERVICE || 'node';\n    const host = os.hostname();\n    const version = coalesce(options.version, DD_VERSION); // Must be longer than one minute so pad with five seconds\n\n    const flushInterval = coalesce(options.interval, 65 * 1000);\n    const uploadTimeout = coalesce(options.uploadTimeout, DD_PROFILING_UPLOAD_TIMEOUT, 60 * 1000);\n    const sourceMap = coalesce(options.sourceMap, DD_PROFILING_SOURCE_MAP, true);\n    const endpointCollection = coalesce(options.endpointCollection, DD_PROFILING_ENDPOINT_COLLECTION_ENABLED, false);\n    this.enabled = String(enabled) !== 'false';\n    this.service = service;\n    this.env = env;\n    this.host = host;\n    this.version = version;\n    this.tags = Object.assign(tagger.parse(DD_TAGS), tagger.parse(options.tags), tagger.parse({\n      env,\n      host,\n      service,\n      version\n    }));\n    this.logger = ensureLogger(options.logger);\n    this.flushInterval = flushInterval;\n    this.uploadTimeout = uploadTimeout;\n    this.sourceMap = sourceMap;\n    this.endpointCollection = endpointCollection;\n    const hostname = coalesce(options.hostname, DD_AGENT_HOST, 'localhost');\n    const port = coalesce(options.port, DD_TRACE_AGENT_PORT, 8126);\n    this.url = new URL(coalesce(options.url, DD_TRACE_AGENT_URL, `http://${hostname || 'localhost'}:${port || 8126}`));\n    this.exporters = ensureExporters(options.exporters || [new AgentExporter(this)], this);\n    const profilers = coalesce(options.profilers, DD_PROFILING_PROFILERS, [new WallProfiler(this), new SpaceProfiler(this)]);\n    this.profilers = ensureProfilers(profilers, this);\n  }\n\n}\n\nmodule.exports = {\n  Config\n};\n\nfunction getExporter(name, options) {\n  switch (name) {\n    case 'agent':\n      return new AgentExporter(options);\n\n    case 'file':\n      return new FileExporter(options);\n  }\n}\n\nfunction ensureExporters(exporters, options) {\n  if (typeof exporters === 'string') {\n    exporters = exporters.split(',');\n  }\n\n  for (let i = 0; i < exporters.length; i++) {\n    const exporter = exporters[i];\n\n    if (typeof exporter === 'string') {\n      exporters[i] = getExporter(exporter, options);\n    }\n  }\n\n  return exporters;\n}\n\nfunction getProfiler(name, options) {\n  switch (name) {\n    case 'cpu':\n    case 'wall':\n      return new WallProfiler(options);\n\n    case 'space':\n      return new SpaceProfiler(options);\n\n    case 'cpu-experimental':\n      return new CpuProfiler(options);\n\n    default:\n      options.logger.error(`Unknown profiler \"${name}\"`);\n  }\n}\n\nfunction ensureProfilers(profilers, options) {\n  if (typeof profilers === 'string') {\n    profilers = profilers.split(',');\n  }\n\n  for (let i = 0; i < profilers.length; i++) {\n    const profiler = profilers[i];\n\n    if (typeof profiler === 'string') {\n      profilers[i] = getProfiler(profiler, options);\n    }\n  } // Filter out any invalid profilers\n\n\n  return profilers.filter(v => v);\n}\n\nfunction ensureLogger(logger) {\n  if (typeof logger !== 'object' || typeof logger.debug !== 'function' || typeof logger.info !== 'function' || typeof logger.warn !== 'function' || typeof logger.error !== 'function') {\n    return new ConsoleLogger();\n  }\n\n  return logger;\n}","map":{"version":3,"names":["coalesce","require","os","URL","AgentExporter","FileExporter","ConsoleLogger","CpuProfiler","WallProfiler","SpaceProfiler","tagger","DD_PROFILING_ENABLED","DD_PROFILING_PROFILERS","DD_PROFILING_ENDPOINT_COLLECTION_ENABLED","DD_ENV","DD_TAGS","DD_SERVICE","DD_VERSION","DD_TRACE_AGENT_URL","DD_AGENT_HOST","DD_TRACE_AGENT_PORT","DD_PROFILING_UPLOAD_TIMEOUT","DD_PROFILING_SOURCE_MAP","process","env","Config","constructor","options","enabled","service","host","hostname","version","flushInterval","interval","uploadTimeout","sourceMap","endpointCollection","String","tags","Object","assign","parse","logger","ensureLogger","port","url","exporters","ensureExporters","profilers","ensureProfilers","module","exports","getExporter","name","split","i","length","exporter","getProfiler","error","profiler","filter","v","debug","info","warn"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/profiling/config.js"],"sourcesContent":["'use strict'\n\nconst coalesce = require('koalas')\nconst os = require('os')\nconst { URL } = require('url')\nconst { AgentExporter } = require('./exporters/agent')\nconst { FileExporter } = require('./exporters/file')\nconst { ConsoleLogger } = require('./loggers/console')\nconst CpuProfiler = require('./profilers/cpu')\nconst WallProfiler = require('./profilers/wall')\nconst SpaceProfiler = require('./profilers/space')\nconst { tagger } = require('./tagger')\n\nconst {\n  DD_PROFILING_ENABLED,\n  DD_PROFILING_PROFILERS,\n  DD_PROFILING_ENDPOINT_COLLECTION_ENABLED,\n  DD_ENV,\n  DD_TAGS,\n  DD_SERVICE,\n  DD_VERSION,\n  DD_TRACE_AGENT_URL,\n  DD_AGENT_HOST,\n  DD_TRACE_AGENT_PORT,\n  DD_PROFILING_UPLOAD_TIMEOUT,\n  DD_PROFILING_SOURCE_MAP\n} = process.env\n\nclass Config {\n  constructor (options = {}) {\n    const enabled = coalesce(options.enabled, DD_PROFILING_ENABLED, true)\n    const env = coalesce(options.env, DD_ENV)\n    const service = options.service || DD_SERVICE || 'node'\n    const host = os.hostname()\n    const version = coalesce(options.version, DD_VERSION)\n    // Must be longer than one minute so pad with five seconds\n    const flushInterval = coalesce(options.interval, 65 * 1000)\n    const uploadTimeout = coalesce(options.uploadTimeout,\n      DD_PROFILING_UPLOAD_TIMEOUT, 60 * 1000)\n    const sourceMap = coalesce(options.sourceMap,\n      DD_PROFILING_SOURCE_MAP, true)\n    const endpointCollection = coalesce(options.endpointCollection,\n      DD_PROFILING_ENDPOINT_COLLECTION_ENABLED, false)\n\n    this.enabled = String(enabled) !== 'false'\n    this.service = service\n    this.env = env\n    this.host = host\n\n    this.version = version\n    this.tags = Object.assign(\n      tagger.parse(DD_TAGS),\n      tagger.parse(options.tags),\n      tagger.parse({ env, host, service, version })\n    )\n    this.logger = ensureLogger(options.logger)\n    this.flushInterval = flushInterval\n    this.uploadTimeout = uploadTimeout\n    this.sourceMap = sourceMap\n    this.endpointCollection = endpointCollection\n\n    const hostname = coalesce(options.hostname, DD_AGENT_HOST, 'localhost')\n    const port = coalesce(options.port, DD_TRACE_AGENT_PORT, 8126)\n    this.url = new URL(coalesce(options.url, DD_TRACE_AGENT_URL,\n      `http://${hostname || 'localhost'}:${port || 8126}`))\n\n    this.exporters = ensureExporters(options.exporters || [\n      new AgentExporter(this)\n    ], this)\n\n    const profilers = coalesce(options.profilers, DD_PROFILING_PROFILERS, [\n      new WallProfiler(this),\n      new SpaceProfiler(this)\n    ])\n\n    this.profilers = ensureProfilers(profilers, this)\n  }\n}\n\nmodule.exports = { Config }\n\nfunction getExporter (name, options) {\n  switch (name) {\n    case 'agent':\n      return new AgentExporter(options)\n    case 'file':\n      return new FileExporter(options)\n  }\n}\n\nfunction ensureExporters (exporters, options) {\n  if (typeof exporters === 'string') {\n    exporters = exporters.split(',')\n  }\n\n  for (let i = 0; i < exporters.length; i++) {\n    const exporter = exporters[i]\n    if (typeof exporter === 'string') {\n      exporters[i] = getExporter(exporter, options)\n    }\n  }\n\n  return exporters\n}\n\nfunction getProfiler (name, options) {\n  switch (name) {\n    case 'cpu':\n    case 'wall':\n      return new WallProfiler(options)\n    case 'space':\n      return new SpaceProfiler(options)\n    case 'cpu-experimental':\n      return new CpuProfiler(options)\n    default:\n      options.logger.error(`Unknown profiler \"${name}\"`)\n  }\n}\n\nfunction ensureProfilers (profilers, options) {\n  if (typeof profilers === 'string') {\n    profilers = profilers.split(',')\n  }\n\n  for (let i = 0; i < profilers.length; i++) {\n    const profiler = profilers[i]\n    if (typeof profiler === 'string') {\n      profilers[i] = getProfiler(profiler, options)\n    }\n  }\n\n  // Filter out any invalid profilers\n  return profilers.filter(v => v)\n}\n\nfunction ensureLogger (logger) {\n  if (typeof logger !== 'object' ||\n    typeof logger.debug !== 'function' ||\n    typeof logger.info !== 'function' ||\n    typeof logger.warn !== 'function' ||\n    typeof logger.error !== 'function') {\n    return new ConsoleLogger()\n  }\n\n  return logger\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}