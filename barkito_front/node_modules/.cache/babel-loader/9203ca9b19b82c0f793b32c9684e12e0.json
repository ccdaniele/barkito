{"ast":null,"code":"const {\n  GIT_COMMIT_SHA,\n  GIT_BRANCH,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_MESSAGE,\n  GIT_COMMIT_COMMITTER_DATE,\n  GIT_COMMIT_COMMITTER_EMAIL,\n  GIT_COMMIT_COMMITTER_NAME,\n  GIT_COMMIT_AUTHOR_DATE,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME\n} = require('./tags');\n\nconst {\n  normalizeRef\n} = require('./ci');\n\nfunction removeEmptyValues(tags) {\n  return Object.keys(tags).reduce((filteredTags, tag) => {\n    if (!tags[tag]) {\n      return filteredTags;\n    }\n\n    return { ...filteredTags,\n      [tag]: tags[tag]\n    };\n  }, {});\n}\n\nfunction getUserProviderGitMetadata() {\n  const {\n    DD_GIT_COMMIT_SHA,\n    DD_GIT_BRANCH,\n    DD_GIT_REPOSITORY_URL,\n    DD_GIT_TAG,\n    DD_GIT_COMMIT_MESSAGE,\n    DD_GIT_COMMIT_COMMITTER_NAME,\n    DD_GIT_COMMIT_COMMITTER_EMAIL,\n    DD_GIT_COMMIT_COMMITTER_DATE,\n    DD_GIT_COMMIT_AUTHOR_NAME,\n    DD_GIT_COMMIT_AUTHOR_EMAIL,\n    DD_GIT_COMMIT_AUTHOR_DATE\n  } = process.env;\n  let branch = normalizeRef(DD_GIT_BRANCH);\n  let tag = normalizeRef(DD_GIT_TAG);\n\n  if (DD_GIT_TAG) {\n    branch = undefined;\n  } // if DD_GIT_BRANCH is a tag, we associate its value to TAG instead of BRANCH\n\n\n  if ((DD_GIT_BRANCH || '').includes('origin/tags') || (DD_GIT_BRANCH || '').includes('refs/heads/tags')) {\n    branch = undefined;\n    tag = normalizeRef(DD_GIT_BRANCH);\n  }\n\n  return removeEmptyValues({\n    [GIT_COMMIT_SHA]: DD_GIT_COMMIT_SHA,\n    [GIT_BRANCH]: branch,\n    [GIT_REPOSITORY_URL]: DD_GIT_REPOSITORY_URL,\n    [GIT_TAG]: tag,\n    [GIT_COMMIT_MESSAGE]: DD_GIT_COMMIT_MESSAGE,\n    [GIT_COMMIT_COMMITTER_NAME]: DD_GIT_COMMIT_COMMITTER_NAME,\n    [GIT_COMMIT_COMMITTER_DATE]: DD_GIT_COMMIT_COMMITTER_DATE,\n    [GIT_COMMIT_COMMITTER_EMAIL]: DD_GIT_COMMIT_COMMITTER_EMAIL,\n    [GIT_COMMIT_AUTHOR_NAME]: DD_GIT_COMMIT_AUTHOR_NAME,\n    [GIT_COMMIT_AUTHOR_EMAIL]: DD_GIT_COMMIT_AUTHOR_EMAIL,\n    [GIT_COMMIT_AUTHOR_DATE]: DD_GIT_COMMIT_AUTHOR_DATE\n  });\n}\n\nmodule.exports = {\n  getUserProviderGitMetadata\n};","map":{"version":3,"names":["GIT_COMMIT_SHA","GIT_BRANCH","GIT_REPOSITORY_URL","GIT_TAG","GIT_COMMIT_MESSAGE","GIT_COMMIT_COMMITTER_DATE","GIT_COMMIT_COMMITTER_EMAIL","GIT_COMMIT_COMMITTER_NAME","GIT_COMMIT_AUTHOR_DATE","GIT_COMMIT_AUTHOR_EMAIL","GIT_COMMIT_AUTHOR_NAME","require","normalizeRef","removeEmptyValues","tags","Object","keys","reduce","filteredTags","tag","getUserProviderGitMetadata","DD_GIT_COMMIT_SHA","DD_GIT_BRANCH","DD_GIT_REPOSITORY_URL","DD_GIT_TAG","DD_GIT_COMMIT_MESSAGE","DD_GIT_COMMIT_COMMITTER_NAME","DD_GIT_COMMIT_COMMITTER_EMAIL","DD_GIT_COMMIT_COMMITTER_DATE","DD_GIT_COMMIT_AUTHOR_NAME","DD_GIT_COMMIT_AUTHOR_EMAIL","DD_GIT_COMMIT_AUTHOR_DATE","process","env","branch","undefined","includes","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/plugins/util/user-provided-git.js"],"sourcesContent":["const {\n  GIT_COMMIT_SHA,\n  GIT_BRANCH,\n  GIT_REPOSITORY_URL,\n  GIT_TAG,\n  GIT_COMMIT_MESSAGE,\n  GIT_COMMIT_COMMITTER_DATE,\n  GIT_COMMIT_COMMITTER_EMAIL,\n  GIT_COMMIT_COMMITTER_NAME,\n  GIT_COMMIT_AUTHOR_DATE,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME\n} = require('./tags')\n\nconst { normalizeRef } = require('./ci')\n\nfunction removeEmptyValues (tags) {\n  return Object.keys(tags).reduce((filteredTags, tag) => {\n    if (!tags[tag]) {\n      return filteredTags\n    }\n    return {\n      ...filteredTags,\n      [tag]: tags[tag]\n    }\n  }, {})\n}\n\nfunction getUserProviderGitMetadata () {\n  const {\n    DD_GIT_COMMIT_SHA,\n    DD_GIT_BRANCH,\n    DD_GIT_REPOSITORY_URL,\n    DD_GIT_TAG,\n    DD_GIT_COMMIT_MESSAGE,\n    DD_GIT_COMMIT_COMMITTER_NAME,\n    DD_GIT_COMMIT_COMMITTER_EMAIL,\n    DD_GIT_COMMIT_COMMITTER_DATE,\n    DD_GIT_COMMIT_AUTHOR_NAME,\n    DD_GIT_COMMIT_AUTHOR_EMAIL,\n    DD_GIT_COMMIT_AUTHOR_DATE\n  } = process.env\n\n  let branch = normalizeRef(DD_GIT_BRANCH)\n  let tag = normalizeRef(DD_GIT_TAG)\n\n  if (DD_GIT_TAG) {\n    branch = undefined\n  }\n\n  // if DD_GIT_BRANCH is a tag, we associate its value to TAG instead of BRANCH\n  if ((DD_GIT_BRANCH || '').includes('origin/tags') || (DD_GIT_BRANCH || '').includes('refs/heads/tags')) {\n    branch = undefined\n    tag = normalizeRef(DD_GIT_BRANCH)\n  }\n\n  return removeEmptyValues({\n    [GIT_COMMIT_SHA]: DD_GIT_COMMIT_SHA,\n    [GIT_BRANCH]: branch,\n    [GIT_REPOSITORY_URL]: DD_GIT_REPOSITORY_URL,\n    [GIT_TAG]: tag,\n    [GIT_COMMIT_MESSAGE]: DD_GIT_COMMIT_MESSAGE,\n    [GIT_COMMIT_COMMITTER_NAME]: DD_GIT_COMMIT_COMMITTER_NAME,\n    [GIT_COMMIT_COMMITTER_DATE]: DD_GIT_COMMIT_COMMITTER_DATE,\n    [GIT_COMMIT_COMMITTER_EMAIL]: DD_GIT_COMMIT_COMMITTER_EMAIL,\n    [GIT_COMMIT_AUTHOR_NAME]: DD_GIT_COMMIT_AUTHOR_NAME,\n    [GIT_COMMIT_AUTHOR_EMAIL]: DD_GIT_COMMIT_AUTHOR_EMAIL,\n    [GIT_COMMIT_AUTHOR_DATE]: DD_GIT_COMMIT_AUTHOR_DATE\n  })\n}\n\nmodule.exports = { getUserProviderGitMetadata }\n"],"mappings":"AAAA,MAAM;EACJA,cADI;EAEJC,UAFI;EAGJC,kBAHI;EAIJC,OAJI;EAKJC,kBALI;EAMJC,yBANI;EAOJC,0BAPI;EAQJC,yBARI;EASJC,sBATI;EAUJC,uBAVI;EAWJC;AAXI,IAYFC,OAAO,CAAC,QAAD,CAZX;;AAcA,MAAM;EAAEC;AAAF,IAAmBD,OAAO,CAAC,MAAD,CAAhC;;AAEA,SAASE,iBAAT,CAA4BC,IAA5B,EAAkC;EAChC,OAAOC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,CAAyB,CAACC,YAAD,EAAeC,GAAf,KAAuB;IACrD,IAAI,CAACL,IAAI,CAACK,GAAD,CAAT,EAAgB;MACd,OAAOD,YAAP;IACD;;IACD,OAAO,EACL,GAAGA,YADE;MAEL,CAACC,GAAD,GAAOL,IAAI,CAACK,GAAD;IAFN,CAAP;EAID,CARM,EAQJ,EARI,CAAP;AASD;;AAED,SAASC,0BAAT,GAAuC;EACrC,MAAM;IACJC,iBADI;IAEJC,aAFI;IAGJC,qBAHI;IAIJC,UAJI;IAKJC,qBALI;IAMJC,4BANI;IAOJC,6BAPI;IAQJC,4BARI;IASJC,yBATI;IAUJC,0BAVI;IAWJC;EAXI,IAYFC,OAAO,CAACC,GAZZ;EAcA,IAAIC,MAAM,GAAGtB,YAAY,CAACU,aAAD,CAAzB;EACA,IAAIH,GAAG,GAAGP,YAAY,CAACY,UAAD,CAAtB;;EAEA,IAAIA,UAAJ,EAAgB;IACdU,MAAM,GAAGC,SAAT;EACD,CApBoC,CAsBrC;;;EACA,IAAI,CAACb,aAAa,IAAI,EAAlB,EAAsBc,QAAtB,CAA+B,aAA/B,KAAiD,CAACd,aAAa,IAAI,EAAlB,EAAsBc,QAAtB,CAA+B,iBAA/B,CAArD,EAAwG;IACtGF,MAAM,GAAGC,SAAT;IACAhB,GAAG,GAAGP,YAAY,CAACU,aAAD,CAAlB;EACD;;EAED,OAAOT,iBAAiB,CAAC;IACvB,CAACb,cAAD,GAAkBqB,iBADK;IAEvB,CAACpB,UAAD,GAAciC,MAFS;IAGvB,CAAChC,kBAAD,GAAsBqB,qBAHC;IAIvB,CAACpB,OAAD,GAAWgB,GAJY;IAKvB,CAACf,kBAAD,GAAsBqB,qBALC;IAMvB,CAAClB,yBAAD,GAA6BmB,4BANN;IAOvB,CAACrB,yBAAD,GAA6BuB,4BAPN;IAQvB,CAACtB,0BAAD,GAA8BqB,6BARP;IASvB,CAACjB,sBAAD,GAA0BmB,yBATH;IAUvB,CAACpB,uBAAD,GAA2BqB,0BAVJ;IAWvB,CAACtB,sBAAD,GAA0BuB;EAXH,CAAD,CAAxB;AAaD;;AAEDM,MAAM,CAACC,OAAP,GAAiB;EAAElB;AAAF,CAAjB"},"metadata":{},"sourceType":"script"}