{"ast":null,"code":"'use strict';\n\nconst request = require('./request');\n\nconst log = require('../../log');\n\nclass Writer {\n  constructor(_ref) {\n    let {\n      url\n    } = _ref;\n    this._url = url;\n  }\n\n  flush() {\n    let done = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};\n\n    const count = this._encoder.count();\n\n    if (!request.writable) {\n      this._encoder.reset();\n\n      done();\n    } else if (count > 0) {\n      const payload = this._encoder.makePayload();\n\n      this._sendPayload(payload, count, done);\n    } else {\n      done();\n    }\n  }\n\n  append(payload) {\n    if (!request.writable) {\n      log.debug(() => `Maximum number of active requests reached. Payload discarded: ${JSON.stringify(payload)}`);\n      return;\n    }\n\n    log.debug(() => `Encoding payload: ${JSON.stringify(payload)}`);\n\n    this._encode(payload);\n  }\n\n  _encode(payload) {\n    this._encoder.encode(payload);\n  }\n\n  setUrl(url) {\n    this._url = url;\n  }\n\n}\n\nmodule.exports = Writer;","map":{"version":3,"names":["request","require","log","Writer","constructor","url","_url","flush","done","count","_encoder","writable","reset","payload","makePayload","_sendPayload","append","debug","JSON","stringify","_encode","encode","setUrl","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/exporters/common/writer.js"],"sourcesContent":["'use strict'\n\nconst request = require('./request')\nconst log = require('../../log')\n\nclass Writer {\n  constructor ({ url }) {\n    this._url = url\n  }\n\n  flush (done = () => {}) {\n    const count = this._encoder.count()\n\n    if (!request.writable) {\n      this._encoder.reset()\n      done()\n    } else if (count > 0) {\n      const payload = this._encoder.makePayload()\n\n      this._sendPayload(payload, count, done)\n    } else {\n      done()\n    }\n  }\n\n  append (payload) {\n    if (!request.writable) {\n      log.debug(() => `Maximum number of active requests reached. Payload discarded: ${JSON.stringify(payload)}`)\n      return\n    }\n\n    log.debug(() => `Encoding payload: ${JSON.stringify(payload)}`)\n\n    this._encode(payload)\n  }\n\n  _encode (payload) {\n    this._encoder.encode(payload)\n  }\n\n  setUrl (url) {\n    this._url = url\n  }\n}\n\nmodule.exports = Writer\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AAEA,MAAME,MAAN,CAAa;EACXC,WAAW,OAAW;IAAA,IAAT;MAAEC;IAAF,CAAS;IACpB,KAAKC,IAAL,GAAYD,GAAZ;EACD;;EAEDE,KAAK,GAAmB;IAAA,IAAjBC,IAAiB,uEAAV,MAAM,CAAE,CAAE;;IACtB,MAAMC,KAAK,GAAG,KAAKC,QAAL,CAAcD,KAAd,EAAd;;IAEA,IAAI,CAACT,OAAO,CAACW,QAAb,EAAuB;MACrB,KAAKD,QAAL,CAAcE,KAAd;;MACAJ,IAAI;IACL,CAHD,MAGO,IAAIC,KAAK,GAAG,CAAZ,EAAe;MACpB,MAAMI,OAAO,GAAG,KAAKH,QAAL,CAAcI,WAAd,EAAhB;;MAEA,KAAKC,YAAL,CAAkBF,OAAlB,EAA2BJ,KAA3B,EAAkCD,IAAlC;IACD,CAJM,MAIA;MACLA,IAAI;IACL;EACF;;EAEDQ,MAAM,CAAEH,OAAF,EAAW;IACf,IAAI,CAACb,OAAO,CAACW,QAAb,EAAuB;MACrBT,GAAG,CAACe,KAAJ,CAAU,MAAO,iEAAgEC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAwB,EAAzG;MACA;IACD;;IAEDX,GAAG,CAACe,KAAJ,CAAU,MAAO,qBAAoBC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAwB,EAA7D;;IAEA,KAAKO,OAAL,CAAaP,OAAb;EACD;;EAEDO,OAAO,CAAEP,OAAF,EAAW;IAChB,KAAKH,QAAL,CAAcW,MAAd,CAAqBR,OAArB;EACD;;EAEDS,MAAM,CAAEjB,GAAF,EAAO;IACX,KAAKC,IAAL,GAAYD,GAAZ;EACD;;AArCU;;AAwCbkB,MAAM,CAACC,OAAP,GAAiBrB,MAAjB"},"metadata":{},"sourceType":"script"}