{"ast":null,"code":"'use strict';\n\nconst URL = require('url').URL;\n\nconst Writer = require('./writer');\n\nconst CoverageWriter = require('./coverage-writer');\n\nconst log = require('../../../log');\n\nclass AgentlessCiVisibilityExporter {\n  constructor(config) {\n    this._config = config;\n    const {\n      tags,\n      site,\n      url,\n      isIntelligentTestRunnerEnabled\n    } = config;\n    this._isIntelligentTestRunnerEnabled = isIntelligentTestRunnerEnabled;\n    this._url = url || new URL(`https://citestcycle-intake.${site}`);\n    this._writer = new Writer({\n      url: this._url,\n      tags\n    });\n    this._timer = undefined;\n    this._coverageTimer = undefined;\n    this._coverageUrl = url || new URL(`https://event-platform-intake.${site}`);\n    this._coverageWriter = new CoverageWriter({\n      url: this._coverageUrl\n    });\n    process.once('beforeExit', () => {\n      this._writer.flush();\n\n      this._coverageWriter.flush();\n    });\n  }\n\n  exportCoverage(_ref) {\n    let {\n      span,\n      coverageFiles\n    } = _ref;\n    const formattedCoverage = {\n      traceId: span.context()._traceId,\n      spanId: span.context()._spanId,\n      files: coverageFiles\n    };\n\n    this._coverageWriter.append(formattedCoverage);\n\n    const {\n      flushInterval\n    } = this._config;\n\n    if (flushInterval === 0) {\n      this._coverageWriter.flush();\n    } else if (flushInterval > 0 && !this._coverageTimer) {\n      this._coverageTimer = setTimeout(() => {\n        this._coverageWriter.flush();\n\n        this._coverageTimer = clearTimeout(this._coverageTimer);\n      }, flushInterval).unref();\n    }\n  }\n\n  export(trace) {\n    this._writer.append(trace);\n\n    const {\n      flushInterval\n    } = this._config;\n\n    if (flushInterval === 0) {\n      this._writer.flush();\n    } else if (flushInterval > 0 && !this._timer) {\n      this._timer = setTimeout(() => {\n        this._writer.flush();\n\n        this._timer = clearTimeout(this._timer);\n      }, flushInterval).unref();\n    }\n  }\n\n  setUrl(url) {\n    let coverageUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n\n    try {\n      url = new URL(url);\n      coverageUrl = new URL(coverageUrl);\n      this._url = url;\n      this._coverageUrl = coverageUrl;\n\n      this._writer.setUrl(url);\n\n      this._coverageWriter.setUrl(coverageUrl);\n    } catch (e) {\n      log.error(e);\n    }\n  }\n\n}\n\nmodule.exports = AgentlessCiVisibilityExporter;","map":{"version":3,"names":["URL","require","Writer","CoverageWriter","log","AgentlessCiVisibilityExporter","constructor","config","_config","tags","site","url","isIntelligentTestRunnerEnabled","_isIntelligentTestRunnerEnabled","_url","_writer","_timer","undefined","_coverageTimer","_coverageUrl","_coverageWriter","process","once","flush","exportCoverage","span","coverageFiles","formattedCoverage","traceId","context","_traceId","spanId","_spanId","files","append","flushInterval","setTimeout","clearTimeout","unref","export","trace","setUrl","coverageUrl","e","error","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/ci-visibility/exporters/agentless/index.js"],"sourcesContent":["'use strict'\n\nconst URL = require('url').URL\nconst Writer = require('./writer')\nconst CoverageWriter = require('./coverage-writer')\n\nconst log = require('../../../log')\n\nclass AgentlessCiVisibilityExporter {\n  constructor (config) {\n    this._config = config\n    const { tags, site, url, isIntelligentTestRunnerEnabled } = config\n    this._isIntelligentTestRunnerEnabled = isIntelligentTestRunnerEnabled\n    this._url = url || new URL(`https://citestcycle-intake.${site}`)\n    this._writer = new Writer({ url: this._url, tags })\n    this._timer = undefined\n    this._coverageTimer = undefined\n\n    this._coverageUrl = url || new URL(`https://event-platform-intake.${site}`)\n    this._coverageWriter = new CoverageWriter({ url: this._coverageUrl })\n\n    process.once('beforeExit', () => {\n      this._writer.flush()\n      this._coverageWriter.flush()\n    })\n  }\n\n  exportCoverage ({ span, coverageFiles }) {\n    const formattedCoverage = {\n      traceId: span.context()._traceId,\n      spanId: span.context()._spanId,\n      files: coverageFiles\n    }\n    this._coverageWriter.append(formattedCoverage)\n\n    const { flushInterval } = this._config\n\n    if (flushInterval === 0) {\n      this._coverageWriter.flush()\n    } else if (flushInterval > 0 && !this._coverageTimer) {\n      this._coverageTimer = setTimeout(() => {\n        this._coverageWriter.flush()\n        this._coverageTimer = clearTimeout(this._coverageTimer)\n      }, flushInterval).unref()\n    }\n  }\n\n  export (trace) {\n    this._writer.append(trace)\n\n    const { flushInterval } = this._config\n\n    if (flushInterval === 0) {\n      this._writer.flush()\n    } else if (flushInterval > 0 && !this._timer) {\n      this._timer = setTimeout(() => {\n        this._writer.flush()\n        this._timer = clearTimeout(this._timer)\n      }, flushInterval).unref()\n    }\n  }\n\n  setUrl (url, coverageUrl = url) {\n    try {\n      url = new URL(url)\n      coverageUrl = new URL(coverageUrl)\n      this._url = url\n      this._coverageUrl = coverageUrl\n      this._writer.setUrl(url)\n      this._coverageWriter.setUrl(coverageUrl)\n    } catch (e) {\n      log.error(e)\n    }\n  }\n}\n\nmodule.exports = AgentlessCiVisibilityExporter\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAP,CAAeD,GAA3B;;AACA,MAAME,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,mBAAD,CAA9B;;AAEA,MAAMG,GAAG,GAAGH,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAMI,6BAAN,CAAoC;EAClCC,WAAW,CAAEC,MAAF,EAAU;IACnB,KAAKC,OAAL,GAAeD,MAAf;IACA,MAAM;MAAEE,IAAF;MAAQC,IAAR;MAAcC,GAAd;MAAmBC;IAAnB,IAAsDL,MAA5D;IACA,KAAKM,+BAAL,GAAuCD,8BAAvC;IACA,KAAKE,IAAL,GAAYH,GAAG,IAAI,IAAIX,GAAJ,CAAS,8BAA6BU,IAAK,EAA3C,CAAnB;IACA,KAAKK,OAAL,GAAe,IAAIb,MAAJ,CAAW;MAAES,GAAG,EAAE,KAAKG,IAAZ;MAAkBL;IAAlB,CAAX,CAAf;IACA,KAAKO,MAAL,GAAcC,SAAd;IACA,KAAKC,cAAL,GAAsBD,SAAtB;IAEA,KAAKE,YAAL,GAAoBR,GAAG,IAAI,IAAIX,GAAJ,CAAS,iCAAgCU,IAAK,EAA9C,CAA3B;IACA,KAAKU,eAAL,GAAuB,IAAIjB,cAAJ,CAAmB;MAAEQ,GAAG,EAAE,KAAKQ;IAAZ,CAAnB,CAAvB;IAEAE,OAAO,CAACC,IAAR,CAAa,YAAb,EAA2B,MAAM;MAC/B,KAAKP,OAAL,CAAaQ,KAAb;;MACA,KAAKH,eAAL,CAAqBG,KAArB;IACD,CAHD;EAID;;EAEDC,cAAc,OAA2B;IAAA,IAAzB;MAAEC,IAAF;MAAQC;IAAR,CAAyB;IACvC,MAAMC,iBAAiB,GAAG;MACxBC,OAAO,EAAEH,IAAI,CAACI,OAAL,GAAeC,QADA;MAExBC,MAAM,EAAEN,IAAI,CAACI,OAAL,GAAeG,OAFC;MAGxBC,KAAK,EAAEP;IAHiB,CAA1B;;IAKA,KAAKN,eAAL,CAAqBc,MAArB,CAA4BP,iBAA5B;;IAEA,MAAM;MAAEQ;IAAF,IAAoB,KAAK3B,OAA/B;;IAEA,IAAI2B,aAAa,KAAK,CAAtB,EAAyB;MACvB,KAAKf,eAAL,CAAqBG,KAArB;IACD,CAFD,MAEO,IAAIY,aAAa,GAAG,CAAhB,IAAqB,CAAC,KAAKjB,cAA/B,EAA+C;MACpD,KAAKA,cAAL,GAAsBkB,UAAU,CAAC,MAAM;QACrC,KAAKhB,eAAL,CAAqBG,KAArB;;QACA,KAAKL,cAAL,GAAsBmB,YAAY,CAAC,KAAKnB,cAAN,CAAlC;MACD,CAH+B,EAG7BiB,aAH6B,CAAV,CAGJG,KAHI,EAAtB;IAID;EACF;;EAEDC,MAAM,CAAEC,KAAF,EAAS;IACb,KAAKzB,OAAL,CAAamB,MAAb,CAAoBM,KAApB;;IAEA,MAAM;MAAEL;IAAF,IAAoB,KAAK3B,OAA/B;;IAEA,IAAI2B,aAAa,KAAK,CAAtB,EAAyB;MACvB,KAAKpB,OAAL,CAAaQ,KAAb;IACD,CAFD,MAEO,IAAIY,aAAa,GAAG,CAAhB,IAAqB,CAAC,KAAKnB,MAA/B,EAAuC;MAC5C,KAAKA,MAAL,GAAcoB,UAAU,CAAC,MAAM;QAC7B,KAAKrB,OAAL,CAAaQ,KAAb;;QACA,KAAKP,MAAL,GAAcqB,YAAY,CAAC,KAAKrB,MAAN,CAA1B;MACD,CAHuB,EAGrBmB,aAHqB,CAAV,CAGIG,KAHJ,EAAd;IAID;EACF;;EAEDG,MAAM,CAAE9B,GAAF,EAA0B;IAAA,IAAnB+B,WAAmB,uEAAL/B,GAAK;;IAC9B,IAAI;MACFA,GAAG,GAAG,IAAIX,GAAJ,CAAQW,GAAR,CAAN;MACA+B,WAAW,GAAG,IAAI1C,GAAJ,CAAQ0C,WAAR,CAAd;MACA,KAAK5B,IAAL,GAAYH,GAAZ;MACA,KAAKQ,YAAL,GAAoBuB,WAApB;;MACA,KAAK3B,OAAL,CAAa0B,MAAb,CAAoB9B,GAApB;;MACA,KAAKS,eAAL,CAAqBqB,MAArB,CAA4BC,WAA5B;IACD,CAPD,CAOE,OAAOC,CAAP,EAAU;MACVvC,GAAG,CAACwC,KAAJ,CAAUD,CAAV;IACD;EACF;;AAjEiC;;AAoEpCE,MAAM,CAACC,OAAP,GAAiBzC,6BAAjB"},"metadata":{},"sourceType":"script"}