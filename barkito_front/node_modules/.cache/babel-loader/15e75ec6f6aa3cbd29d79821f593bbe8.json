{"ast":null,"code":"'use strict';\n\nconst {\n  channel,\n  addHook\n} = require('./helpers/instrument');\n\nconst shimmer = require('../../datadog-shimmer');\n\nconst cryptoHashCh = channel('datadog:crypto:hashing:start');\nconst cryptoCipherCh = channel('datadog:crypto:cipher:start');\nconst hashMethods = ['createHash', 'createHmac', 'createSign', 'createVerify', 'sign', 'verify'];\nconst cipherMethods = ['createCipheriv', 'createDecipheriv'];\naddHook({\n  name: 'crypto'\n}, crypto => {\n  shimmer.massWrap(crypto, hashMethods, wrapCryptoMethod(cryptoHashCh));\n  shimmer.massWrap(crypto, cipherMethods, wrapCryptoMethod(cryptoCipherCh));\n  return crypto;\n});\n\nfunction wrapCryptoMethod(channel) {\n  function wrapMethod(cryptoMethod) {\n    return function () {\n      if (channel.hasSubscribers && arguments.length > 0) {\n        const algorithm = arguments[0];\n        channel.publish({\n          algorithm\n        });\n      }\n\n      return cryptoMethod.apply(this, arguments);\n    };\n  }\n\n  return wrapMethod;\n}","map":{"version":3,"names":["channel","addHook","require","shimmer","cryptoHashCh","cryptoCipherCh","hashMethods","cipherMethods","name","crypto","massWrap","wrapCryptoMethod","wrapMethod","cryptoMethod","hasSubscribers","arguments","length","algorithm","publish","apply"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-instrumentations/src/crypto.js"],"sourcesContent":["'use strict'\n\nconst {\n  channel,\n  addHook\n} = require('./helpers/instrument')\nconst shimmer = require('../../datadog-shimmer')\n\nconst cryptoHashCh = channel('datadog:crypto:hashing:start')\nconst cryptoCipherCh = channel('datadog:crypto:cipher:start')\n\nconst hashMethods = ['createHash', 'createHmac', 'createSign', 'createVerify', 'sign', 'verify']\nconst cipherMethods = ['createCipheriv', 'createDecipheriv']\n\naddHook({ name: 'crypto' }, crypto => {\n  shimmer.massWrap(crypto, hashMethods, wrapCryptoMethod(cryptoHashCh))\n  shimmer.massWrap(crypto, cipherMethods, wrapCryptoMethod(cryptoCipherCh))\n  return crypto\n})\n\nfunction wrapCryptoMethod (channel) {\n  function wrapMethod (cryptoMethod) {\n    return function () {\n      if (channel.hasSubscribers && arguments.length > 0) {\n        const algorithm = arguments[0]\n        channel.publish({ algorithm })\n      }\n      return cryptoMethod.apply(this, arguments)\n    }\n  }\n  return wrapMethod\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EACJA,OADI;EAEJC;AAFI,IAGFC,OAAO,CAAC,sBAAD,CAHX;;AAIA,MAAMC,OAAO,GAAGD,OAAO,CAAC,uBAAD,CAAvB;;AAEA,MAAME,YAAY,GAAGJ,OAAO,CAAC,8BAAD,CAA5B;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,6BAAD,CAA9B;AAEA,MAAMM,WAAW,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,EAA2C,cAA3C,EAA2D,MAA3D,EAAmE,QAAnE,CAApB;AACA,MAAMC,aAAa,GAAG,CAAC,gBAAD,EAAmB,kBAAnB,CAAtB;AAEAN,OAAO,CAAC;EAAEO,IAAI,EAAE;AAAR,CAAD,EAAqBC,MAAM,IAAI;EACpCN,OAAO,CAACO,QAAR,CAAiBD,MAAjB,EAAyBH,WAAzB,EAAsCK,gBAAgB,CAACP,YAAD,CAAtD;EACAD,OAAO,CAACO,QAAR,CAAiBD,MAAjB,EAAyBF,aAAzB,EAAwCI,gBAAgB,CAACN,cAAD,CAAxD;EACA,OAAOI,MAAP;AACD,CAJM,CAAP;;AAMA,SAASE,gBAAT,CAA2BX,OAA3B,EAAoC;EAClC,SAASY,UAAT,CAAqBC,YAArB,EAAmC;IACjC,OAAO,YAAY;MACjB,IAAIb,OAAO,CAACc,cAAR,IAA0BC,SAAS,CAACC,MAAV,GAAmB,CAAjD,EAAoD;QAClD,MAAMC,SAAS,GAAGF,SAAS,CAAC,CAAD,CAA3B;QACAf,OAAO,CAACkB,OAAR,CAAgB;UAAED;QAAF,CAAhB;MACD;;MACD,OAAOJ,YAAY,CAACM,KAAb,CAAmB,IAAnB,EAAyBJ,SAAzB,CAAP;IACD,CAND;EAOD;;EACD,OAAOH,UAAP;AACD"},"metadata":{},"sourceType":"script"}