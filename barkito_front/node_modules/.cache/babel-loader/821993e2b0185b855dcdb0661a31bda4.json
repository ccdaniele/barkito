{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.heap = exports.time = exports.CpuProfiler = exports.SourceMapper = exports.encodeSync = exports.encode = void 0;\n/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst fs_1 = require(\"fs\");\n\nconst cpu_profiler_1 = require(\"./cpu-profiler\");\n\nconst heapProfiler = require(\"./heap-profiler\");\n\nconst profile_encoder_1 = require(\"./profile-encoder\");\n\nconst timeProfiler = require(\"./time-profiler\");\n\nvar profile_encoder_2 = require(\"./profile-encoder\");\n\nObject.defineProperty(exports, \"encode\", {\n  enumerable: true,\n  get: function () {\n    return profile_encoder_2.encode;\n  }\n});\nObject.defineProperty(exports, \"encodeSync\", {\n  enumerable: true,\n  get: function () {\n    return profile_encoder_2.encodeSync;\n  }\n});\n\nvar sourcemapper_1 = require(\"./sourcemapper/sourcemapper\");\n\nObject.defineProperty(exports, \"SourceMapper\", {\n  enumerable: true,\n  get: function () {\n    return sourcemapper_1.SourceMapper;\n  }\n});\nexports.CpuProfiler = cpu_profiler_1.default;\nexports.time = {\n  profile: timeProfiler.profile,\n  start: timeProfiler.start\n};\nexports.heap = {\n  start: heapProfiler.start,\n  stop: heapProfiler.stop,\n  profile: heapProfiler.profile,\n  v8Profile: heapProfiler.v8Profile\n}; // If loaded with --require, start profiling.\n\nif (module.parent && module.parent.id === 'internal/preload') {\n  const stop = exports.time.start();\n  process.on('exit', () => {\n    // The process is going to terminate imminently. All work here needs to\n    // be synchronous.\n    const profile = stop();\n    const buffer = (0, profile_encoder_1.encodeSync)(profile);\n    (0, fs_1.writeFileSync)(`pprof-profile-${process.pid}.pb.gz`, buffer);\n  });\n}","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAeA;;AAEA;;AACA;;AACA;;AACA;;AAGA;;AAAQA;EAAAC;EAAAC;IAAA;EAAM;AAAN;AAAQF;EAAAC;EAAAC;IAAA;EAAU;AAAV;;AAChB;;AAAQF;EAAAC;EAAAC;IAAA;EAAY;AAAZ;AAEKC,sBAAcC,sBAAd;AAEAD,eAAO;EAClBE,OAAO,EAAEC,YAAY,CAACD,OADJ;EAElBE,KAAK,EAAED,YAAY,CAACC;AAFF,CAAP;AAKAJ,eAAO;EAClBI,KAAK,EAAEC,YAAY,CAACD,KADF;EAElBE,IAAI,EAAED,YAAY,CAACC,IAFD;EAGlBJ,OAAO,EAAEG,YAAY,CAACH,OAHJ;EAIlBK,SAAS,EAAEF,YAAY,CAACE;AAJN,CAAP,C,CAOb;;AACA,IAAIC,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcC,EAAd,KAAqB,kBAA1C,EAA8D;EAC5D,MAAMJ,IAAI,GAAGN,aAAKI,KAAL,EAAb;EACAO,OAAO,CAACC,EAAR,CAAW,MAAX,EAAmB,MAAK;IACtB;IACA;IACA,MAAMV,OAAO,GAAGI,IAAI,EAApB;IACA,MAAMO,MAAM,GAAG,kCAAWX,OAAX,CAAf;IACA,wBAAc,iBAAiBS,OAAO,CAACG,GAAG,QAA1C,EAAoDD,MAApD;EACD,CAND;AAOD","names":["Object","enumerable","get","exports","cpu_profiler_1","profile","timeProfiler","start","heapProfiler","stop","v8Profile","module","parent","id","process","on","buffer","pid"],"sources":["../../ts/src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}