{"ast":null,"code":"'use strict';\n\nconst log = require('../../../dd-trace/src/log');\n\nconst BaseAwsSdkPlugin = require('../base');\n\nclass EventBridge extends BaseAwsSdkPlugin {\n  generateTags(params, operation, response) {\n    if (!params || !params.source) return {};\n    return {\n      'resource.name': `${operation} ${params.source}`,\n      'aws.eventbridge.source': params.source\n    };\n  }\n  /**\n   * requestInject\n   * @param {*} span\n   * @param {*} request\n   *\n   * Docs: https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEventsRequestEntry.html\n   * We cannot use the traceHeader field as that's reserved for X-Ray.\n   * Detail must be a valid JSON string\n   * Max size per event is 256kb (https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-putevent-size.html)\n   */\n\n\n  requestInject(span, request) {\n    const operation = request.operation;\n\n    if (operation === 'putEvents' && request.params && request.params.Entries && request.params.Entries.length > 0 && request.params.Entries[0].Detail) {\n      try {\n        const details = JSON.parse(request.params.Entries[0].Detail);\n        details._datadog = {};\n        this.tracer.inject(span, 'text_map', details._datadog);\n        const finalData = JSON.stringify(details);\n        const byteSize = Buffer.byteLength(finalData);\n\n        if (byteSize >= 1024 * 256) {\n          log.info('Payload size too large to pass context');\n          return;\n        }\n\n        request.params.Entries[0].Detail = finalData;\n      } catch (e) {\n        log.error(e);\n      }\n    }\n  }\n\n}\n\nmodule.exports = EventBridge;","map":{"version":3,"names":["log","require","BaseAwsSdkPlugin","EventBridge","generateTags","params","operation","response","source","requestInject","span","request","Entries","length","Detail","details","JSON","parse","_datadog","tracer","inject","finalData","stringify","byteSize","Buffer","byteLength","info","e","error","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-aws-sdk/src/services/eventbridge.js"],"sourcesContent":["'use strict'\nconst log = require('../../../dd-trace/src/log')\nconst BaseAwsSdkPlugin = require('../base')\n\nclass EventBridge extends BaseAwsSdkPlugin {\n  generateTags (params, operation, response) {\n    if (!params || !params.source) return {}\n\n    return {\n      'resource.name': `${operation} ${params.source}`,\n      'aws.eventbridge.source': params.source\n    }\n  }\n\n  /**\n   * requestInject\n   * @param {*} span\n   * @param {*} request\n   *\n   * Docs: https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEventsRequestEntry.html\n   * We cannot use the traceHeader field as that's reserved for X-Ray.\n   * Detail must be a valid JSON string\n   * Max size per event is 256kb (https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-putevent-size.html)\n   */\n  requestInject (span, request) {\n    const operation = request.operation\n    if (operation === 'putEvents' &&\n      request.params &&\n      request.params.Entries &&\n      request.params.Entries.length > 0 &&\n      request.params.Entries[0].Detail) {\n      try {\n        const details = JSON.parse(request.params.Entries[0].Detail)\n        details._datadog = {}\n        this.tracer.inject(span, 'text_map', details._datadog)\n        const finalData = JSON.stringify(details)\n        const byteSize = Buffer.byteLength(finalData)\n        if (byteSize >= (1024 * 256)) {\n          log.info('Payload size too large to pass context')\n          return\n        }\n        request.params.Entries[0].Detail = finalData\n      } catch (e) {\n        log.error(e)\n      }\n    }\n  }\n}\nmodule.exports = EventBridge\n"],"mappings":"AAAA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,2BAAD,CAAnB;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,SAAD,CAAhC;;AAEA,MAAME,WAAN,SAA0BD,gBAA1B,CAA2C;EACzCE,YAAY,CAAEC,MAAF,EAAUC,SAAV,EAAqBC,QAArB,EAA+B;IACzC,IAAI,CAACF,MAAD,IAAW,CAACA,MAAM,CAACG,MAAvB,EAA+B,OAAO,EAAP;IAE/B,OAAO;MACL,iBAAkB,GAAEF,SAAU,IAAGD,MAAM,CAACG,MAAO,EAD1C;MAEL,0BAA0BH,MAAM,CAACG;IAF5B,CAAP;EAID;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,aAAa,CAAEC,IAAF,EAAQC,OAAR,EAAiB;IAC5B,MAAML,SAAS,GAAGK,OAAO,CAACL,SAA1B;;IACA,IAAIA,SAAS,KAAK,WAAd,IACFK,OAAO,CAACN,MADN,IAEFM,OAAO,CAACN,MAAR,CAAeO,OAFb,IAGFD,OAAO,CAACN,MAAR,CAAeO,OAAf,CAAuBC,MAAvB,GAAgC,CAH9B,IAIFF,OAAO,CAACN,MAAR,CAAeO,OAAf,CAAuB,CAAvB,EAA0BE,MAJ5B,EAIoC;MAClC,IAAI;QACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAO,CAACN,MAAR,CAAeO,OAAf,CAAuB,CAAvB,EAA0BE,MAArC,CAAhB;QACAC,OAAO,CAACG,QAAR,GAAmB,EAAnB;QACA,KAAKC,MAAL,CAAYC,MAAZ,CAAmBV,IAAnB,EAAyB,UAAzB,EAAqCK,OAAO,CAACG,QAA7C;QACA,MAAMG,SAAS,GAAGL,IAAI,CAACM,SAAL,CAAeP,OAAf,CAAlB;QACA,MAAMQ,QAAQ,GAAGC,MAAM,CAACC,UAAP,CAAkBJ,SAAlB,CAAjB;;QACA,IAAIE,QAAQ,IAAK,OAAO,GAAxB,EAA8B;UAC5BvB,GAAG,CAAC0B,IAAJ,CAAS,wCAAT;UACA;QACD;;QACDf,OAAO,CAACN,MAAR,CAAeO,OAAf,CAAuB,CAAvB,EAA0BE,MAA1B,GAAmCO,SAAnC;MACD,CAXD,CAWE,OAAOM,CAAP,EAAU;QACV3B,GAAG,CAAC4B,KAAJ,CAAUD,CAAV;MACD;IACF;EACF;;AA1CwC;;AA4C3CE,MAAM,CAACC,OAAP,GAAiB3B,WAAjB"},"metadata":{},"sourceType":"script"}