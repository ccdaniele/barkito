{"ast":null,"code":"const path = require('path');\n\nconst pathLine = {\n  getFirstNonDDPathAndLine,\n  getFirstNonDDPathAndLineFromCallsites,\n  // Exported only for test purposes\n  calculateDDBasePath,\n  // Exported only for test purposes\n  ddBasePath: calculateDDBasePath(__dirname) // Only for test purposes\n\n};\nconst EXCLUDED_PATHS = ['/node_modules/diagnostics_channel'];\nconst EXCLUDED_PATH_PREFIXES = ['node:diagnostics_channel', 'diagnostics_channel'];\n\nfunction calculateDDBasePath(dirname) {\n  const dirSteps = dirname.split(path.sep);\n  const packagesIndex = dirSteps.indexOf('packages');\n  return dirSteps.slice(0, packagesIndex).join(path.sep) + path.sep;\n}\n\nfunction getCallSiteInfo() {\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  let callsiteList;\n\n  Error.prepareStackTrace = function (_, callsites) {\n    callsiteList = callsites;\n  };\n\n  const e = new Error();\n  e.stack;\n  Error.prepareStackTrace = previousPrepareStackTrace;\n  return callsiteList;\n}\n\nfunction getFirstNonDDPathAndLineFromCallsites(callsites) {\n  if (callsites) {\n    for (let i = 0; i < callsites.length; i++) {\n      const callsite = callsites[i];\n      const path = callsite.getFileName();\n\n      if (!isExcluded(callsite) && path.indexOf(pathLine.ddBasePath) === -1) {\n        return {\n          path,\n          line: callsite.getLineNumber()\n        };\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction isExcluded(callsite) {\n  if (callsite.isNative()) return true;\n  const filename = callsite.getFileName();\n\n  for (let i = 0; i < EXCLUDED_PATHS.length; i++) {\n    if (filename.indexOf(EXCLUDED_PATHS[i]) > -1) {\n      return true;\n    }\n  }\n\n  for (let i = 0; i < EXCLUDED_PATH_PREFIXES.length; i++) {\n    if (filename.indexOf(EXCLUDED_PATH_PREFIXES[i]) === 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getFirstNonDDPathAndLine() {\n  return getFirstNonDDPathAndLineFromCallsites(getCallSiteInfo());\n}\n\nmodule.exports = pathLine;","map":{"version":3,"names":["path","require","pathLine","getFirstNonDDPathAndLine","getFirstNonDDPathAndLineFromCallsites","calculateDDBasePath","ddBasePath","__dirname","EXCLUDED_PATHS","EXCLUDED_PATH_PREFIXES","dirname","dirSteps","split","sep","packagesIndex","indexOf","slice","join","getCallSiteInfo","previousPrepareStackTrace","Error","prepareStackTrace","callsiteList","_","callsites","e","stack","i","length","callsite","getFileName","isExcluded","line","getLineNumber","isNative","filename","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/appsec/iast/path-line.js"],"sourcesContent":["const path = require('path')\nconst pathLine = {\n  getFirstNonDDPathAndLine,\n  getFirstNonDDPathAndLineFromCallsites, // Exported only for test purposes\n  calculateDDBasePath, // Exported only for test purposes\n  ddBasePath: calculateDDBasePath(__dirname) // Only for test purposes\n}\n\nconst EXCLUDED_PATHS = [\n  '/node_modules/diagnostics_channel'\n]\nconst EXCLUDED_PATH_PREFIXES = [\n  'node:diagnostics_channel',\n  'diagnostics_channel'\n]\n\nfunction calculateDDBasePath (dirname) {\n  const dirSteps = dirname.split(path.sep)\n  const packagesIndex = dirSteps.indexOf('packages')\n  return dirSteps.slice(0, packagesIndex).join(path.sep) + path.sep\n}\n\nfunction getCallSiteInfo () {\n  const previousPrepareStackTrace = Error.prepareStackTrace\n  let callsiteList\n  Error.prepareStackTrace = function (_, callsites) {\n    callsiteList = callsites\n  }\n  const e = new Error()\n  e.stack\n  Error.prepareStackTrace = previousPrepareStackTrace\n  return callsiteList\n}\n\nfunction getFirstNonDDPathAndLineFromCallsites (callsites) {\n  if (callsites) {\n    for (let i = 0; i < callsites.length; i++) {\n      const callsite = callsites[i]\n      const path = callsite.getFileName()\n      if (!isExcluded(callsite) && path.indexOf(pathLine.ddBasePath) === -1) {\n        return {\n          path,\n          line: callsite.getLineNumber()\n        }\n      }\n    }\n  }\n  return null\n}\n\nfunction isExcluded (callsite) {\n  if (callsite.isNative()) return true\n  const filename = callsite.getFileName()\n  for (let i = 0; i < EXCLUDED_PATHS.length; i++) {\n    if (filename.indexOf(EXCLUDED_PATHS[i]) > -1) {\n      return true\n    }\n  }\n  for (let i = 0; i < EXCLUDED_PATH_PREFIXES.length; i++) {\n    if (filename.indexOf(EXCLUDED_PATH_PREFIXES[i]) === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction getFirstNonDDPathAndLine () {\n  return getFirstNonDDPathAndLineFromCallsites(getCallSiteInfo())\n}\nmodule.exports = pathLine\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,QAAQ,GAAG;EACfC,wBADe;EAEfC,qCAFe;EAEwB;EACvCC,mBAHe;EAGM;EACrBC,UAAU,EAAED,mBAAmB,CAACE,SAAD,CAJhB,CAI4B;;AAJ5B,CAAjB;AAOA,MAAMC,cAAc,GAAG,CACrB,mCADqB,CAAvB;AAGA,MAAMC,sBAAsB,GAAG,CAC7B,0BAD6B,EAE7B,qBAF6B,CAA/B;;AAKA,SAASJ,mBAAT,CAA8BK,OAA9B,EAAuC;EACrC,MAAMC,QAAQ,GAAGD,OAAO,CAACE,KAAR,CAAcZ,IAAI,CAACa,GAAnB,CAAjB;EACA,MAAMC,aAAa,GAAGH,QAAQ,CAACI,OAAT,CAAiB,UAAjB,CAAtB;EACA,OAAOJ,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkBF,aAAlB,EAAiCG,IAAjC,CAAsCjB,IAAI,CAACa,GAA3C,IAAkDb,IAAI,CAACa,GAA9D;AACD;;AAED,SAASK,eAAT,GAA4B;EAC1B,MAAMC,yBAAyB,GAAGC,KAAK,CAACC,iBAAxC;EACA,IAAIC,YAAJ;;EACAF,KAAK,CAACC,iBAAN,GAA0B,UAAUE,CAAV,EAAaC,SAAb,EAAwB;IAChDF,YAAY,GAAGE,SAAf;EACD,CAFD;;EAGA,MAAMC,CAAC,GAAG,IAAIL,KAAJ,EAAV;EACAK,CAAC,CAACC,KAAF;EACAN,KAAK,CAACC,iBAAN,GAA0BF,yBAA1B;EACA,OAAOG,YAAP;AACD;;AAED,SAASlB,qCAAT,CAAgDoB,SAAhD,EAA2D;EACzD,IAAIA,SAAJ,EAAe;IACb,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;MACzC,MAAME,QAAQ,GAAGL,SAAS,CAACG,CAAD,CAA1B;MACA,MAAM3B,IAAI,GAAG6B,QAAQ,CAACC,WAAT,EAAb;;MACA,IAAI,CAACC,UAAU,CAACF,QAAD,CAAX,IAAyB7B,IAAI,CAACe,OAAL,CAAab,QAAQ,CAACI,UAAtB,MAAsC,CAAC,CAApE,EAAuE;QACrE,OAAO;UACLN,IADK;UAELgC,IAAI,EAAEH,QAAQ,CAACI,aAAT;QAFD,CAAP;MAID;IACF;EACF;;EACD,OAAO,IAAP;AACD;;AAED,SAASF,UAAT,CAAqBF,QAArB,EAA+B;EAC7B,IAAIA,QAAQ,CAACK,QAAT,EAAJ,EAAyB,OAAO,IAAP;EACzB,MAAMC,QAAQ,GAAGN,QAAQ,CAACC,WAAT,EAAjB;;EACA,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,cAAc,CAACoB,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;IAC9C,IAAIQ,QAAQ,CAACpB,OAAT,CAAiBP,cAAc,CAACmB,CAAD,CAA/B,IAAsC,CAAC,CAA3C,EAA8C;MAC5C,OAAO,IAAP;IACD;EACF;;EACD,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,sBAAsB,CAACmB,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;IACtD,IAAIQ,QAAQ,CAACpB,OAAT,CAAiBN,sBAAsB,CAACkB,CAAD,CAAvC,MAAgD,CAApD,EAAuD;MACrD,OAAO,IAAP;IACD;EACF;;EACD,OAAO,KAAP;AACD;;AAED,SAASxB,wBAAT,GAAqC;EACnC,OAAOC,qCAAqC,CAACc,eAAe,EAAhB,CAA5C;AACD;;AACDkB,MAAM,CAACC,OAAP,GAAiBnC,QAAjB"},"metadata":{},"sourceType":"script"}