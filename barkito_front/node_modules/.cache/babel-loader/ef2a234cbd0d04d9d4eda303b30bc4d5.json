{"ast":null,"code":"'use strict'; // Polyfill relevant Node.js core validators and error types\n\nconst assert = require('assert');\n\nconst util = require('util'); // Sorted by a rough estimate on most frequently used entries.\n\n\nconst kTypes = ['string', 'function', 'number', 'object', // Accept 'Function' and 'Object' as alternative to the lower cased version.\n'Function', 'Object', 'boolean', 'bigint', 'symbol'];\n\nclass ERR_OPERATION_FAILED extends TypeError {\n  constructor(message) {\n    super(`Operation failed: ${message}`);\n    this.code = this.constructor.name;\n    Object.defineProperties(this, {\n      toString: {\n        value() {\n          return `${this.name} [${this.code}]: ${this.message}`;\n        },\n\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  }\n\n}\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(name, expected, actual) {\n    super();\n    assert(typeof name === 'string', \"'name' must be a string\");\n\n    if (!Array.isArray(expected)) {\n      expected = [expected];\n    }\n\n    let msg = 'The ';\n\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg += `${name} `;\n    } else {\n      const type = name.includes('.') ? 'property' : 'argument';\n      msg += `\"${name}\" ${type} `;\n    }\n\n    msg += 'must be ';\n    const types = [];\n    const instances = [];\n    const other = [];\n\n    for (const value of expected) {\n      assert(typeof value === 'string', 'All expected entries have to be of type string');\n\n      if (kTypes.includes(value)) {\n        types.push(value.toLowerCase());\n      } else if (classRegExp.test(value)) {\n        instances.push(value);\n      } else {\n        assert(value !== 'object', 'The value \"object\" should be written as \"Object\"');\n        other.push(value);\n      }\n    } // Special handle `object` in case other instances are allowed to outline\n    // the differences between each other.\n\n\n    if (instances.length > 0) {\n      const pos = types.indexOf('object');\n\n      if (pos !== -1) {\n        types.splice(pos, 1);\n        instances.push('Object');\n      }\n    }\n\n    if (types.length > 0) {\n      if (types.length > 2) {\n        const last = types.pop();\n        msg += `one of type ${types.join(', ')}, or ${last}`;\n      } else if (types.length === 2) {\n        msg += `one of type ${types[0]} or ${types[1]}`;\n      } else {\n        msg += `of type ${types[0]}`;\n      }\n\n      if (instances.length > 0 || other.length > 0) msg += ' or ';\n    }\n\n    if (instances.length > 0) {\n      if (instances.length > 2) {\n        const last = instances.pop();\n        msg += `an instance of ${instances.join(', ')}, or ${last}`;\n      } else {\n        msg += `an instance of ${instances[0]}`;\n\n        if (instances.length === 2) {\n          msg += ` or ${instances[1]}`;\n        }\n      }\n\n      if (other.length > 0) msg += ' or ';\n    }\n\n    if (other.length > 0) {\n      if (other.length > 2) {\n        const last = other.pop();\n        msg += `one of ${other.join(', ')}, or ${last}`;\n      } else if (other.length === 2) {\n        msg += `one of ${other[0]} or ${other[1]}`;\n      } else {\n        if (other[0].toLowerCase() !== other[0]) msg += 'an ';\n        msg += `${other[0]}`;\n      }\n    }\n\n    if (actual == null) {\n      msg += `. Received ${actual}`;\n    } else if (typeof actual === 'function' && actual.name) {\n      msg += `. Received function ${actual.name}`;\n    } else if (typeof actual === 'object') {\n      if (actual.constructor && actual.constructor.name) {\n        msg += `. Received an instance of ${actual.constructor.name}`;\n      } else {\n        const inspected = util.inspect(actual, {\n          depth: -1\n        });\n        msg += `. Received ${inspected}`;\n      }\n    } else {\n      let inspected = util.inspect(actual, {\n        colors: false\n      });\n\n      if (inspected.length > 25) {\n        inspected = `${inspected.slice(0, 25)}...`;\n      }\n\n      msg += `. Received type ${typeof actual} (${inspected})`;\n    }\n\n    this.code = this.constructor.name;\n    Object.defineProperties(this, {\n      message: {\n        value: msg,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      },\n      toString: {\n        value() {\n          return `${this.name} [${this.code}]: ${this.message}`;\n        },\n\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  }\n\n}\n\nfunction validateBoolean(value, name) {\n  if (typeof value !== 'boolean') throw new ERR_INVALID_ARG_TYPE(name, 'boolean', value);\n}\n\nfunction validateObject(value, name) {\n  let {\n    nullable = false,\n    allowArray = false,\n    allowFunction = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!nullable && value === null || !allowArray && Array.isArray(value) || typeof value !== 'object' && (!allowFunction || typeof value !== 'function')) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\n  }\n}\n\n;\nmodule.exports = {\n  validateBoolean,\n  validateObject,\n  codes: {\n    ERR_OPERATION_FAILED\n  }\n};","map":{"version":3,"names":["assert","require","util","kTypes","ERR_OPERATION_FAILED","TypeError","constructor","message","code","name","Object","defineProperties","toString","value","enumerable","writable","configurable","ERR_INVALID_ARG_TYPE","expected","actual","Array","isArray","msg","endsWith","type","includes","types","instances","other","push","toLowerCase","classRegExp","test","length","pos","indexOf","splice","last","pop","join","inspected","inspect","depth","colors","slice","validateBoolean","validateObject","nullable","allowArray","allowFunction","module","exports","codes"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/crypto-randomuuid/validators.js"],"sourcesContent":["'use strict';\n\n// Polyfill relevant Node.js core validators and error types\n\nconst assert = require('assert');\nconst util = require('util');\n\n// Sorted by a rough estimate on most frequently used entries.\nconst kTypes = [\n  'string',\n  'function',\n  'number',\n  'object',\n  // Accept 'Function' and 'Object' as alternative to the lower cased version.\n  'Function',\n  'Object',\n  'boolean',\n  'bigint',\n  'symbol',\n];\n\nclass ERR_OPERATION_FAILED extends TypeError {\n  constructor(message) {\n    super(`Operation failed: ${message}`);\n    this.code = this.constructor.name;\n\n    Object.defineProperties(this, {\n      toString: {\n        value () {\n          return `${this.name} [${this.code}]: ${this.message}`;\n        },\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n    });\n  }\n}\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(name, expected, actual) {\n    super();\n\n    assert(typeof name === 'string', \"'name' must be a string\");\n    if (!Array.isArray(expected)) {\n      expected = [expected];\n    }\n\n    let msg = 'The ';\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg += `${name} `;\n    } else {\n      const type = name.includes('.') ? 'property' : 'argument';\n      msg += `\"${name}\" ${type} `;\n    }\n    msg += 'must be ';\n\n    const types = [];\n    const instances = [];\n    const other = [];\n\n    for (const value of expected) {\n      assert(typeof value === 'string',\n        'All expected entries have to be of type string');\n      if (kTypes.includes(value)) {\n        types.push(value.toLowerCase());\n      } else if (classRegExp.test(value)) {\n        instances.push(value);\n      } else {\n        assert(value !== 'object',\n          'The value \"object\" should be written as \"Object\"');\n        other.push(value);\n      }\n    }\n\n    // Special handle `object` in case other instances are allowed to outline\n    // the differences between each other.\n    if (instances.length > 0) {\n      const pos = types.indexOf('object');\n      if (pos !== -1) {\n        types.splice(pos, 1);\n        instances.push('Object');\n      }\n    }\n\n    if (types.length > 0) {\n      if (types.length > 2) {\n        const last = types.pop();\n        msg += `one of type ${types.join(', ')}, or ${last}`;\n      } else if (types.length === 2) {\n        msg += `one of type ${types[0]} or ${types[1]}`;\n      } else {\n        msg += `of type ${types[0]}`;\n      }\n      if (instances.length > 0 || other.length > 0)\n        msg += ' or ';\n    }\n\n    if (instances.length > 0) {\n      if (instances.length > 2) {\n        const last = instances.pop();\n        msg +=\n          `an instance of ${instances.join(', ')}, or ${last}`;\n      } else {\n        msg += `an instance of ${instances[0]}`;\n        if (instances.length === 2) {\n          msg += ` or ${instances[1]}`;\n        }\n      }\n      if (other.length > 0)\n        msg += ' or ';\n    }\n\n    if (other.length > 0) {\n      if (other.length > 2) {\n        const last = other.pop();\n        msg += `one of ${other.join(', ')}, or ${last}`;\n      } else if (other.length === 2) {\n        msg += `one of ${other[0]} or ${other[1]}`;\n      } else {\n        if (other[0].toLowerCase() !== other[0])\n          msg += 'an ';\n        msg += `${other[0]}`;\n      }\n    }\n\n    if (actual == null) {\n      msg += `. Received ${actual}`;\n    } else if (typeof actual === 'function' && actual.name) {\n      msg += `. Received function ${actual.name}`;\n    } else if (typeof actual === 'object') {\n      if (actual.constructor && actual.constructor.name) {\n        msg += `. Received an instance of ${actual.constructor.name}`;\n      } else {\n        const inspected = util.inspect(actual, { depth: -1 });\n        msg += `. Received ${inspected}`;\n      }\n    } else {\n      let inspected = util.inspect(actual, { colors: false });\n      if (inspected.length > 25) {\n        inspected = `${inspected.slice(0, 25)}...`;\n      }\n      msg += `. Received type ${typeof actual} (${inspected})`;\n    }\n\n    this.code = this.constructor.name;\n\n    Object.defineProperties(this, {\n      message: {\n        value: msg,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n      toString: {\n        value() {\n          return `${this.name} [${this.code}]: ${this.message}`;\n        },\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n    });\n  }\n}\n\nfunction validateBoolean(value, name) {\n  if (typeof value !== 'boolean')\n    throw new ERR_INVALID_ARG_TYPE(name, 'boolean', value);\n}\n\nfunction validateObject(value, name, {\n  nullable = false,\n  allowArray = false,\n  allowFunction = false,\n} = {}) {\n  if ((!nullable && value === null) ||\n    (!allowArray && Array.isArray(value)) ||\n    (typeof value !== 'object' && (\n      !allowFunction || typeof value !== 'function'\n    ))) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);\n  }\n};\n\nmodule.exports = {\n  validateBoolean,\n  validateObject,\n  codes: {\n    ERR_OPERATION_FAILED\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}