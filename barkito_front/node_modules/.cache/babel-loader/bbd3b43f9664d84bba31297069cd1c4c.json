{"ast":null,"code":"'use strict';\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin');\n\nconst {\n  storage\n} = require('../../datadog-core');\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nconst {\n  TEXT_MAP\n} = require('../../../ext/formats');\n\nclass AmqplibPlugin extends Plugin {\n  static get name() {\n    return 'amqplib';\n  }\n\n  constructor() {\n    super(...arguments);\n    this.addSub(`apm:amqplib:command:start`, _ref => {\n      let {\n        channel,\n        method,\n        fields,\n        message\n      } = _ref;\n      const store = storage.getStore();\n      let childOf;\n\n      if (method === 'basic.deliver') {\n        childOf = extract(this.tracer, message);\n      } else {\n        fields.headers = fields.headers || {};\n        childOf = store ? store.span : store;\n      }\n\n      const span = this.tracer.startSpan('amqp.command', {\n        childOf,\n        tags: {\n          'service.name': this.config.service || `${this.tracer._service}-amqp`,\n          'resource.name': getResourceName(method, fields)\n        }\n      });\n\n      if (channel && channel.connection && channel.connection.stream) {\n        span.addTags({\n          'out.host': channel.connection.stream._host,\n          'out.port': channel.connection.stream.remotePort\n        });\n      }\n\n      const fieldNames = ['queue', 'exchange', 'routingKey', 'consumerTag', 'source', 'destination'];\n\n      switch (method) {\n        case 'basic.publish':\n          span.setTag('span.kind', 'producer');\n          break;\n\n        case 'basic.consume':\n        case 'basic.get':\n        case 'basic.deliver':\n          span.addTags({\n            'span.kind': 'consumer',\n            'span.type': 'worker'\n          });\n          break;\n\n        default:\n          span.setTag('span.kind', 'client');\n      }\n\n      fieldNames.forEach(field => {\n        fields[field] !== undefined && span.setTag(`amqp.${field}`, fields[field]);\n      });\n\n      if (method === 'basic.deliver') {\n        analyticsSampler.sample(span, this.config.measured, true);\n      } else {\n        this.tracer.inject(span, TEXT_MAP, fields.headers);\n        analyticsSampler.sample(span, this.config.measured);\n      }\n\n      this.enter(span, store);\n    });\n    this.addSub(`apm:amqplib:command:finish`, () => {\n      const span = storage.getStore().span;\n      span.finish();\n    });\n    this.addSub(`apm:amqplib:command:error`, err => {\n      const span = storage.getStore().span;\n      span.setTag('error', err);\n    });\n  }\n\n}\n\nfunction getResourceName(method) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return [method, fields.exchange, fields.routingKey, fields.queue, fields.source, fields.destination].filter(val => val).join(' ');\n}\n\nfunction extract(tracer, message) {\n  return message ? tracer.extract(TEXT_MAP, message.properties.headers) : null;\n}\n\nmodule.exports = AmqplibPlugin;","map":{"version":3,"names":["Plugin","require","storage","analyticsSampler","TEXT_MAP","AmqplibPlugin","name","constructor","addSub","channel","method","fields","message","store","getStore","childOf","extract","tracer","headers","span","startSpan","tags","config","service","_service","getResourceName","connection","stream","addTags","_host","remotePort","fieldNames","setTag","forEach","field","undefined","sample","measured","inject","enter","finish","err","exchange","routingKey","queue","source","destination","filter","val","join","properties","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-amqplib/src/index.js"],"sourcesContent":["'use strict'\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin')\nconst { storage } = require('../../datadog-core')\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\nconst { TEXT_MAP } = require('../../../ext/formats')\n\nclass AmqplibPlugin extends Plugin {\n  static get name () {\n    return 'amqplib'\n  }\n\n  constructor (...args) {\n    super(...args)\n\n    this.addSub(`apm:amqplib:command:start`, ({ channel, method, fields, message }) => {\n      const store = storage.getStore()\n      let childOf\n\n      if (method === 'basic.deliver') {\n        childOf = extract(this.tracer, message)\n      } else {\n        fields.headers = fields.headers || {}\n        childOf = store ? store.span : store\n      }\n\n      const span = this.tracer.startSpan('amqp.command', {\n        childOf,\n        tags: {\n          'service.name': this.config.service || `${this.tracer._service}-amqp`,\n          'resource.name': getResourceName(method, fields)\n        }\n      })\n\n      if (channel && channel.connection && channel.connection.stream) {\n        span.addTags({\n          'out.host': channel.connection.stream._host,\n          'out.port': channel.connection.stream.remotePort\n        })\n      }\n      const fieldNames = [\n        'queue',\n        'exchange',\n        'routingKey',\n        'consumerTag',\n        'source',\n        'destination'\n      ]\n\n      switch (method) {\n        case 'basic.publish':\n          span.setTag('span.kind', 'producer')\n          break\n        case 'basic.consume':\n        case 'basic.get':\n        case 'basic.deliver':\n          span.addTags({\n            'span.kind': 'consumer',\n            'span.type': 'worker'\n          })\n          break\n        default:\n          span.setTag('span.kind', 'client')\n      }\n\n      fieldNames.forEach(field => {\n        fields[field] !== undefined && span.setTag(`amqp.${field}`, fields[field])\n      })\n      if (method === 'basic.deliver') {\n        analyticsSampler.sample(span, this.config.measured, true)\n      } else {\n        this.tracer.inject(span, TEXT_MAP, fields.headers)\n        analyticsSampler.sample(span, this.config.measured)\n      }\n\n      this.enter(span, store)\n    })\n\n    this.addSub(`apm:amqplib:command:finish`, () => {\n      const span = storage.getStore().span\n      span.finish()\n    })\n\n    this.addSub(`apm:amqplib:command:error`, err => {\n      const span = storage.getStore().span\n      span.setTag('error', err)\n    })\n  }\n}\n\nfunction getResourceName (method, fields = {}) {\n  return [\n    method,\n    fields.exchange,\n    fields.routingKey,\n    fields.queue,\n    fields.source,\n    fields.destination\n  ].filter(val => val).join(' ')\n}\n\nfunction extract (tracer, message) {\n  return message\n    ? tracer.extract(TEXT_MAP, message.properties.headers)\n    : null\n}\n\nmodule.exports = AmqplibPlugin\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}