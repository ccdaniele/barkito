{"ast":null,"code":"\"use strict\";\n/*\n * Unless explicitly stated otherwise all files in this repository are licensed\n * under the Apache 2.0 license (see LICENSE).\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2020 Datadog, Inc.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogCollapsingHighestDenseDDSketch = exports.LogCollapsingLowestDenseDDSketch = exports.DDSketch = void 0;\n\nvar store_1 = require(\"./store\");\n\nvar mapping_1 = require(\"./mapping\");\n\nvar DEFAULT_RELATIVE_ACCURACY = 0.01;\nvar DEFAULT_BIN_LIMIT = 2048;\n/** Base class for DDSketch*/\n\nvar BaseDDSketch =\n/** @class */\nfunction () {\n  function BaseDDSketch(_a) {\n    var mapping = _a.mapping,\n        store = _a.store,\n        negativeStore = _a.negativeStore,\n        zeroCount = _a.zeroCount;\n    this.mapping = mapping;\n    this.store = store;\n    this.negativeStore = negativeStore;\n    this.zeroCount = zeroCount;\n    this.count = this.negativeStore.count + this.zeroCount + this.store.count;\n    this.min = Infinity;\n    this.max = -Infinity;\n    this.sum = 0;\n  }\n  /**\n   * Add a value to the sketch\n   *\n   * @param value The value to be added\n   * @param weight The amount to weight the value (default 1.0)\n   *\n   * @throws Error if `weight` is 0 or negative\n   */\n\n\n  BaseDDSketch.prototype.accept = function (value, weight) {\n    if (weight === void 0) {\n      weight = 1;\n    }\n\n    if (weight <= 0) {\n      throw Error('Weight must be a positive number');\n    }\n\n    if (value > this.mapping.minPossible) {\n      var key = this.mapping.key(value);\n      this.store.add(key, weight);\n    } else if (value < -this.mapping.minPossible) {\n      var key = this.mapping.key(-value);\n      this.negativeStore.add(key, weight);\n    } else {\n      this.zeroCount += weight;\n    }\n    /* Keep track of summary stats */\n\n\n    this.count += weight;\n    this.sum += value * weight;\n\n    if (value < this.min) {\n      this.min = value;\n    }\n\n    if (value > this.max) {\n      this.max = value;\n    }\n  };\n  /**\n   * Retrieve a value from the sketch at the quantile\n   *\n   * @param quantile A number between `0` and `1` (inclusive)\n   */\n\n\n  BaseDDSketch.prototype.getValueAtQuantile = function (quantile) {\n    if (quantile < 0 || quantile > 1 || this.count === 0) {\n      return NaN;\n    }\n\n    var rank = quantile * (this.count - 1);\n    var quantileValue = 0;\n\n    if (rank < this.negativeStore.count) {\n      var reversedRank = this.negativeStore.count - rank - 1;\n      var key = this.negativeStore.keyAtRank(reversedRank, false);\n      quantileValue = -this.mapping.value(key);\n    } else if (rank < this.zeroCount + this.negativeStore.count) {\n      return 0;\n    } else {\n      var key = this.store.keyAtRank(rank - this.zeroCount - this.negativeStore.count);\n      quantileValue = this.mapping.value(key);\n    }\n\n    return quantileValue;\n  };\n  /**\n   * Merge the contents of the parameter `sketch` into this sketch\n   *\n   * @param sketch The sketch to merge into the caller sketch\n   * @throws Error if the sketches were initialized with different `relativeAccuracy` values\n   */\n\n\n  BaseDDSketch.prototype.merge = function (sketch) {\n    if (!this.mergeable(sketch)) {\n      throw new Error('Cannot merge two DDSketches with different `relativeAccuracy` parameters');\n    }\n\n    if (sketch.count === 0) {\n      return;\n    }\n\n    if (this.count === 0) {\n      this._copy(sketch);\n\n      return;\n    }\n\n    this.store.merge(sketch.store);\n    /* Merge summary stats */\n\n    this.zeroCount += sketch.zeroCount;\n    this.count += sketch.count;\n    this.sum += sketch.sum;\n\n    if (sketch.min < this.min) {\n      this.min = sketch.min;\n    }\n\n    if (sketch.max > this.max) {\n      this.max = sketch.max;\n    }\n  };\n  /**\n   * Determine whether two sketches can be merged\n   *\n   * @param sketch The sketch to be merged into the caller sketch\n   */\n\n\n  BaseDDSketch.prototype.mergeable = function (sketch) {\n    return this.mapping.gamma === sketch.mapping.gamma;\n  };\n  /**\n   * Helper method to copy the contents of the parameter `store` into this store\n   * @see DDSketch.merge to merge two sketches safely\n   *\n   * @param store The store to be copied into the caller store\n   */\n\n\n  BaseDDSketch.prototype._copy = function (sketch) {\n    this.store.copy(sketch.store);\n    this.negativeStore.copy(sketch.negativeStore);\n    this.zeroCount = sketch.zeroCount;\n    this.min = sketch.min;\n    this.max = sketch.max;\n    this.count = sketch.count;\n    this.sum = sketch.sum;\n  };\n  /** Serialize a DDSketch to protobuf format */\n\n\n  BaseDDSketch.prototype.toProto = function () {\n    var ProtoDDSketch = require('./proto/compiled').DDSketch;\n\n    var message = ProtoDDSketch.create({\n      mapping: this.mapping.toProto(),\n      positiveValues: this.store.toProto(),\n      negativeValues: this.negativeStore.toProto(),\n      zeroCount: this.zeroCount\n    });\n    return ProtoDDSketch.encode(message).finish();\n  };\n  /**\n   * Deserialize a DDSketch from protobuf data\n   *\n   * Note: `fromProto` currently loses summary statistics for the original\n   * sketch (i.e. `min`, `max`)\n   *\n   * @param buffer Byte array containing DDSketch in protobuf format (from DDSketch.toProto)\n   */\n\n\n  BaseDDSketch.fromProto = function (buffer) {\n    var ProtoDDSketch = require('./proto/compiled').DDSketch;\n\n    var decoded = ProtoDDSketch.decode(buffer);\n    var mapping = mapping_1.KeyMapping.fromProto(decoded.mapping);\n    var store = store_1.DenseStore.fromProto(decoded.positiveValues);\n    var negativeStore = store_1.DenseStore.fromProto(decoded.negativeValues);\n    var zeroCount = decoded.zeroCount;\n    return new BaseDDSketch({\n      mapping: mapping,\n      store: store,\n      negativeStore: negativeStore,\n      zeroCount: zeroCount\n    });\n  };\n\n  return BaseDDSketch;\n}();\n\nvar defaultConfig = {\n  relativeAccuracy: DEFAULT_RELATIVE_ACCURACY\n};\n/** A quantile sketch with relative-error guarantees */\n\nvar DDSketch =\n/** @class */\nfunction (_super) {\n  __extends(DDSketch, _super);\n  /**\n   * Initialize a new DDSketch\n   *\n   * @param relativeAccuracy The accuracy guarantee of the sketch (default 0.01)\n   */\n\n\n  function DDSketch(_a) {\n    var _b = _a === void 0 ? defaultConfig : _a,\n        _c = _b.relativeAccuracy,\n        relativeAccuracy = _c === void 0 ? DEFAULT_RELATIVE_ACCURACY : _c;\n\n    var mapping = new mapping_1.LogarithmicMapping(relativeAccuracy);\n    var store = new store_1.DenseStore();\n    var negativeStore = new store_1.DenseStore();\n    return _super.call(this, {\n      mapping: mapping,\n      store: store,\n      negativeStore: negativeStore,\n      zeroCount: 0\n    }) || this;\n  }\n\n  return DDSketch;\n}(BaseDDSketch);\n\nexports.DDSketch = DDSketch;\n\nvar LogCollapsingLowestDenseDDSketch =\n/** @class */\nfunction (_super) {\n  __extends(LogCollapsingLowestDenseDDSketch, _super);\n  /**\n   * Initialize a new LogCollapsingLowestDenseDDSketch\n   *\n   * @param relativeAccuracy The accuracy guarantee of the sketch (default 0.01)\n   * @param binLimit Number of bins before lowest indices are collapsed (default 2048)\n   */\n\n\n  function LogCollapsingLowestDenseDDSketch(_a) {\n    var _b = _a === void 0 ? defaultConfig : _a,\n        _c = _b.relativeAccuracy,\n        relativeAccuracy = _c === void 0 ? DEFAULT_RELATIVE_ACCURACY : _c,\n        _d = _b.binLimit,\n        binLimit = _d === void 0 ? DEFAULT_BIN_LIMIT : _d;\n\n    var mapping = new mapping_1.LogarithmicMapping(relativeAccuracy);\n    var store = new store_1.CollapsingLowestDenseStore(binLimit);\n    var negativeStore = new store_1.CollapsingLowestDenseStore(binLimit);\n    return _super.call(this, {\n      mapping: mapping,\n      store: store,\n      negativeStore: negativeStore,\n      zeroCount: 0\n    }) || this;\n  }\n\n  return LogCollapsingLowestDenseDDSketch;\n}(BaseDDSketch);\n\nexports.LogCollapsingLowestDenseDDSketch = LogCollapsingLowestDenseDDSketch;\n\nvar LogCollapsingHighestDenseDDSketch =\n/** @class */\nfunction (_super) {\n  __extends(LogCollapsingHighestDenseDDSketch, _super);\n  /**\n   * Initialize a new LogCollapsingHighestDenseDDSketch\n   *\n   * @param relativeAccuracy The accuracy guarantee of the sketch (default 0.01)\n   * @param binLimit Number of bins before highest indices are collapsed (default 2048)\n   */\n\n\n  function LogCollapsingHighestDenseDDSketch(_a) {\n    var _b = _a === void 0 ? defaultConfig : _a,\n        _c = _b.relativeAccuracy,\n        relativeAccuracy = _c === void 0 ? DEFAULT_RELATIVE_ACCURACY : _c,\n        _d = _b.binLimit,\n        binLimit = _d === void 0 ? DEFAULT_BIN_LIMIT : _d;\n\n    var mapping = new mapping_1.LogarithmicMapping(relativeAccuracy);\n    var store = new store_1.CollapsingHighestDenseStore(binLimit);\n    var negativeStore = new store_1.CollapsingHighestDenseStore(binLimit);\n    return _super.call(this, {\n      mapping: mapping,\n      store: store,\n      negativeStore: negativeStore,\n      zeroCount: 0\n    }) || this;\n  }\n\n  return LogCollapsingHighestDenseDDSketch;\n}(BaseDDSketch);\n\nexports.LogCollapsingHighestDenseDDSketch = LogCollapsingHighestDenseDDSketch;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","LogCollapsingHighestDenseDDSketch","LogCollapsingLowestDenseDDSketch","DDSketch","store_1","require","mapping_1","DEFAULT_RELATIVE_ACCURACY","DEFAULT_BIN_LIMIT","BaseDDSketch","_a","mapping","store","negativeStore","zeroCount","count","min","Infinity","max","sum","accept","weight","Error","minPossible","key","add","getValueAtQuantile","quantile","NaN","rank","quantileValue","reversedRank","keyAtRank","merge","sketch","mergeable","_copy","gamma","copy","toProto","ProtoDDSketch","message","positiveValues","negativeValues","encode","finish","fromProto","buffer","decoded","decode","KeyMapping","DenseStore","defaultConfig","relativeAccuracy","_super","_b","_c","LogarithmicMapping","_d","binLimit","CollapsingLowestDenseStore","CollapsingHighestDenseStore"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/@datadog/sketches-js/dist/ddsketch/DDSketch.js"],"sourcesContent":["\"use strict\";\n/*\n * Unless explicitly stated otherwise all files in this repository are licensed\n * under the Apache 2.0 license (see LICENSE).\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2020 Datadog, Inc.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogCollapsingHighestDenseDDSketch = exports.LogCollapsingLowestDenseDDSketch = exports.DDSketch = void 0;\nvar store_1 = require(\"./store\");\nvar mapping_1 = require(\"./mapping\");\nvar DEFAULT_RELATIVE_ACCURACY = 0.01;\nvar DEFAULT_BIN_LIMIT = 2048;\n/** Base class for DDSketch*/\nvar BaseDDSketch = /** @class */ (function () {\n    function BaseDDSketch(_a) {\n        var mapping = _a.mapping, store = _a.store, negativeStore = _a.negativeStore, zeroCount = _a.zeroCount;\n        this.mapping = mapping;\n        this.store = store;\n        this.negativeStore = negativeStore;\n        this.zeroCount = zeroCount;\n        this.count =\n            this.negativeStore.count + this.zeroCount + this.store.count;\n        this.min = Infinity;\n        this.max = -Infinity;\n        this.sum = 0;\n    }\n    /**\n     * Add a value to the sketch\n     *\n     * @param value The value to be added\n     * @param weight The amount to weight the value (default 1.0)\n     *\n     * @throws Error if `weight` is 0 or negative\n     */\n    BaseDDSketch.prototype.accept = function (value, weight) {\n        if (weight === void 0) { weight = 1; }\n        if (weight <= 0) {\n            throw Error('Weight must be a positive number');\n        }\n        if (value > this.mapping.minPossible) {\n            var key = this.mapping.key(value);\n            this.store.add(key, weight);\n        }\n        else if (value < -this.mapping.minPossible) {\n            var key = this.mapping.key(-value);\n            this.negativeStore.add(key, weight);\n        }\n        else {\n            this.zeroCount += weight;\n        }\n        /* Keep track of summary stats */\n        this.count += weight;\n        this.sum += value * weight;\n        if (value < this.min) {\n            this.min = value;\n        }\n        if (value > this.max) {\n            this.max = value;\n        }\n    };\n    /**\n     * Retrieve a value from the sketch at the quantile\n     *\n     * @param quantile A number between `0` and `1` (inclusive)\n     */\n    BaseDDSketch.prototype.getValueAtQuantile = function (quantile) {\n        if (quantile < 0 || quantile > 1 || this.count === 0) {\n            return NaN;\n        }\n        var rank = quantile * (this.count - 1);\n        var quantileValue = 0;\n        if (rank < this.negativeStore.count) {\n            var reversedRank = this.negativeStore.count - rank - 1;\n            var key = this.negativeStore.keyAtRank(reversedRank, false);\n            quantileValue = -this.mapping.value(key);\n        }\n        else if (rank < this.zeroCount + this.negativeStore.count) {\n            return 0;\n        }\n        else {\n            var key = this.store.keyAtRank(rank - this.zeroCount - this.negativeStore.count);\n            quantileValue = this.mapping.value(key);\n        }\n        return quantileValue;\n    };\n    /**\n     * Merge the contents of the parameter `sketch` into this sketch\n     *\n     * @param sketch The sketch to merge into the caller sketch\n     * @throws Error if the sketches were initialized with different `relativeAccuracy` values\n     */\n    BaseDDSketch.prototype.merge = function (sketch) {\n        if (!this.mergeable(sketch)) {\n            throw new Error('Cannot merge two DDSketches with different `relativeAccuracy` parameters');\n        }\n        if (sketch.count === 0) {\n            return;\n        }\n        if (this.count === 0) {\n            this._copy(sketch);\n            return;\n        }\n        this.store.merge(sketch.store);\n        /* Merge summary stats */\n        this.zeroCount += sketch.zeroCount;\n        this.count += sketch.count;\n        this.sum += sketch.sum;\n        if (sketch.min < this.min) {\n            this.min = sketch.min;\n        }\n        if (sketch.max > this.max) {\n            this.max = sketch.max;\n        }\n    };\n    /**\n     * Determine whether two sketches can be merged\n     *\n     * @param sketch The sketch to be merged into the caller sketch\n     */\n    BaseDDSketch.prototype.mergeable = function (sketch) {\n        return this.mapping.gamma === sketch.mapping.gamma;\n    };\n    /**\n     * Helper method to copy the contents of the parameter `store` into this store\n     * @see DDSketch.merge to merge two sketches safely\n     *\n     * @param store The store to be copied into the caller store\n     */\n    BaseDDSketch.prototype._copy = function (sketch) {\n        this.store.copy(sketch.store);\n        this.negativeStore.copy(sketch.negativeStore);\n        this.zeroCount = sketch.zeroCount;\n        this.min = sketch.min;\n        this.max = sketch.max;\n        this.count = sketch.count;\n        this.sum = sketch.sum;\n    };\n    /** Serialize a DDSketch to protobuf format */\n    BaseDDSketch.prototype.toProto = function () {\n        var ProtoDDSketch = require('./proto/compiled').DDSketch;\n        var message = ProtoDDSketch.create({\n            mapping: this.mapping.toProto(),\n            positiveValues: this.store.toProto(),\n            negativeValues: this.negativeStore.toProto(),\n            zeroCount: this.zeroCount\n        });\n        return ProtoDDSketch.encode(message).finish();\n    };\n    /**\n     * Deserialize a DDSketch from protobuf data\n     *\n     * Note: `fromProto` currently loses summary statistics for the original\n     * sketch (i.e. `min`, `max`)\n     *\n     * @param buffer Byte array containing DDSketch in protobuf format (from DDSketch.toProto)\n     */\n    BaseDDSketch.fromProto = function (buffer) {\n        var ProtoDDSketch = require('./proto/compiled').DDSketch;\n        var decoded = ProtoDDSketch.decode(buffer);\n        var mapping = mapping_1.KeyMapping.fromProto(decoded.mapping);\n        var store = store_1.DenseStore.fromProto(decoded.positiveValues);\n        var negativeStore = store_1.DenseStore.fromProto(decoded.negativeValues);\n        var zeroCount = decoded.zeroCount;\n        return new BaseDDSketch({ mapping: mapping, store: store, negativeStore: negativeStore, zeroCount: zeroCount });\n    };\n    return BaseDDSketch;\n}());\nvar defaultConfig = {\n    relativeAccuracy: DEFAULT_RELATIVE_ACCURACY\n};\n/** A quantile sketch with relative-error guarantees */\nvar DDSketch = /** @class */ (function (_super) {\n    __extends(DDSketch, _super);\n    /**\n     * Initialize a new DDSketch\n     *\n     * @param relativeAccuracy The accuracy guarantee of the sketch (default 0.01)\n     */\n    function DDSketch(_a) {\n        var _b = _a === void 0 ? defaultConfig : _a, _c = _b.relativeAccuracy, relativeAccuracy = _c === void 0 ? DEFAULT_RELATIVE_ACCURACY : _c;\n        var mapping = new mapping_1.LogarithmicMapping(relativeAccuracy);\n        var store = new store_1.DenseStore();\n        var negativeStore = new store_1.DenseStore();\n        return _super.call(this, { mapping: mapping, store: store, negativeStore: negativeStore, zeroCount: 0 }) || this;\n    }\n    return DDSketch;\n}(BaseDDSketch));\nexports.DDSketch = DDSketch;\nvar LogCollapsingLowestDenseDDSketch = /** @class */ (function (_super) {\n    __extends(LogCollapsingLowestDenseDDSketch, _super);\n    /**\n     * Initialize a new LogCollapsingLowestDenseDDSketch\n     *\n     * @param relativeAccuracy The accuracy guarantee of the sketch (default 0.01)\n     * @param binLimit Number of bins before lowest indices are collapsed (default 2048)\n     */\n    function LogCollapsingLowestDenseDDSketch(_a) {\n        var _b = _a === void 0 ? defaultConfig : _a, _c = _b.relativeAccuracy, relativeAccuracy = _c === void 0 ? DEFAULT_RELATIVE_ACCURACY : _c, _d = _b.binLimit, binLimit = _d === void 0 ? DEFAULT_BIN_LIMIT : _d;\n        var mapping = new mapping_1.LogarithmicMapping(relativeAccuracy);\n        var store = new store_1.CollapsingLowestDenseStore(binLimit);\n        var negativeStore = new store_1.CollapsingLowestDenseStore(binLimit);\n        return _super.call(this, { mapping: mapping, store: store, negativeStore: negativeStore, zeroCount: 0 }) || this;\n    }\n    return LogCollapsingLowestDenseDDSketch;\n}(BaseDDSketch));\nexports.LogCollapsingLowestDenseDDSketch = LogCollapsingLowestDenseDDSketch;\nvar LogCollapsingHighestDenseDDSketch = /** @class */ (function (_super) {\n    __extends(LogCollapsingHighestDenseDDSketch, _super);\n    /**\n     * Initialize a new LogCollapsingHighestDenseDDSketch\n     *\n     * @param relativeAccuracy The accuracy guarantee of the sketch (default 0.01)\n     * @param binLimit Number of bins before highest indices are collapsed (default 2048)\n     */\n    function LogCollapsingHighestDenseDDSketch(_a) {\n        var _b = _a === void 0 ? defaultConfig : _a, _c = _b.relativeAccuracy, relativeAccuracy = _c === void 0 ? DEFAULT_RELATIVE_ACCURACY : _c, _d = _b.binLimit, binLimit = _d === void 0 ? DEFAULT_BIN_LIMIT : _d;\n        var mapping = new mapping_1.LogarithmicMapping(relativeAccuracy);\n        var store = new store_1.CollapsingHighestDenseStore(binLimit);\n        var negativeStore = new store_1.CollapsingHighestDenseStore(binLimit);\n        return _super.call(this, { mapping: mapping, store: store, negativeStore: negativeStore, zeroCount: 0 }) || this;\n    }\n    return LogCollapsingHighestDenseDDSketch;\n}(BaseDDSketch));\nexports.LogCollapsingHighestDenseDDSketch = LogCollapsingHighestDenseDDSketch;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}