{"ast":null,"code":"'use strict';\n\nconst {\n  channel,\n  addHook\n} = require('./helpers/instrument');\n\nconst shimmer = require('../../datadog-shimmer');\n\nconst patched = new WeakSet();\naddHook({\n  name: 'winston',\n  file: 'lib/winston/logger.js',\n  versions: ['>=3']\n}, Logger => {\n  const logCh = channel('apm:winston:log');\n  shimmer.wrap(Logger.prototype, 'write', write => {\n    return function wrappedWrite(chunk, enc, cb) {\n      if (logCh.hasSubscribers) {\n        const payload = {\n          message: chunk\n        };\n        logCh.publish(payload);\n        arguments[0] = payload.message;\n      }\n\n      return write.apply(this, arguments);\n    };\n  });\n  return Logger;\n});\naddHook({\n  name: 'winston',\n  file: 'lib/winston/logger.js',\n  versions: ['1', '2']\n}, logger => {\n  const logCh = channel('apm:winston:log');\n\n  if (logger.Logger.prototype.configure) {\n    shimmer.wrap(logger.Logger.prototype, 'configure', configure => wrapMethod(configure, logCh));\n  }\n\n  shimmer.wrap(logger.Logger.prototype, 'add', configure => wrapMethod(configure, logCh));\n  return logger;\n});\n\nfunction wrapMethod(method, logCh) {\n  return function methodWithTrace() {\n    const result = method.apply(this, arguments);\n\n    if (logCh.hasSubscribers) {\n      for (const name in this.transports) {\n        const transport = this.transports[name];\n        if (patched.has(transport) || typeof transport.log !== 'function') continue;\n        const log = transport.log;\n\n        transport.log = function wrappedLog(level, msg, meta, callback) {\n          const payload = {\n            message: meta || {}\n          };\n          logCh.publish(payload);\n          arguments[2] = payload.message;\n          log.apply(this, arguments);\n        };\n\n        patched.add(transport);\n      }\n    }\n\n    return result;\n  };\n}","map":{"version":3,"names":["channel","addHook","require","shimmer","patched","WeakSet","name","file","versions","Logger","logCh","wrap","prototype","write","wrappedWrite","chunk","enc","cb","hasSubscribers","payload","message","publish","arguments","apply","logger","configure","wrapMethod","method","methodWithTrace","result","transports","transport","has","log","wrappedLog","level","msg","meta","callback","add"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-instrumentations/src/winston.js"],"sourcesContent":["'use strict'\n\nconst {\n  channel,\n  addHook\n} = require('./helpers/instrument')\nconst shimmer = require('../../datadog-shimmer')\n\nconst patched = new WeakSet()\n\naddHook({ name: 'winston', file: 'lib/winston/logger.js', versions: ['>=3'] }, Logger => {\n  const logCh = channel('apm:winston:log')\n  shimmer.wrap(Logger.prototype, 'write', write => {\n    return function wrappedWrite (chunk, enc, cb) {\n      if (logCh.hasSubscribers) {\n        const payload = { message: chunk }\n        logCh.publish(payload)\n        arguments[0] = payload.message\n      }\n      return write.apply(this, arguments)\n    }\n  })\n  return Logger\n})\n\naddHook({ name: 'winston', file: 'lib/winston/logger.js', versions: ['1', '2'] }, logger => {\n  const logCh = channel('apm:winston:log')\n  if (logger.Logger.prototype.configure) {\n    shimmer.wrap(logger.Logger.prototype, 'configure', configure => wrapMethod(configure, logCh))\n  }\n  shimmer.wrap(logger.Logger.prototype, 'add', configure => wrapMethod(configure, logCh))\n  return logger\n})\n\nfunction wrapMethod (method, logCh) {\n  return function methodWithTrace () {\n    const result = method.apply(this, arguments)\n\n    if (logCh.hasSubscribers) {\n      for (const name in this.transports) {\n        const transport = this.transports[name]\n\n        if (patched.has(transport) || typeof transport.log !== 'function') continue\n\n        const log = transport.log\n        transport.log = function wrappedLog (level, msg, meta, callback) {\n          const payload = { message: meta || {} }\n          logCh.publish(payload)\n          arguments[2] = payload.message\n          log.apply(this, arguments)\n        }\n        patched.add(transport)\n      }\n    }\n    return result\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}