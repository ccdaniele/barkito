{"ast":null,"code":"'use strict';\n\nconst log = require('../../../dd-trace/src/log');\n\nconst BaseAwsSdkPlugin = require('../base');\n\nconst {\n  storage\n} = require('../../../datadog-core');\n\nclass Sqs extends BaseAwsSdkPlugin {\n  constructor() {\n    super(...arguments); //\n    // TODO(bengl) Find a way to create the response span tags without this WeakMap being populated\n    // in the base class\n\n    this.requestTags = new WeakMap();\n    this.addSub('apm:aws:response:start:sqs', obj => {\n      const {\n        request,\n        response\n      } = obj;\n      const store = storage.getStore();\n      const plugin = this;\n      const maybeChildOf = this.responseExtract(request.params, request.operation, response);\n\n      if (maybeChildOf) {\n        obj.needsFinish = true;\n        const options = {\n          childOf: maybeChildOf,\n          tags: Object.assign({}, this.requestTags.get(request) || {}, {\n            'span.kind': 'server'\n          })\n        };\n        const span = plugin.tracer.startSpan('aws.response', options);\n        this.enter(span, store);\n      }\n    });\n    this.addSub('apm:aws:response:finish:sqs', err => {\n      const {\n        span\n      } = storage.getStore();\n      this.finish(span, null, err);\n    });\n  }\n\n  isEnabled(request) {\n    // TODO(bengl) Figure out a way to make separate plugins for consumer and producer so that\n    // config can be isolated to `.configure()` instead of this whole isEnabled() thing.\n    const config = this.config;\n\n    switch (request.operation) {\n      case 'receiveMessage':\n        return config.consumer !== false;\n\n      case 'sendMessage':\n      case 'sendMessageBatch':\n        return config.producer !== false;\n\n      default:\n        return true;\n    }\n  }\n\n  generateTags(params, operation, response) {\n    const tags = {};\n    if (!params || !params.QueueName && !params.QueueUrl) return tags;\n    Object.assign(tags, {\n      'resource.name': `${operation} ${params.QueueName || params.QueueUrl}`,\n      'aws.sqs.queue_name': params.QueueName || params.QueueUrl\n    });\n\n    switch (operation) {\n      case 'receiveMessage':\n        tags['span.type'] = 'worker';\n        tags['span.kind'] = 'consumer';\n        break;\n\n      case 'sendMessage':\n      case 'sendMessageBatch':\n        tags['span.kind'] = 'producer';\n        break;\n    }\n\n    return tags;\n  }\n\n  responseExtract(params, operation, response) {\n    if (operation === 'receiveMessage') {\n      if ((!params.MaxNumberOfMessages || params.MaxNumberOfMessages === 1) && response && response.Messages && response.Messages[0] && response.Messages[0].MessageAttributes && response.Messages[0].MessageAttributes._datadog && response.Messages[0].MessageAttributes._datadog.StringValue) {\n        const textMap = response.Messages[0].MessageAttributes._datadog.StringValue;\n\n        try {\n          return this.tracer.extract('text_map', JSON.parse(textMap));\n        } catch (err) {\n          log.error(err);\n          return undefined;\n        }\n      }\n    }\n  }\n\n  requestInject(span, request) {\n    const operation = request.operation;\n\n    if (operation === 'sendMessage') {\n      if (!request.params) {\n        request.params = {};\n      }\n\n      if (!request.params.MessageAttributes) {\n        request.params.MessageAttributes = {};\n      } else if (Object.keys(request.params.MessageAttributes).length >= 10) {\n        // SQS quota\n        // TODO: add test when the test suite is fixed\n        return;\n      }\n\n      const ddInfo = {};\n      this.tracer.inject(span, 'text_map', ddInfo);\n      request.params.MessageAttributes._datadog = {\n        DataType: 'String',\n        StringValue: JSON.stringify(ddInfo)\n      };\n    }\n  }\n\n}\n\nmodule.exports = Sqs;","map":{"version":3,"names":["log","require","BaseAwsSdkPlugin","storage","Sqs","constructor","requestTags","WeakMap","addSub","obj","request","response","store","getStore","plugin","maybeChildOf","responseExtract","params","operation","needsFinish","options","childOf","tags","Object","assign","get","span","tracer","startSpan","enter","err","finish","isEnabled","config","consumer","producer","generateTags","QueueName","QueueUrl","MaxNumberOfMessages","Messages","MessageAttributes","_datadog","StringValue","textMap","extract","JSON","parse","error","undefined","requestInject","keys","length","ddInfo","inject","DataType","stringify","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-aws-sdk/src/services/sqs.js"],"sourcesContent":["'use strict'\n\nconst log = require('../../../dd-trace/src/log')\nconst BaseAwsSdkPlugin = require('../base')\nconst { storage } = require('../../../datadog-core')\n\nclass Sqs extends BaseAwsSdkPlugin {\n  constructor (...args) {\n    super(...args)\n    //\n    // TODO(bengl) Find a way to create the response span tags without this WeakMap being populated\n    // in the base class\n    this.requestTags = new WeakMap()\n\n    this.addSub('apm:aws:response:start:sqs', obj => {\n      const { request, response } = obj\n      const store = storage.getStore()\n      const plugin = this\n      const maybeChildOf = this.responseExtract(request.params, request.operation, response)\n      if (maybeChildOf) {\n        obj.needsFinish = true\n        const options = {\n          childOf: maybeChildOf,\n          tags: Object.assign(\n            {},\n            this.requestTags.get(request) || {},\n            { 'span.kind': 'server' }\n          )\n        }\n        const span = plugin.tracer.startSpan('aws.response', options)\n        this.enter(span, store)\n      }\n    })\n\n    this.addSub('apm:aws:response:finish:sqs', err => {\n      const { span } = storage.getStore()\n      this.finish(span, null, err)\n    })\n  }\n\n  isEnabled (request) {\n    // TODO(bengl) Figure out a way to make separate plugins for consumer and producer so that\n    // config can be isolated to `.configure()` instead of this whole isEnabled() thing.\n    const config = this.config\n    switch (request.operation) {\n      case 'receiveMessage':\n        return config.consumer !== false\n      case 'sendMessage':\n      case 'sendMessageBatch':\n        return config.producer !== false\n      default:\n        return true\n    }\n  }\n\n  generateTags (params, operation, response) {\n    const tags = {}\n\n    if (!params || (!params.QueueName && !params.QueueUrl)) return tags\n\n    Object.assign(tags, {\n      'resource.name': `${operation} ${params.QueueName || params.QueueUrl}`,\n      'aws.sqs.queue_name': params.QueueName || params.QueueUrl\n    })\n\n    switch (operation) {\n      case 'receiveMessage':\n        tags['span.type'] = 'worker'\n        tags['span.kind'] = 'consumer'\n        break\n      case 'sendMessage':\n      case 'sendMessageBatch':\n        tags['span.kind'] = 'producer'\n        break\n    }\n\n    return tags\n  }\n\n  responseExtract (params, operation, response) {\n    if (operation === 'receiveMessage') {\n      if (\n        (!params.MaxNumberOfMessages || params.MaxNumberOfMessages === 1) &&\n        response &&\n        response.Messages &&\n        response.Messages[0] &&\n        response.Messages[0].MessageAttributes &&\n        response.Messages[0].MessageAttributes._datadog &&\n        response.Messages[0].MessageAttributes._datadog.StringValue\n      ) {\n        const textMap = response.Messages[0].MessageAttributes._datadog.StringValue\n        try {\n          return this.tracer.extract('text_map', JSON.parse(textMap))\n        } catch (err) {\n          log.error(err)\n          return undefined\n        }\n      }\n    }\n  }\n\n  requestInject (span, request) {\n    const operation = request.operation\n    if (operation === 'sendMessage') {\n      if (!request.params) {\n        request.params = {}\n      }\n      if (!request.params.MessageAttributes) {\n        request.params.MessageAttributes = {}\n      } else if (Object.keys(request.params.MessageAttributes).length >= 10) { // SQS quota\n        // TODO: add test when the test suite is fixed\n        return\n      }\n      const ddInfo = {}\n      this.tracer.inject(span, 'text_map', ddInfo)\n      request.params.MessageAttributes._datadog = {\n        DataType: 'String',\n        StringValue: JSON.stringify(ddInfo)\n      }\n    }\n  }\n}\n\nmodule.exports = Sqs\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}