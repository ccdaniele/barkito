{"ast":null,"code":"const URL = require('url').URL;\n\nconst {\n  GIT_BRANCH,\n  GIT_COMMIT_SHA,\n  GIT_TAG,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  GIT_COMMIT_MESSAGE,\n  GIT_COMMIT_AUTHOR_DATE,\n  GIT_REPOSITORY_URL,\n  CI_PIPELINE_ID,\n  CI_PIPELINE_NAME,\n  CI_PIPELINE_NUMBER,\n  CI_PIPELINE_URL,\n  CI_PROVIDER_NAME,\n  CI_WORKSPACE_PATH,\n  CI_JOB_URL,\n  CI_JOB_NAME,\n  CI_STAGE_NAME,\n  CI_ENV_VARS\n} = require('./tags'); // Receives a string with the form 'John Doe <john.doe@gmail.com>'\n// and returns { name: 'John Doe', email: 'john.doe@gmail.com' }\n\n\nfunction parseEmailAndName(emailAndName) {\n  if (!emailAndName) {\n    return {\n      name: '',\n      email: ''\n    };\n  }\n\n  let name = '';\n  let email = '';\n  const matchNameAndEmail = emailAndName.match(/(?:\"?([^\"]*)\"?\\s)?(?:<?(.+@[^>]+)>?)/);\n\n  if (matchNameAndEmail) {\n    name = matchNameAndEmail[1];\n    email = matchNameAndEmail[2];\n  }\n\n  return {\n    name,\n    email\n  };\n}\n\nfunction removeEmptyValues(tags) {\n  return Object.keys(tags).reduce((filteredTags, tag) => {\n    if (!tags[tag]) {\n      return filteredTags;\n    }\n\n    return { ...filteredTags,\n      [tag]: tags[tag]\n    };\n  }, {});\n}\n\nfunction normalizeTag(targetTags, tagKey, normalize) {\n  if (targetTags[tagKey]) {\n    targetTags[tagKey] = normalize(targetTags[tagKey]);\n  }\n}\n\nfunction normalizeRef(ref) {\n  if (!ref) {\n    return ref;\n  }\n\n  return ref.replace(/origin\\/|refs\\/heads\\/|tags\\//gm, '');\n}\n\nfunction filterSensitiveInfoFromRepository(repositoryUrl) {\n  if (repositoryUrl.startsWith('git@')) {\n    return repositoryUrl;\n  }\n\n  try {\n    const {\n      protocol,\n      hostname,\n      pathname\n    } = new URL(repositoryUrl);\n    return `${protocol}//${hostname}${pathname}`;\n  } catch (e) {\n    return repositoryUrl;\n  }\n}\n\nfunction resolveTilde(filePath) {\n  if (!filePath || typeof filePath !== 'string') {\n    return '';\n  } // '~/folder/path' or '~'\n\n\n  if (filePath[0] === '~' && (filePath[1] === '/' || filePath.length === 1)) {\n    return filePath.replace('~', process.env.HOME);\n  }\n\n  return filePath;\n}\n\nmodule.exports = {\n  normalizeRef,\n\n  getCIMetadata() {\n    const {\n      env\n    } = process;\n    let tags = {};\n\n    if (env.JENKINS_URL) {\n      const {\n        WORKSPACE,\n        BUILD_TAG,\n        JOB_NAME,\n        BUILD_NUMBER,\n        BUILD_URL,\n        GIT_BRANCH: JENKINS_GIT_BRANCH,\n        GIT_COMMIT: JENKINS_GIT_COMMIT,\n        GIT_URL: JENKINS_GIT_REPOSITORY_URL,\n        GIT_URL_1: JENKINS_GIT_REPOSITORY_URL_1,\n        DD_CUSTOM_TRACE_ID\n      } = env;\n      tags = {\n        [CI_PIPELINE_ID]: BUILD_TAG,\n        [CI_PIPELINE_NUMBER]: BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BUILD_URL,\n        [CI_PROVIDER_NAME]: 'jenkins',\n        [GIT_COMMIT_SHA]: JENKINS_GIT_COMMIT,\n        [GIT_REPOSITORY_URL]: JENKINS_GIT_REPOSITORY_URL || JENKINS_GIT_REPOSITORY_URL_1,\n        [CI_WORKSPACE_PATH]: WORKSPACE,\n        [CI_ENV_VARS]: JSON.stringify({\n          DD_CUSTOM_TRACE_ID\n        })\n      };\n      const isTag = JENKINS_GIT_BRANCH && JENKINS_GIT_BRANCH.includes('tags');\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH;\n      const ref = normalizeRef(JENKINS_GIT_BRANCH);\n      tags[refKey] = ref;\n      let finalPipelineName = '';\n\n      if (JOB_NAME) {\n        // Job names can contain parameters, e.g. jobName/KEY1=VALUE1,KEY2=VALUE2/branchName\n        const jobNameAndParams = JOB_NAME.split('/');\n\n        if (jobNameAndParams.length > 1 && jobNameAndParams[1].includes('=')) {\n          finalPipelineName = jobNameAndParams[0];\n        } else {\n          finalPipelineName = JOB_NAME.replace(`/${ref}`, '');\n        }\n\n        tags[CI_PIPELINE_NAME] = finalPipelineName;\n      }\n    }\n\n    if (env.GITLAB_CI) {\n      const {\n        CI_PIPELINE_ID: GITLAB_PIPELINE_ID,\n        CI_PROJECT_PATH,\n        CI_PIPELINE_IID,\n        CI_PIPELINE_URL: GITLAB_PIPELINE_URL,\n        CI_PROJECT_DIR,\n        CI_COMMIT_REF_NAME,\n        CI_COMMIT_TAG,\n        CI_COMMIT_SHA,\n        CI_REPOSITORY_URL,\n        CI_JOB_URL: GITLAB_CI_JOB_URL,\n        CI_JOB_STAGE,\n        CI_JOB_NAME: GITLAB_CI_JOB_NAME,\n        CI_COMMIT_MESSAGE,\n        CI_COMMIT_TIMESTAMP,\n        CI_COMMIT_AUTHOR,\n        CI_PROJECT_URL: GITLAB_PROJECT_URL,\n        CI_JOB_ID: GITLAB_CI_JOB_ID\n      } = env;\n      const {\n        name,\n        email\n      } = parseEmailAndName(CI_COMMIT_AUTHOR);\n      tags = {\n        [CI_PIPELINE_ID]: GITLAB_PIPELINE_ID,\n        [CI_PIPELINE_NAME]: CI_PROJECT_PATH,\n        [CI_PIPELINE_NUMBER]: CI_PIPELINE_IID,\n        [CI_PROVIDER_NAME]: 'gitlab',\n        [GIT_COMMIT_SHA]: CI_COMMIT_SHA,\n        [GIT_REPOSITORY_URL]: CI_REPOSITORY_URL,\n        [CI_JOB_URL]: GITLAB_CI_JOB_URL,\n        [GIT_TAG]: CI_COMMIT_TAG,\n        [GIT_BRANCH]: CI_COMMIT_REF_NAME,\n        [CI_WORKSPACE_PATH]: CI_PROJECT_DIR,\n        [CI_PIPELINE_URL]: GITLAB_PIPELINE_URL && GITLAB_PIPELINE_URL.replace('/-/pipelines/', '/pipelines/'),\n        [CI_STAGE_NAME]: CI_JOB_STAGE,\n        [CI_JOB_NAME]: GITLAB_CI_JOB_NAME,\n        [GIT_COMMIT_MESSAGE]: CI_COMMIT_MESSAGE,\n        [GIT_COMMIT_AUTHOR_NAME]: name,\n        [GIT_COMMIT_AUTHOR_EMAIL]: email,\n        [GIT_COMMIT_AUTHOR_DATE]: CI_COMMIT_TIMESTAMP,\n        [CI_ENV_VARS]: JSON.stringify({\n          CI_PROJECT_URL: GITLAB_PROJECT_URL,\n          CI_PIPELINE_ID: GITLAB_PIPELINE_ID,\n          CI_JOB_ID: GITLAB_CI_JOB_ID\n        })\n      };\n    }\n\n    if (env.CIRCLECI) {\n      const {\n        CIRCLE_WORKFLOW_ID,\n        CIRCLE_PROJECT_REPONAME,\n        CIRCLE_BUILD_URL,\n        CIRCLE_WORKING_DIRECTORY,\n        CIRCLE_BRANCH,\n        CIRCLE_TAG,\n        CIRCLE_SHA1,\n        CIRCLE_REPOSITORY_URL,\n        CIRCLE_JOB,\n        CIRCLE_BUILD_NUM\n      } = env;\n      const pipelineUrl = `https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}`;\n      tags = {\n        [CI_PIPELINE_ID]: CIRCLE_WORKFLOW_ID,\n        [CI_PIPELINE_NAME]: CIRCLE_PROJECT_REPONAME,\n        [CI_PIPELINE_URL]: pipelineUrl,\n        [CI_JOB_NAME]: CIRCLE_JOB,\n        [CI_PROVIDER_NAME]: 'circleci',\n        [GIT_COMMIT_SHA]: CIRCLE_SHA1,\n        [GIT_REPOSITORY_URL]: CIRCLE_REPOSITORY_URL,\n        [CI_JOB_URL]: CIRCLE_BUILD_URL,\n        [CI_WORKSPACE_PATH]: CIRCLE_WORKING_DIRECTORY,\n        [CIRCLE_TAG ? GIT_TAG : GIT_BRANCH]: CIRCLE_TAG || CIRCLE_BRANCH,\n        [CI_ENV_VARS]: JSON.stringify({\n          CIRCLE_WORKFLOW_ID,\n          CIRCLE_BUILD_NUM\n        })\n      };\n    }\n\n    if (env.GITHUB_ACTIONS || env.GITHUB_ACTION) {\n      const {\n        GITHUB_RUN_ID,\n        GITHUB_WORKFLOW,\n        GITHUB_RUN_NUMBER,\n        GITHUB_WORKSPACE,\n        GITHUB_HEAD_REF,\n        GITHUB_REF,\n        GITHUB_SHA,\n        GITHUB_REPOSITORY,\n        GITHUB_SERVER_URL,\n        GITHUB_RUN_ATTEMPT\n      } = env;\n      const repositoryURL = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git`;\n      let pipelineURL = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}`;\n\n      if (GITHUB_RUN_ATTEMPT) {\n        pipelineURL = `${pipelineURL}/attempts/${GITHUB_RUN_ATTEMPT}`;\n      }\n\n      const jobUrl = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}/checks`;\n      const ref = GITHUB_HEAD_REF || GITHUB_REF || '';\n      const refKey = ref.includes('tags') ? GIT_TAG : GIT_BRANCH;\n      tags = {\n        [CI_PIPELINE_ID]: GITHUB_RUN_ID,\n        [CI_PIPELINE_NAME]: GITHUB_WORKFLOW,\n        [CI_PIPELINE_NUMBER]: GITHUB_RUN_NUMBER,\n        [CI_PIPELINE_URL]: pipelineURL,\n        [CI_PROVIDER_NAME]: 'github',\n        [GIT_COMMIT_SHA]: GITHUB_SHA,\n        [GIT_REPOSITORY_URL]: repositoryURL,\n        [CI_JOB_URL]: jobUrl,\n        [CI_WORKSPACE_PATH]: GITHUB_WORKSPACE,\n        [refKey]: ref,\n        [CI_ENV_VARS]: JSON.stringify({\n          GITHUB_SERVER_URL,\n          GITHUB_REPOSITORY,\n          GITHUB_RUN_ID,\n          GITHUB_RUN_ATTEMPT\n        })\n      };\n    }\n\n    if (env.APPVEYOR) {\n      const {\n        APPVEYOR_REPO_NAME,\n        APPVEYOR_REPO_PROVIDER,\n        APPVEYOR_BUILD_FOLDER,\n        APPVEYOR_BUILD_ID,\n        APPVEYOR_BUILD_NUMBER,\n        APPVEYOR_REPO_COMMIT,\n        APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH,\n        APPVEYOR_REPO_BRANCH,\n        APPVEYOR_REPO_TAG_NAME,\n        APPVEYOR_REPO_COMMIT_AUTHOR,\n        APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL,\n        APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED\n      } = env;\n      const pipelineUrl = `https://ci.appveyor.com/project/${APPVEYOR_REPO_NAME}/builds/${APPVEYOR_BUILD_ID}`;\n      tags = {\n        [CI_PROVIDER_NAME]: 'appveyor',\n        [CI_PIPELINE_URL]: pipelineUrl,\n        [CI_PIPELINE_ID]: APPVEYOR_BUILD_ID,\n        [CI_PIPELINE_NAME]: APPVEYOR_REPO_NAME,\n        [CI_PIPELINE_NUMBER]: APPVEYOR_BUILD_NUMBER,\n        [CI_JOB_URL]: pipelineUrl,\n        [CI_WORKSPACE_PATH]: APPVEYOR_BUILD_FOLDER,\n        [GIT_COMMIT_AUTHOR_NAME]: APPVEYOR_REPO_COMMIT_AUTHOR,\n        [GIT_COMMIT_AUTHOR_EMAIL]: APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL,\n        [GIT_COMMIT_MESSAGE]: APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED\n      };\n\n      if (APPVEYOR_REPO_PROVIDER === 'github') {\n        const refKey = APPVEYOR_REPO_TAG_NAME ? GIT_TAG : GIT_BRANCH;\n        const ref = APPVEYOR_REPO_TAG_NAME || APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH || APPVEYOR_REPO_BRANCH;\n        tags = { ...tags,\n          [GIT_REPOSITORY_URL]: `https://github.com/${APPVEYOR_REPO_NAME}.git`,\n          [GIT_COMMIT_SHA]: APPVEYOR_REPO_COMMIT,\n          [refKey]: ref\n        };\n      }\n    }\n\n    if (env.TF_BUILD) {\n      const {\n        BUILD_SOURCESDIRECTORY,\n        BUILD_BUILDID,\n        BUILD_DEFINITIONNAME,\n        SYSTEM_TEAMFOUNDATIONSERVERURI,\n        SYSTEM_TEAMPROJECTID,\n        SYSTEM_JOBID,\n        SYSTEM_TASKINSTANCEID,\n        SYSTEM_PULLREQUEST_SOURCEBRANCH,\n        BUILD_SOURCEBRANCH,\n        BUILD_SOURCEBRANCHNAME,\n        SYSTEM_PULLREQUEST_SOURCECOMMITID,\n        SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI,\n        BUILD_REPOSITORY_URI,\n        BUILD_SOURCEVERSION,\n        BUILD_REQUESTEDFORID,\n        BUILD_REQUESTEDFOREMAIL,\n        BUILD_SOURCEVERSIONMESSAGE,\n        SYSTEM_STAGEDISPLAYNAME,\n        SYSTEM_JOBDISPLAYNAME\n      } = env;\n      const ref = SYSTEM_PULLREQUEST_SOURCEBRANCH || BUILD_SOURCEBRANCH || BUILD_SOURCEBRANCHNAME;\n      const refKey = (ref || '').includes('tags') ? GIT_TAG : GIT_BRANCH;\n      tags = {\n        [CI_PROVIDER_NAME]: 'azurepipelines',\n        [CI_PIPELINE_ID]: BUILD_BUILDID,\n        [CI_PIPELINE_NAME]: BUILD_DEFINITIONNAME,\n        [CI_PIPELINE_NUMBER]: BUILD_BUILDID,\n        [GIT_COMMIT_SHA]: SYSTEM_PULLREQUEST_SOURCECOMMITID || BUILD_SOURCEVERSION,\n        [CI_WORKSPACE_PATH]: BUILD_SOURCESDIRECTORY,\n        [GIT_REPOSITORY_URL]: SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI || BUILD_REPOSITORY_URI,\n        [refKey]: ref,\n        [GIT_COMMIT_AUTHOR_NAME]: BUILD_REQUESTEDFORID,\n        [GIT_COMMIT_AUTHOR_EMAIL]: BUILD_REQUESTEDFOREMAIL,\n        [GIT_COMMIT_MESSAGE]: BUILD_SOURCEVERSIONMESSAGE,\n        [CI_STAGE_NAME]: SYSTEM_STAGEDISPLAYNAME,\n        [CI_JOB_NAME]: SYSTEM_JOBDISPLAYNAME\n      };\n\n      if (SYSTEM_TEAMFOUNDATIONSERVERURI && SYSTEM_TEAMPROJECTID && BUILD_BUILDID) {\n        const baseUrl = `${SYSTEM_TEAMFOUNDATIONSERVERURI}${SYSTEM_TEAMPROJECTID}/_build/results?buildId=${BUILD_BUILDID}`;\n        const pipelineUrl = baseUrl;\n        const jobUrl = `${baseUrl}&view=logs&j=${SYSTEM_JOBID}&t=${SYSTEM_TASKINSTANCEID}`;\n        tags = { ...tags,\n          [CI_PIPELINE_URL]: pipelineUrl,\n          [CI_JOB_URL]: jobUrl\n        };\n      }\n    }\n\n    if (env.BITBUCKET_COMMIT) {\n      const {\n        BITBUCKET_REPO_FULL_NAME,\n        BITBUCKET_BUILD_NUMBER,\n        BITBUCKET_BRANCH,\n        BITBUCKET_COMMIT,\n        BITBUCKET_GIT_SSH_ORIGIN,\n        BITBUCKET_TAG,\n        BITBUCKET_PIPELINE_UUID,\n        BITBUCKET_CLONE_DIR\n      } = env;\n      const url = `https://bitbucket.org/${BITBUCKET_REPO_FULL_NAME}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER}`;\n      tags = {\n        [CI_PROVIDER_NAME]: 'bitbucket',\n        [GIT_COMMIT_SHA]: BITBUCKET_COMMIT,\n        [CI_PIPELINE_NUMBER]: BITBUCKET_BUILD_NUMBER,\n        [CI_PIPELINE_NAME]: BITBUCKET_REPO_FULL_NAME,\n        [CI_JOB_URL]: url,\n        [CI_PIPELINE_URL]: url,\n        [GIT_BRANCH]: BITBUCKET_BRANCH,\n        [GIT_TAG]: BITBUCKET_TAG,\n        [GIT_REPOSITORY_URL]: BITBUCKET_GIT_SSH_ORIGIN,\n        [CI_WORKSPACE_PATH]: BITBUCKET_CLONE_DIR,\n        [CI_PIPELINE_ID]: BITBUCKET_PIPELINE_UUID && BITBUCKET_PIPELINE_UUID.replace(/{|}/gm, '')\n      };\n    }\n\n    if (env.BITRISE_BUILD_SLUG) {\n      const {\n        BITRISE_GIT_COMMIT,\n        GIT_CLONE_COMMIT_HASH,\n        BITRISEIO_GIT_BRANCH_DEST,\n        BITRISE_GIT_BRANCH,\n        BITRISE_BUILD_SLUG,\n        BITRISE_TRIGGERED_WORKFLOW_ID,\n        BITRISE_BUILD_NUMBER,\n        BITRISE_BUILD_URL,\n        BITRISE_SOURCE_DIR,\n        GIT_REPOSITORY_URL: BITRISE_GIT_REPOSITORY_URL,\n        BITRISE_GIT_TAG,\n        BITRISE_GIT_MESSAGE\n      } = env;\n      const isTag = !!BITRISE_GIT_TAG;\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH;\n      const ref = BITRISE_GIT_TAG || BITRISEIO_GIT_BRANCH_DEST || BITRISE_GIT_BRANCH;\n      tags = {\n        [CI_PROVIDER_NAME]: 'bitrise',\n        [CI_PIPELINE_ID]: BITRISE_BUILD_SLUG,\n        [CI_PIPELINE_NAME]: BITRISE_TRIGGERED_WORKFLOW_ID,\n        [CI_PIPELINE_NUMBER]: BITRISE_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BITRISE_BUILD_URL,\n        [GIT_COMMIT_SHA]: BITRISE_GIT_COMMIT || GIT_CLONE_COMMIT_HASH,\n        [GIT_REPOSITORY_URL]: BITRISE_GIT_REPOSITORY_URL,\n        [CI_WORKSPACE_PATH]: BITRISE_SOURCE_DIR,\n        [refKey]: ref,\n        [GIT_COMMIT_MESSAGE]: BITRISE_GIT_MESSAGE\n      };\n    }\n\n    if (env.BUILDKITE) {\n      const {\n        BUILDKITE_BRANCH,\n        BUILDKITE_COMMIT,\n        BUILDKITE_REPO,\n        BUILDKITE_TAG,\n        BUILDKITE_BUILD_ID,\n        BUILDKITE_PIPELINE_SLUG,\n        BUILDKITE_BUILD_NUMBER,\n        BUILDKITE_BUILD_URL,\n        BUILDKITE_JOB_ID,\n        BUILDKITE_BUILD_CHECKOUT_PATH,\n        BUILDKITE_BUILD_AUTHOR,\n        BUILDKITE_BUILD_AUTHOR_EMAIL,\n        BUILDKITE_MESSAGE\n      } = env;\n      const ref = BUILDKITE_TAG || BUILDKITE_BRANCH;\n      const refKey = BUILDKITE_TAG ? GIT_TAG : GIT_BRANCH;\n      tags = {\n        [CI_PROVIDER_NAME]: 'buildkite',\n        [CI_PIPELINE_ID]: BUILDKITE_BUILD_ID,\n        [CI_PIPELINE_NAME]: BUILDKITE_PIPELINE_SLUG,\n        [CI_PIPELINE_NUMBER]: BUILDKITE_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BUILDKITE_BUILD_URL,\n        [CI_JOB_URL]: `${BUILDKITE_BUILD_URL}#${BUILDKITE_JOB_ID}`,\n        [GIT_COMMIT_SHA]: BUILDKITE_COMMIT,\n        [CI_WORKSPACE_PATH]: BUILDKITE_BUILD_CHECKOUT_PATH,\n        [GIT_REPOSITORY_URL]: BUILDKITE_REPO,\n        [refKey]: ref,\n        [GIT_COMMIT_AUTHOR_NAME]: BUILDKITE_BUILD_AUTHOR,\n        [GIT_COMMIT_AUTHOR_EMAIL]: BUILDKITE_BUILD_AUTHOR_EMAIL,\n        [GIT_COMMIT_MESSAGE]: BUILDKITE_MESSAGE,\n        [CI_ENV_VARS]: JSON.stringify({\n          BUILDKITE_BUILD_ID,\n          BUILDKITE_JOB_ID\n        })\n      };\n    }\n\n    if (env.TRAVIS) {\n      const {\n        TRAVIS_PULL_REQUEST_BRANCH,\n        TRAVIS_BRANCH,\n        TRAVIS_COMMIT,\n        TRAVIS_REPO_SLUG,\n        TRAVIS_TAG,\n        TRAVIS_JOB_WEB_URL,\n        TRAVIS_BUILD_ID,\n        TRAVIS_BUILD_NUMBER,\n        TRAVIS_BUILD_WEB_URL,\n        TRAVIS_BUILD_DIR,\n        TRAVIS_COMMIT_MESSAGE\n      } = env;\n      const isTag = !!TRAVIS_TAG;\n      const ref = TRAVIS_TAG || TRAVIS_PULL_REQUEST_BRANCH || TRAVIS_BRANCH;\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH;\n      tags = {\n        [CI_PROVIDER_NAME]: 'travisci',\n        [CI_JOB_URL]: TRAVIS_JOB_WEB_URL,\n        [CI_PIPELINE_ID]: TRAVIS_BUILD_ID,\n        [CI_PIPELINE_NAME]: TRAVIS_REPO_SLUG,\n        [CI_PIPELINE_NUMBER]: TRAVIS_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: TRAVIS_BUILD_WEB_URL,\n        [GIT_COMMIT_SHA]: TRAVIS_COMMIT,\n        [GIT_REPOSITORY_URL]: `https://github.com/${TRAVIS_REPO_SLUG}.git`,\n        [CI_WORKSPACE_PATH]: TRAVIS_BUILD_DIR,\n        [refKey]: ref,\n        [GIT_COMMIT_MESSAGE]: TRAVIS_COMMIT_MESSAGE\n      };\n    }\n\n    normalizeTag(tags, CI_WORKSPACE_PATH, resolveTilde);\n    normalizeTag(tags, GIT_REPOSITORY_URL, filterSensitiveInfoFromRepository);\n    normalizeTag(tags, GIT_BRANCH, normalizeRef);\n    normalizeTag(tags, GIT_TAG, normalizeRef);\n    return removeEmptyValues(tags);\n  }\n\n};","map":{"version":3,"names":["URL","require","GIT_BRANCH","GIT_COMMIT_SHA","GIT_TAG","GIT_COMMIT_AUTHOR_EMAIL","GIT_COMMIT_AUTHOR_NAME","GIT_COMMIT_MESSAGE","GIT_COMMIT_AUTHOR_DATE","GIT_REPOSITORY_URL","CI_PIPELINE_ID","CI_PIPELINE_NAME","CI_PIPELINE_NUMBER","CI_PIPELINE_URL","CI_PROVIDER_NAME","CI_WORKSPACE_PATH","CI_JOB_URL","CI_JOB_NAME","CI_STAGE_NAME","CI_ENV_VARS","parseEmailAndName","emailAndName","name","email","matchNameAndEmail","match","removeEmptyValues","tags","Object","keys","reduce","filteredTags","tag","normalizeTag","targetTags","tagKey","normalize","normalizeRef","ref","replace","filterSensitiveInfoFromRepository","repositoryUrl","startsWith","protocol","hostname","pathname","e","resolveTilde","filePath","length","process","env","HOME","module","exports","getCIMetadata","JENKINS_URL","WORKSPACE","BUILD_TAG","JOB_NAME","BUILD_NUMBER","BUILD_URL","JENKINS_GIT_BRANCH","GIT_COMMIT","JENKINS_GIT_COMMIT","GIT_URL","JENKINS_GIT_REPOSITORY_URL","GIT_URL_1","JENKINS_GIT_REPOSITORY_URL_1","DD_CUSTOM_TRACE_ID","JSON","stringify","isTag","includes","refKey","finalPipelineName","jobNameAndParams","split","GITLAB_CI","GITLAB_PIPELINE_ID","CI_PROJECT_PATH","CI_PIPELINE_IID","GITLAB_PIPELINE_URL","CI_PROJECT_DIR","CI_COMMIT_REF_NAME","CI_COMMIT_TAG","CI_COMMIT_SHA","CI_REPOSITORY_URL","GITLAB_CI_JOB_URL","CI_JOB_STAGE","GITLAB_CI_JOB_NAME","CI_COMMIT_MESSAGE","CI_COMMIT_TIMESTAMP","CI_COMMIT_AUTHOR","CI_PROJECT_URL","GITLAB_PROJECT_URL","CI_JOB_ID","GITLAB_CI_JOB_ID","CIRCLECI","CIRCLE_WORKFLOW_ID","CIRCLE_PROJECT_REPONAME","CIRCLE_BUILD_URL","CIRCLE_WORKING_DIRECTORY","CIRCLE_BRANCH","CIRCLE_TAG","CIRCLE_SHA1","CIRCLE_REPOSITORY_URL","CIRCLE_JOB","CIRCLE_BUILD_NUM","pipelineUrl","GITHUB_ACTIONS","GITHUB_ACTION","GITHUB_RUN_ID","GITHUB_WORKFLOW","GITHUB_RUN_NUMBER","GITHUB_WORKSPACE","GITHUB_HEAD_REF","GITHUB_REF","GITHUB_SHA","GITHUB_REPOSITORY","GITHUB_SERVER_URL","GITHUB_RUN_ATTEMPT","repositoryURL","pipelineURL","jobUrl","APPVEYOR","APPVEYOR_REPO_NAME","APPVEYOR_REPO_PROVIDER","APPVEYOR_BUILD_FOLDER","APPVEYOR_BUILD_ID","APPVEYOR_BUILD_NUMBER","APPVEYOR_REPO_COMMIT","APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH","APPVEYOR_REPO_BRANCH","APPVEYOR_REPO_TAG_NAME","APPVEYOR_REPO_COMMIT_AUTHOR","APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL","APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED","TF_BUILD","BUILD_SOURCESDIRECTORY","BUILD_BUILDID","BUILD_DEFINITIONNAME","SYSTEM_TEAMFOUNDATIONSERVERURI","SYSTEM_TEAMPROJECTID","SYSTEM_JOBID","SYSTEM_TASKINSTANCEID","SYSTEM_PULLREQUEST_SOURCEBRANCH","BUILD_SOURCEBRANCH","BUILD_SOURCEBRANCHNAME","SYSTEM_PULLREQUEST_SOURCECOMMITID","SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI","BUILD_REPOSITORY_URI","BUILD_SOURCEVERSION","BUILD_REQUESTEDFORID","BUILD_REQUESTEDFOREMAIL","BUILD_SOURCEVERSIONMESSAGE","SYSTEM_STAGEDISPLAYNAME","SYSTEM_JOBDISPLAYNAME","baseUrl","BITBUCKET_COMMIT","BITBUCKET_REPO_FULL_NAME","BITBUCKET_BUILD_NUMBER","BITBUCKET_BRANCH","BITBUCKET_GIT_SSH_ORIGIN","BITBUCKET_TAG","BITBUCKET_PIPELINE_UUID","BITBUCKET_CLONE_DIR","url","BITRISE_BUILD_SLUG","BITRISE_GIT_COMMIT","GIT_CLONE_COMMIT_HASH","BITRISEIO_GIT_BRANCH_DEST","BITRISE_GIT_BRANCH","BITRISE_TRIGGERED_WORKFLOW_ID","BITRISE_BUILD_NUMBER","BITRISE_BUILD_URL","BITRISE_SOURCE_DIR","BITRISE_GIT_REPOSITORY_URL","BITRISE_GIT_TAG","BITRISE_GIT_MESSAGE","BUILDKITE","BUILDKITE_BRANCH","BUILDKITE_COMMIT","BUILDKITE_REPO","BUILDKITE_TAG","BUILDKITE_BUILD_ID","BUILDKITE_PIPELINE_SLUG","BUILDKITE_BUILD_NUMBER","BUILDKITE_BUILD_URL","BUILDKITE_JOB_ID","BUILDKITE_BUILD_CHECKOUT_PATH","BUILDKITE_BUILD_AUTHOR","BUILDKITE_BUILD_AUTHOR_EMAIL","BUILDKITE_MESSAGE","TRAVIS","TRAVIS_PULL_REQUEST_BRANCH","TRAVIS_BRANCH","TRAVIS_COMMIT","TRAVIS_REPO_SLUG","TRAVIS_TAG","TRAVIS_JOB_WEB_URL","TRAVIS_BUILD_ID","TRAVIS_BUILD_NUMBER","TRAVIS_BUILD_WEB_URL","TRAVIS_BUILD_DIR","TRAVIS_COMMIT_MESSAGE"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/plugins/util/ci.js"],"sourcesContent":["const URL = require('url').URL\n\nconst {\n  GIT_BRANCH,\n  GIT_COMMIT_SHA,\n  GIT_TAG,\n  GIT_COMMIT_AUTHOR_EMAIL,\n  GIT_COMMIT_AUTHOR_NAME,\n  GIT_COMMIT_MESSAGE,\n  GIT_COMMIT_AUTHOR_DATE,\n  GIT_REPOSITORY_URL,\n  CI_PIPELINE_ID,\n  CI_PIPELINE_NAME,\n  CI_PIPELINE_NUMBER,\n  CI_PIPELINE_URL,\n  CI_PROVIDER_NAME,\n  CI_WORKSPACE_PATH,\n  CI_JOB_URL,\n  CI_JOB_NAME,\n  CI_STAGE_NAME,\n  CI_ENV_VARS\n} = require('./tags')\n\n// Receives a string with the form 'John Doe <john.doe@gmail.com>'\n// and returns { name: 'John Doe', email: 'john.doe@gmail.com' }\nfunction parseEmailAndName (emailAndName) {\n  if (!emailAndName) {\n    return { name: '', email: '' }\n  }\n  let name = ''\n  let email = ''\n  const matchNameAndEmail = emailAndName.match(/(?:\"?([^\"]*)\"?\\s)?(?:<?(.+@[^>]+)>?)/)\n  if (matchNameAndEmail) {\n    name = matchNameAndEmail[1]\n    email = matchNameAndEmail[2]\n  }\n\n  return { name, email }\n}\n\nfunction removeEmptyValues (tags) {\n  return Object.keys(tags).reduce((filteredTags, tag) => {\n    if (!tags[tag]) {\n      return filteredTags\n    }\n    return {\n      ...filteredTags,\n      [tag]: tags[tag]\n    }\n  }, {})\n}\n\nfunction normalizeTag (targetTags, tagKey, normalize) {\n  if (targetTags[tagKey]) {\n    targetTags[tagKey] = normalize(targetTags[tagKey])\n  }\n}\n\nfunction normalizeRef (ref) {\n  if (!ref) {\n    return ref\n  }\n  return ref.replace(/origin\\/|refs\\/heads\\/|tags\\//gm, '')\n}\n\nfunction filterSensitiveInfoFromRepository (repositoryUrl) {\n  if (repositoryUrl.startsWith('git@')) {\n    return repositoryUrl\n  }\n\n  try {\n    const { protocol, hostname, pathname } = new URL(repositoryUrl)\n\n    return `${protocol}//${hostname}${pathname}`\n  } catch (e) {\n    return repositoryUrl\n  }\n}\n\nfunction resolveTilde (filePath) {\n  if (!filePath || typeof filePath !== 'string') {\n    return ''\n  }\n  // '~/folder/path' or '~'\n  if (filePath[0] === '~' && (filePath[1] === '/' || filePath.length === 1)) {\n    return filePath.replace('~', process.env.HOME)\n  }\n  return filePath\n}\n\nmodule.exports = {\n  normalizeRef,\n  getCIMetadata () {\n    const { env } = process\n\n    let tags = {}\n\n    if (env.JENKINS_URL) {\n      const {\n        WORKSPACE,\n        BUILD_TAG,\n        JOB_NAME,\n        BUILD_NUMBER,\n        BUILD_URL,\n        GIT_BRANCH: JENKINS_GIT_BRANCH,\n        GIT_COMMIT: JENKINS_GIT_COMMIT,\n        GIT_URL: JENKINS_GIT_REPOSITORY_URL,\n        GIT_URL_1: JENKINS_GIT_REPOSITORY_URL_1,\n        DD_CUSTOM_TRACE_ID\n      } = env\n\n      tags = {\n        [CI_PIPELINE_ID]: BUILD_TAG,\n        [CI_PIPELINE_NUMBER]: BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BUILD_URL,\n        [CI_PROVIDER_NAME]: 'jenkins',\n        [GIT_COMMIT_SHA]: JENKINS_GIT_COMMIT,\n        [GIT_REPOSITORY_URL]: JENKINS_GIT_REPOSITORY_URL || JENKINS_GIT_REPOSITORY_URL_1,\n        [CI_WORKSPACE_PATH]: WORKSPACE,\n        [CI_ENV_VARS]: JSON.stringify({ DD_CUSTOM_TRACE_ID })\n      }\n\n      const isTag = JENKINS_GIT_BRANCH && JENKINS_GIT_BRANCH.includes('tags')\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH\n      const ref = normalizeRef(JENKINS_GIT_BRANCH)\n\n      tags[refKey] = ref\n\n      let finalPipelineName = ''\n      if (JOB_NAME) {\n        // Job names can contain parameters, e.g. jobName/KEY1=VALUE1,KEY2=VALUE2/branchName\n        const jobNameAndParams = JOB_NAME.split('/')\n        if (jobNameAndParams.length > 1 && jobNameAndParams[1].includes('=')) {\n          finalPipelineName = jobNameAndParams[0]\n        } else {\n          finalPipelineName = JOB_NAME.replace(`/${ref}`, '')\n        }\n        tags[CI_PIPELINE_NAME] = finalPipelineName\n      }\n    }\n\n    if (env.GITLAB_CI) {\n      const {\n        CI_PIPELINE_ID: GITLAB_PIPELINE_ID,\n        CI_PROJECT_PATH,\n        CI_PIPELINE_IID,\n        CI_PIPELINE_URL: GITLAB_PIPELINE_URL,\n        CI_PROJECT_DIR,\n        CI_COMMIT_REF_NAME,\n        CI_COMMIT_TAG,\n        CI_COMMIT_SHA,\n        CI_REPOSITORY_URL,\n        CI_JOB_URL: GITLAB_CI_JOB_URL,\n        CI_JOB_STAGE,\n        CI_JOB_NAME: GITLAB_CI_JOB_NAME,\n        CI_COMMIT_MESSAGE,\n        CI_COMMIT_TIMESTAMP,\n        CI_COMMIT_AUTHOR,\n        CI_PROJECT_URL: GITLAB_PROJECT_URL,\n        CI_JOB_ID: GITLAB_CI_JOB_ID\n      } = env\n\n      const { name, email } = parseEmailAndName(CI_COMMIT_AUTHOR)\n\n      tags = {\n        [CI_PIPELINE_ID]: GITLAB_PIPELINE_ID,\n        [CI_PIPELINE_NAME]: CI_PROJECT_PATH,\n        [CI_PIPELINE_NUMBER]: CI_PIPELINE_IID,\n        [CI_PROVIDER_NAME]: 'gitlab',\n        [GIT_COMMIT_SHA]: CI_COMMIT_SHA,\n        [GIT_REPOSITORY_URL]: CI_REPOSITORY_URL,\n        [CI_JOB_URL]: GITLAB_CI_JOB_URL,\n        [GIT_TAG]: CI_COMMIT_TAG,\n        [GIT_BRANCH]: CI_COMMIT_REF_NAME,\n        [CI_WORKSPACE_PATH]: CI_PROJECT_DIR,\n        [CI_PIPELINE_URL]: GITLAB_PIPELINE_URL && GITLAB_PIPELINE_URL.replace('/-/pipelines/', '/pipelines/'),\n        [CI_STAGE_NAME]: CI_JOB_STAGE,\n        [CI_JOB_NAME]: GITLAB_CI_JOB_NAME,\n        [GIT_COMMIT_MESSAGE]: CI_COMMIT_MESSAGE,\n        [GIT_COMMIT_AUTHOR_NAME]: name,\n        [GIT_COMMIT_AUTHOR_EMAIL]: email,\n        [GIT_COMMIT_AUTHOR_DATE]: CI_COMMIT_TIMESTAMP,\n        [CI_ENV_VARS]: JSON.stringify({\n          CI_PROJECT_URL: GITLAB_PROJECT_URL,\n          CI_PIPELINE_ID: GITLAB_PIPELINE_ID,\n          CI_JOB_ID: GITLAB_CI_JOB_ID\n        })\n      }\n    }\n\n    if (env.CIRCLECI) {\n      const {\n        CIRCLE_WORKFLOW_ID,\n        CIRCLE_PROJECT_REPONAME,\n        CIRCLE_BUILD_URL,\n        CIRCLE_WORKING_DIRECTORY,\n        CIRCLE_BRANCH,\n        CIRCLE_TAG,\n        CIRCLE_SHA1,\n        CIRCLE_REPOSITORY_URL,\n        CIRCLE_JOB,\n        CIRCLE_BUILD_NUM\n      } = env\n\n      const pipelineUrl = `https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}`\n\n      tags = {\n        [CI_PIPELINE_ID]: CIRCLE_WORKFLOW_ID,\n        [CI_PIPELINE_NAME]: CIRCLE_PROJECT_REPONAME,\n        [CI_PIPELINE_URL]: pipelineUrl,\n        [CI_JOB_NAME]: CIRCLE_JOB,\n        [CI_PROVIDER_NAME]: 'circleci',\n        [GIT_COMMIT_SHA]: CIRCLE_SHA1,\n        [GIT_REPOSITORY_URL]: CIRCLE_REPOSITORY_URL,\n        [CI_JOB_URL]: CIRCLE_BUILD_URL,\n        [CI_WORKSPACE_PATH]: CIRCLE_WORKING_DIRECTORY,\n        [CIRCLE_TAG ? GIT_TAG : GIT_BRANCH]: CIRCLE_TAG || CIRCLE_BRANCH,\n        [CI_ENV_VARS]: JSON.stringify({\n          CIRCLE_WORKFLOW_ID,\n          CIRCLE_BUILD_NUM\n        })\n      }\n    }\n\n    if (env.GITHUB_ACTIONS || env.GITHUB_ACTION) {\n      const {\n        GITHUB_RUN_ID,\n        GITHUB_WORKFLOW,\n        GITHUB_RUN_NUMBER,\n        GITHUB_WORKSPACE,\n        GITHUB_HEAD_REF,\n        GITHUB_REF,\n        GITHUB_SHA,\n        GITHUB_REPOSITORY,\n        GITHUB_SERVER_URL,\n        GITHUB_RUN_ATTEMPT\n      } = env\n\n      const repositoryURL = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git`\n      let pipelineURL = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}`\n\n      if (GITHUB_RUN_ATTEMPT) {\n        pipelineURL = `${pipelineURL}/attempts/${GITHUB_RUN_ATTEMPT}`\n      }\n\n      const jobUrl = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}/checks`\n\n      const ref = GITHUB_HEAD_REF || GITHUB_REF || ''\n      const refKey = ref.includes('tags') ? GIT_TAG : GIT_BRANCH\n\n      tags = {\n        [CI_PIPELINE_ID]: GITHUB_RUN_ID,\n        [CI_PIPELINE_NAME]: GITHUB_WORKFLOW,\n        [CI_PIPELINE_NUMBER]: GITHUB_RUN_NUMBER,\n        [CI_PIPELINE_URL]: pipelineURL,\n        [CI_PROVIDER_NAME]: 'github',\n        [GIT_COMMIT_SHA]: GITHUB_SHA,\n        [GIT_REPOSITORY_URL]: repositoryURL,\n        [CI_JOB_URL]: jobUrl,\n        [CI_WORKSPACE_PATH]: GITHUB_WORKSPACE,\n        [refKey]: ref,\n        [CI_ENV_VARS]: JSON.stringify({\n          GITHUB_SERVER_URL,\n          GITHUB_REPOSITORY,\n          GITHUB_RUN_ID,\n          GITHUB_RUN_ATTEMPT\n        })\n      }\n    }\n\n    if (env.APPVEYOR) {\n      const {\n        APPVEYOR_REPO_NAME,\n        APPVEYOR_REPO_PROVIDER,\n        APPVEYOR_BUILD_FOLDER,\n        APPVEYOR_BUILD_ID,\n        APPVEYOR_BUILD_NUMBER,\n        APPVEYOR_REPO_COMMIT,\n        APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH,\n        APPVEYOR_REPO_BRANCH,\n        APPVEYOR_REPO_TAG_NAME,\n        APPVEYOR_REPO_COMMIT_AUTHOR,\n        APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL,\n        APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED\n      } = env\n\n      const pipelineUrl = `https://ci.appveyor.com/project/${APPVEYOR_REPO_NAME}/builds/${APPVEYOR_BUILD_ID}`\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'appveyor',\n        [CI_PIPELINE_URL]: pipelineUrl,\n        [CI_PIPELINE_ID]: APPVEYOR_BUILD_ID,\n        [CI_PIPELINE_NAME]: APPVEYOR_REPO_NAME,\n        [CI_PIPELINE_NUMBER]: APPVEYOR_BUILD_NUMBER,\n        [CI_JOB_URL]: pipelineUrl,\n        [CI_WORKSPACE_PATH]: APPVEYOR_BUILD_FOLDER,\n        [GIT_COMMIT_AUTHOR_NAME]: APPVEYOR_REPO_COMMIT_AUTHOR,\n        [GIT_COMMIT_AUTHOR_EMAIL]: APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL,\n        [GIT_COMMIT_MESSAGE]: APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED\n      }\n\n      if (APPVEYOR_REPO_PROVIDER === 'github') {\n        const refKey = APPVEYOR_REPO_TAG_NAME ? GIT_TAG : GIT_BRANCH\n        const ref = APPVEYOR_REPO_TAG_NAME || APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH || APPVEYOR_REPO_BRANCH\n        tags = {\n          ...tags,\n          [GIT_REPOSITORY_URL]: `https://github.com/${APPVEYOR_REPO_NAME}.git`,\n          [GIT_COMMIT_SHA]: APPVEYOR_REPO_COMMIT,\n          [refKey]: ref\n        }\n      }\n    }\n\n    if (env.TF_BUILD) {\n      const {\n        BUILD_SOURCESDIRECTORY,\n        BUILD_BUILDID,\n        BUILD_DEFINITIONNAME,\n        SYSTEM_TEAMFOUNDATIONSERVERURI,\n        SYSTEM_TEAMPROJECTID,\n        SYSTEM_JOBID,\n        SYSTEM_TASKINSTANCEID,\n        SYSTEM_PULLREQUEST_SOURCEBRANCH,\n        BUILD_SOURCEBRANCH,\n        BUILD_SOURCEBRANCHNAME,\n        SYSTEM_PULLREQUEST_SOURCECOMMITID,\n        SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI,\n        BUILD_REPOSITORY_URI,\n        BUILD_SOURCEVERSION,\n        BUILD_REQUESTEDFORID,\n        BUILD_REQUESTEDFOREMAIL,\n        BUILD_SOURCEVERSIONMESSAGE,\n        SYSTEM_STAGEDISPLAYNAME,\n        SYSTEM_JOBDISPLAYNAME\n      } = env\n\n      const ref = SYSTEM_PULLREQUEST_SOURCEBRANCH || BUILD_SOURCEBRANCH || BUILD_SOURCEBRANCHNAME\n      const refKey = (ref || '').includes('tags') ? GIT_TAG : GIT_BRANCH\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'azurepipelines',\n        [CI_PIPELINE_ID]: BUILD_BUILDID,\n        [CI_PIPELINE_NAME]: BUILD_DEFINITIONNAME,\n        [CI_PIPELINE_NUMBER]: BUILD_BUILDID,\n        [GIT_COMMIT_SHA]: SYSTEM_PULLREQUEST_SOURCECOMMITID || BUILD_SOURCEVERSION,\n        [CI_WORKSPACE_PATH]: BUILD_SOURCESDIRECTORY,\n        [GIT_REPOSITORY_URL]: SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI || BUILD_REPOSITORY_URI,\n        [refKey]: ref,\n        [GIT_COMMIT_AUTHOR_NAME]: BUILD_REQUESTEDFORID,\n        [GIT_COMMIT_AUTHOR_EMAIL]: BUILD_REQUESTEDFOREMAIL,\n        [GIT_COMMIT_MESSAGE]: BUILD_SOURCEVERSIONMESSAGE,\n        [CI_STAGE_NAME]: SYSTEM_STAGEDISPLAYNAME,\n        [CI_JOB_NAME]: SYSTEM_JOBDISPLAYNAME\n      }\n\n      if (SYSTEM_TEAMFOUNDATIONSERVERURI && SYSTEM_TEAMPROJECTID && BUILD_BUILDID) {\n        const baseUrl =\n          `${SYSTEM_TEAMFOUNDATIONSERVERURI}${SYSTEM_TEAMPROJECTID}/_build/results?buildId=${BUILD_BUILDID}`\n        const pipelineUrl = baseUrl\n        const jobUrl = `${baseUrl}&view=logs&j=${SYSTEM_JOBID}&t=${SYSTEM_TASKINSTANCEID}`\n\n        tags = {\n          ...tags,\n          [CI_PIPELINE_URL]: pipelineUrl,\n          [CI_JOB_URL]: jobUrl\n        }\n      }\n    }\n\n    if (env.BITBUCKET_COMMIT) {\n      const {\n        BITBUCKET_REPO_FULL_NAME,\n        BITBUCKET_BUILD_NUMBER,\n        BITBUCKET_BRANCH,\n        BITBUCKET_COMMIT,\n        BITBUCKET_GIT_SSH_ORIGIN,\n        BITBUCKET_TAG,\n        BITBUCKET_PIPELINE_UUID,\n        BITBUCKET_CLONE_DIR\n      } = env\n\n      const url =\n        `https://bitbucket.org/${BITBUCKET_REPO_FULL_NAME}/addon/pipelines/home#!/results/${BITBUCKET_BUILD_NUMBER}`\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'bitbucket',\n        [GIT_COMMIT_SHA]: BITBUCKET_COMMIT,\n        [CI_PIPELINE_NUMBER]: BITBUCKET_BUILD_NUMBER,\n        [CI_PIPELINE_NAME]: BITBUCKET_REPO_FULL_NAME,\n        [CI_JOB_URL]: url,\n        [CI_PIPELINE_URL]: url,\n        [GIT_BRANCH]: BITBUCKET_BRANCH,\n        [GIT_TAG]: BITBUCKET_TAG,\n        [GIT_REPOSITORY_URL]: BITBUCKET_GIT_SSH_ORIGIN,\n        [CI_WORKSPACE_PATH]: BITBUCKET_CLONE_DIR,\n        [CI_PIPELINE_ID]: BITBUCKET_PIPELINE_UUID && BITBUCKET_PIPELINE_UUID.replace(/{|}/gm, '')\n      }\n    }\n\n    if (env.BITRISE_BUILD_SLUG) {\n      const {\n        BITRISE_GIT_COMMIT,\n        GIT_CLONE_COMMIT_HASH,\n        BITRISEIO_GIT_BRANCH_DEST,\n        BITRISE_GIT_BRANCH,\n        BITRISE_BUILD_SLUG,\n        BITRISE_TRIGGERED_WORKFLOW_ID,\n        BITRISE_BUILD_NUMBER,\n        BITRISE_BUILD_URL,\n        BITRISE_SOURCE_DIR,\n        GIT_REPOSITORY_URL: BITRISE_GIT_REPOSITORY_URL,\n        BITRISE_GIT_TAG,\n        BITRISE_GIT_MESSAGE\n      } = env\n\n      const isTag = !!BITRISE_GIT_TAG\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH\n      const ref = BITRISE_GIT_TAG || BITRISEIO_GIT_BRANCH_DEST || BITRISE_GIT_BRANCH\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'bitrise',\n        [CI_PIPELINE_ID]: BITRISE_BUILD_SLUG,\n        [CI_PIPELINE_NAME]: BITRISE_TRIGGERED_WORKFLOW_ID,\n        [CI_PIPELINE_NUMBER]: BITRISE_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BITRISE_BUILD_URL,\n        [GIT_COMMIT_SHA]: BITRISE_GIT_COMMIT || GIT_CLONE_COMMIT_HASH,\n        [GIT_REPOSITORY_URL]: BITRISE_GIT_REPOSITORY_URL,\n        [CI_WORKSPACE_PATH]: BITRISE_SOURCE_DIR,\n        [refKey]: ref,\n        [GIT_COMMIT_MESSAGE]: BITRISE_GIT_MESSAGE\n      }\n    }\n\n    if (env.BUILDKITE) {\n      const {\n        BUILDKITE_BRANCH,\n        BUILDKITE_COMMIT,\n        BUILDKITE_REPO,\n        BUILDKITE_TAG,\n        BUILDKITE_BUILD_ID,\n        BUILDKITE_PIPELINE_SLUG,\n        BUILDKITE_BUILD_NUMBER,\n        BUILDKITE_BUILD_URL,\n        BUILDKITE_JOB_ID,\n        BUILDKITE_BUILD_CHECKOUT_PATH,\n        BUILDKITE_BUILD_AUTHOR,\n        BUILDKITE_BUILD_AUTHOR_EMAIL,\n        BUILDKITE_MESSAGE\n      } = env\n\n      const ref = BUILDKITE_TAG || BUILDKITE_BRANCH\n      const refKey = BUILDKITE_TAG ? GIT_TAG : GIT_BRANCH\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'buildkite',\n        [CI_PIPELINE_ID]: BUILDKITE_BUILD_ID,\n        [CI_PIPELINE_NAME]: BUILDKITE_PIPELINE_SLUG,\n        [CI_PIPELINE_NUMBER]: BUILDKITE_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: BUILDKITE_BUILD_URL,\n        [CI_JOB_URL]: `${BUILDKITE_BUILD_URL}#${BUILDKITE_JOB_ID}`,\n        [GIT_COMMIT_SHA]: BUILDKITE_COMMIT,\n        [CI_WORKSPACE_PATH]: BUILDKITE_BUILD_CHECKOUT_PATH,\n        [GIT_REPOSITORY_URL]: BUILDKITE_REPO,\n        [refKey]: ref,\n        [GIT_COMMIT_AUTHOR_NAME]: BUILDKITE_BUILD_AUTHOR,\n        [GIT_COMMIT_AUTHOR_EMAIL]: BUILDKITE_BUILD_AUTHOR_EMAIL,\n        [GIT_COMMIT_MESSAGE]: BUILDKITE_MESSAGE,\n        [CI_ENV_VARS]: JSON.stringify({\n          BUILDKITE_BUILD_ID,\n          BUILDKITE_JOB_ID\n        })\n      }\n    }\n\n    if (env.TRAVIS) {\n      const {\n        TRAVIS_PULL_REQUEST_BRANCH,\n        TRAVIS_BRANCH,\n        TRAVIS_COMMIT,\n        TRAVIS_REPO_SLUG,\n        TRAVIS_TAG,\n        TRAVIS_JOB_WEB_URL,\n        TRAVIS_BUILD_ID,\n        TRAVIS_BUILD_NUMBER,\n        TRAVIS_BUILD_WEB_URL,\n        TRAVIS_BUILD_DIR,\n        TRAVIS_COMMIT_MESSAGE\n      } = env\n\n      const isTag = !!TRAVIS_TAG\n      const ref = TRAVIS_TAG || TRAVIS_PULL_REQUEST_BRANCH || TRAVIS_BRANCH\n      const refKey = isTag ? GIT_TAG : GIT_BRANCH\n\n      tags = {\n        [CI_PROVIDER_NAME]: 'travisci',\n        [CI_JOB_URL]: TRAVIS_JOB_WEB_URL,\n        [CI_PIPELINE_ID]: TRAVIS_BUILD_ID,\n        [CI_PIPELINE_NAME]: TRAVIS_REPO_SLUG,\n        [CI_PIPELINE_NUMBER]: TRAVIS_BUILD_NUMBER,\n        [CI_PIPELINE_URL]: TRAVIS_BUILD_WEB_URL,\n        [GIT_COMMIT_SHA]: TRAVIS_COMMIT,\n        [GIT_REPOSITORY_URL]: `https://github.com/${TRAVIS_REPO_SLUG}.git`,\n        [CI_WORKSPACE_PATH]: TRAVIS_BUILD_DIR,\n        [refKey]: ref,\n        [GIT_COMMIT_MESSAGE]: TRAVIS_COMMIT_MESSAGE\n      }\n    }\n\n    normalizeTag(tags, CI_WORKSPACE_PATH, resolveTilde)\n    normalizeTag(tags, GIT_REPOSITORY_URL, filterSensitiveInfoFromRepository)\n    normalizeTag(tags, GIT_BRANCH, normalizeRef)\n    normalizeTag(tags, GIT_TAG, normalizeRef)\n\n    return removeEmptyValues(tags)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}