{"ast":null,"code":"'use strict';\n\nconst {\n  channel\n} = require('diagnostics_channel');\n\nconst {\n  isFalse\n} = require('./util');\n\nconst plugins = require('./plugins');\n\nconst log = require('./log');\n\nconst loadChannel = channel('dd-trace:instrumentation:load'); // instrument everything that needs Plugin System V2 instrumentation\n\nrequire('../../datadog-instrumentations');\n\nconst {\n  DD_TRACE_DISABLED_PLUGINS\n} = process.env;\nconst disabledPlugins = new Set(DD_TRACE_DISABLED_PLUGINS && DD_TRACE_DISABLED_PLUGINS.split(',').map(plugin => plugin.trim())); // TODO actually ... should we be looking at envrionment variables this deep down in the code?\n\nconst pluginClasses = {};\nloadChannel.subscribe(_ref => {\n  let {\n    name\n  } = _ref;\n  const Plugin = plugins[name];\n  if (!Plugin || typeof Plugin !== 'function') return;\n\n  if (!pluginClasses[Plugin.name]) {\n    const envName = `DD_TRACE_${Plugin.name.toUpperCase()}_ENABLED`;\n    const enabled = process.env[envName.replace(/[^a-z0-9_]/ig, '_')]; // TODO: remove the need to load the plugin class in order to disable the plugin\n\n    if (isFalse(enabled) || disabledPlugins.has(Plugin.name)) {\n      log.debug(`Plugin \"${Plugin.name}\" was disabled via configuration option.`);\n      pluginClasses[Plugin.name] = null;\n    } else {\n      pluginClasses[Plugin.name] = Plugin;\n    }\n  }\n}); // TODO this must always be a singleton.\n\nmodule.exports = class PluginManager {\n  constructor(tracer) {\n    this._tracer = tracer;\n    this._tracerConfig = null;\n    this._pluginsByName = {};\n    this._configsByName = {};\n\n    this._loadedSubscriber = _ref2 => {\n      let {\n        name\n      } = _ref2;\n      const Plugin = plugins[name];\n      if (!Plugin || typeof Plugin !== 'function') return;\n      this.loadPlugin(Plugin.name);\n    };\n\n    loadChannel.subscribe(this._loadedSubscriber);\n  }\n\n  loadPlugin(name) {\n    const Plugin = pluginClasses[name];\n    if (!Plugin) return;\n\n    if (!this._pluginsByName[name]) {\n      this._pluginsByName[name] = new Plugin(this._tracer);\n    }\n\n    if (!this._tracerConfig) return; // TODO: don't wait for tracer to be initialized\n\n    const pluginConfig = this._configsByName[name] || {\n      enabled: this._tracerConfig.plugins !== false\n    };\n\n    this._pluginsByName[name].configure({ ...this._getSharedConfig(name),\n      ...pluginConfig\n    });\n  } // TODO: merge config instead of replacing\n\n\n  configurePlugin(name, pluginConfig) {\n    const enabled = this._isEnabled(pluginConfig);\n\n    this._configsByName[name] = { ...pluginConfig,\n      enabled\n    };\n    this.loadPlugin(name);\n  } // like instrumenter.enable()\n\n\n  configure() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._tracerConfig = config;\n\n    for (const name in pluginClasses) {\n      this.loadPlugin(name);\n    }\n  } // This is basically just for testing. like intrumenter.disable()\n\n\n  destroy() {\n    for (const name in this._pluginsByName) {\n      this._pluginsByName[name].configure({\n        enabled: false\n      });\n    }\n\n    loadChannel.unsubscribe(this._loadedSubscriber);\n  }\n\n  _isEnabled(pluginConfig) {\n    if (typeof pluginConfig === 'boolean') return pluginConfig;\n    if (!pluginConfig) return true;\n    return pluginConfig.enabled !== false;\n  } // TODO: figure out a better way to handle this\n\n\n  _getSharedConfig(name) {\n    const {\n      logInjection,\n      serviceMapping,\n      queryStringObfuscation,\n      clientIpHeaderDisabled,\n      clientIpHeader,\n      isIntelligentTestRunnerEnabled,\n      site,\n      experimental\n    } = this._tracerConfig;\n    const sharedConfig = {};\n\n    if (logInjection !== undefined) {\n      sharedConfig.logInjection = logInjection;\n    }\n\n    if (queryStringObfuscation !== undefined) {\n      sharedConfig.queryStringObfuscation = queryStringObfuscation;\n    }\n\n    if (clientIpHeaderDisabled !== undefined) {\n      sharedConfig.clientIpHeaderDisabled = clientIpHeaderDisabled;\n    }\n\n    if (clientIpHeader !== undefined) {\n      sharedConfig.clientIpHeader = clientIpHeader;\n    }\n\n    if (experimental) {\n      sharedConfig.isAgentlessEnabled = experimental.exporter === 'datadog';\n    }\n\n    sharedConfig.isIntelligentTestRunnerEnabled = isIntelligentTestRunnerEnabled;\n\n    if (serviceMapping && serviceMapping[name]) {\n      sharedConfig.service = serviceMapping[name];\n    }\n\n    sharedConfig.site = site;\n    return sharedConfig;\n  }\n\n};","map":{"version":3,"names":["channel","require","isFalse","plugins","log","loadChannel","DD_TRACE_DISABLED_PLUGINS","process","env","disabledPlugins","Set","split","map","plugin","trim","pluginClasses","subscribe","name","Plugin","envName","toUpperCase","enabled","replace","has","debug","module","exports","PluginManager","constructor","tracer","_tracer","_tracerConfig","_pluginsByName","_configsByName","_loadedSubscriber","loadPlugin","pluginConfig","configure","_getSharedConfig","configurePlugin","_isEnabled","config","destroy","unsubscribe","logInjection","serviceMapping","queryStringObfuscation","clientIpHeaderDisabled","clientIpHeader","isIntelligentTestRunnerEnabled","site","experimental","sharedConfig","undefined","isAgentlessEnabled","exporter","service"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/plugin_manager.js"],"sourcesContent":["'use strict'\n\nconst { channel } = require('diagnostics_channel')\nconst { isFalse } = require('./util')\nconst plugins = require('./plugins')\nconst log = require('./log')\n\nconst loadChannel = channel('dd-trace:instrumentation:load')\n\n// instrument everything that needs Plugin System V2 instrumentation\nrequire('../../datadog-instrumentations')\n\nconst { DD_TRACE_DISABLED_PLUGINS } = process.env\n\nconst disabledPlugins = new Set(\n  DD_TRACE_DISABLED_PLUGINS && DD_TRACE_DISABLED_PLUGINS.split(',').map(plugin => plugin.trim())\n)\n\n// TODO actually ... should we be looking at envrionment variables this deep down in the code?\n\nconst pluginClasses = {}\n\nloadChannel.subscribe(({ name }) => {\n  const Plugin = plugins[name]\n\n  if (!Plugin || typeof Plugin !== 'function') return\n  if (!pluginClasses[Plugin.name]) {\n    const envName = `DD_TRACE_${Plugin.name.toUpperCase()}_ENABLED`\n    const enabled = process.env[envName.replace(/[^a-z0-9_]/ig, '_')]\n\n    // TODO: remove the need to load the plugin class in order to disable the plugin\n    if (isFalse(enabled) || disabledPlugins.has(Plugin.name)) {\n      log.debug(`Plugin \"${Plugin.name}\" was disabled via configuration option.`)\n\n      pluginClasses[Plugin.name] = null\n    } else {\n      pluginClasses[Plugin.name] = Plugin\n    }\n  }\n})\n\n// TODO this must always be a singleton.\nmodule.exports = class PluginManager {\n  constructor (tracer) {\n    this._tracer = tracer\n    this._tracerConfig = null\n    this._pluginsByName = {}\n    this._configsByName = {}\n\n    this._loadedSubscriber = ({ name }) => {\n      const Plugin = plugins[name]\n\n      if (!Plugin || typeof Plugin !== 'function') return\n\n      this.loadPlugin(Plugin.name)\n    }\n\n    loadChannel.subscribe(this._loadedSubscriber)\n  }\n\n  loadPlugin (name) {\n    const Plugin = pluginClasses[name]\n\n    if (!Plugin) return\n    if (!this._pluginsByName[name]) {\n      this._pluginsByName[name] = new Plugin(this._tracer)\n    }\n    if (!this._tracerConfig) return // TODO: don't wait for tracer to be initialized\n\n    const pluginConfig = this._configsByName[name] || {\n      enabled: this._tracerConfig.plugins !== false\n    }\n\n    this._pluginsByName[name].configure({\n      ...this._getSharedConfig(name),\n      ...pluginConfig\n    })\n  }\n\n  // TODO: merge config instead of replacing\n  configurePlugin (name, pluginConfig) {\n    const enabled = this._isEnabled(pluginConfig)\n\n    this._configsByName[name] = {\n      ...pluginConfig,\n      enabled\n    }\n\n    this.loadPlugin(name)\n  }\n\n  // like instrumenter.enable()\n  configure (config = {}) {\n    this._tracerConfig = config\n\n    for (const name in pluginClasses) {\n      this.loadPlugin(name)\n    }\n  }\n\n  // This is basically just for testing. like intrumenter.disable()\n  destroy () {\n    for (const name in this._pluginsByName) {\n      this._pluginsByName[name].configure({ enabled: false })\n    }\n\n    loadChannel.unsubscribe(this._loadedSubscriber)\n  }\n\n  _isEnabled (pluginConfig) {\n    if (typeof pluginConfig === 'boolean') return pluginConfig\n    if (!pluginConfig) return true\n\n    return pluginConfig.enabled !== false\n  }\n\n  // TODO: figure out a better way to handle this\n  _getSharedConfig (name) {\n    const {\n      logInjection,\n      serviceMapping,\n      queryStringObfuscation,\n      clientIpHeaderDisabled,\n      clientIpHeader,\n      isIntelligentTestRunnerEnabled,\n      site,\n      experimental\n    } = this._tracerConfig\n\n    const sharedConfig = {}\n\n    if (logInjection !== undefined) {\n      sharedConfig.logInjection = logInjection\n    }\n\n    if (queryStringObfuscation !== undefined) {\n      sharedConfig.queryStringObfuscation = queryStringObfuscation\n    }\n\n    if (clientIpHeaderDisabled !== undefined) {\n      sharedConfig.clientIpHeaderDisabled = clientIpHeaderDisabled\n    }\n\n    if (clientIpHeader !== undefined) {\n      sharedConfig.clientIpHeader = clientIpHeader\n    }\n\n    if (experimental) {\n      sharedConfig.isAgentlessEnabled = experimental.exporter === 'datadog'\n    }\n\n    sharedConfig.isIntelligentTestRunnerEnabled = isIntelligentTestRunnerEnabled\n\n    if (serviceMapping && serviceMapping[name]) {\n      sharedConfig.service = serviceMapping[name]\n    }\n\n    sharedConfig.site = site\n\n    return sharedConfig\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}