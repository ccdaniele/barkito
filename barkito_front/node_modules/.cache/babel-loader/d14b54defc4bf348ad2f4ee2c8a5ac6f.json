{"ast":null,"code":"// From agent truncators: https://github.com/DataDog/datadog-agent/blob/main/pkg/trace/agent/truncator.go\n// Values from: https://github.com/DataDog/datadog-agent/blob/main/pkg/trace/traceutil/truncate.go#L22-L27\n// MAX_RESOURCE_NAME_LENGTH the maximum length a span resource can have\nconst MAX_RESOURCE_NAME_LENGTH = 5000; // MAX_META_KEY_LENGTH the maximum length of metadata key\n\nconst MAX_META_KEY_LENGTH = 200; // MAX_META_VALUE_LENGTH the maximum length of metadata value\n\nconst MAX_META_VALUE_LENGTH = 25000; // MAX_METRIC_KEY_LENGTH the maximum length of a metric name key\n\nconst MAX_METRIC_KEY_LENGTH = MAX_META_KEY_LENGTH; // MAX_METRIC_VALUE_LENGTH the maximum length of a metric name value\n\nconst MAX_METRIC_VALUE_LENGTH = MAX_META_VALUE_LENGTH; // From agent normalizer:\n// https://github.com/DataDog/datadog-agent/blob/main/pkg/trace/traceutil/normalize.go\n// DEFAULT_SPAN_NAME is the default name we assign a span if it's missing and we have no reasonable fallback\n\nconst DEFAULT_SPAN_NAME = 'unnamed_operation'; // DEFAULT_SERVICE_NAME is the default name we assign a service if it's missing and we have no reasonable fallback\n\nconst DEFAULT_SERVICE_NAME = 'unnamed-service'; // MAX_NAME_LENGTH the maximum length a name can have\n\nconst MAX_NAME_LENGTH = 100; // MAX_SERVICE_LENGTH the maximum length a service can have\n\nconst MAX_SERVICE_LENGTH = 100; // MAX_TYPE_LENGTH the maximum length a span type can have\n\nconst MAX_TYPE_LENGTH = 100;\n\nconst fromEntries = Object.fromEntries || (entries => entries.reduce((obj, _ref) => {\n  let [k, v] = _ref;\n  return Object.assign(obj, {\n    [k]: v\n  });\n}, {}));\n\nfunction truncateToLength(value, maxLength) {\n  if (!value) {\n    return value;\n  }\n\n  if (value.length > maxLength) {\n    return `${value.slice(0, maxLength)}...`;\n  }\n\n  return value;\n}\n\nfunction truncateSpan(span) {\n  return fromEntries(Object.entries(span).map(_ref2 => {\n    let [key, value] = _ref2;\n\n    switch (key) {\n      case 'resource':\n        return ['resource', truncateToLength(value, MAX_RESOURCE_NAME_LENGTH)];\n\n      case 'meta':\n        return ['meta', fromEntries(Object.entries(value).map(_ref3 => {\n          let [metaKey, metaValue] = _ref3;\n          return [truncateToLength(metaKey, MAX_META_KEY_LENGTH), truncateToLength(metaValue, MAX_META_VALUE_LENGTH)];\n        }))];\n\n      case 'metrics':\n        return ['metrics', fromEntries(Object.entries(value).map(_ref4 => {\n          let [metricsKey, metricsValue] = _ref4;\n          return [truncateToLength(metricsKey, MAX_METRIC_KEY_LENGTH), truncateToLength(metricsValue, MAX_METRIC_VALUE_LENGTH)];\n        }))];\n\n      default:\n        return [key, value];\n    }\n  }));\n}\n\nfunction normalizeSpan(span) {\n  const normalizedSpan = fromEntries(Object.entries(span).map(_ref5 => {\n    let [key, value] = _ref5;\n\n    switch (key) {\n      case 'service':\n        if (!value) {\n          return [key, DEFAULT_SERVICE_NAME];\n        }\n\n        if (value.length > MAX_SERVICE_LENGTH) {\n          return [key, value.slice(0, MAX_SERVICE_LENGTH)];\n        }\n\n        break;\n\n      case 'name':\n        if (!value) {\n          return [key, DEFAULT_SPAN_NAME];\n        }\n\n        if (value.length > MAX_NAME_LENGTH) {\n          return [key, value.slice(0, MAX_NAME_LENGTH)];\n        }\n\n        break;\n\n      case 'resource':\n        if (!value) {\n          return [key, span.name || DEFAULT_SPAN_NAME];\n        }\n\n        break;\n\n      case 'type':\n        if (!value) {\n          return [key, value];\n        }\n\n        if (value.length > MAX_TYPE_LENGTH) {\n          return [key, value.slice(0, MAX_TYPE_LENGTH)];\n        }\n\n    }\n\n    return [key, value];\n  }));\n\n  if (!normalizedSpan.service) {\n    normalizedSpan.service = DEFAULT_SERVICE_NAME;\n  }\n\n  if (!normalizedSpan.name) {\n    normalizedSpan.name = DEFAULT_SPAN_NAME;\n  }\n\n  return normalizedSpan;\n}\n\nmodule.exports = {\n  truncateSpan,\n  normalizeSpan,\n  MAX_META_KEY_LENGTH,\n  MAX_META_VALUE_LENGTH,\n  MAX_METRIC_KEY_LENGTH,\n  MAX_METRIC_VALUE_LENGTH,\n  MAX_NAME_LENGTH,\n  MAX_SERVICE_LENGTH,\n  MAX_TYPE_LENGTH,\n  MAX_RESOURCE_NAME_LENGTH,\n  DEFAULT_SPAN_NAME,\n  DEFAULT_SERVICE_NAME\n};","map":{"version":3,"names":["MAX_RESOURCE_NAME_LENGTH","MAX_META_KEY_LENGTH","MAX_META_VALUE_LENGTH","MAX_METRIC_KEY_LENGTH","MAX_METRIC_VALUE_LENGTH","DEFAULT_SPAN_NAME","DEFAULT_SERVICE_NAME","MAX_NAME_LENGTH","MAX_SERVICE_LENGTH","MAX_TYPE_LENGTH","fromEntries","Object","entries","reduce","obj","k","v","assign","truncateToLength","value","maxLength","length","slice","truncateSpan","span","map","key","metaKey","metaValue","metricsKey","metricsValue","normalizeSpan","normalizedSpan","name","service","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/encode/tags-processors.js"],"sourcesContent":["// From agent truncators: https://github.com/DataDog/datadog-agent/blob/main/pkg/trace/agent/truncator.go\n\n// Values from: https://github.com/DataDog/datadog-agent/blob/main/pkg/trace/traceutil/truncate.go#L22-L27\n// MAX_RESOURCE_NAME_LENGTH the maximum length a span resource can have\nconst MAX_RESOURCE_NAME_LENGTH = 5000\n// MAX_META_KEY_LENGTH the maximum length of metadata key\nconst MAX_META_KEY_LENGTH = 200\n// MAX_META_VALUE_LENGTH the maximum length of metadata value\nconst MAX_META_VALUE_LENGTH = 25000\n// MAX_METRIC_KEY_LENGTH the maximum length of a metric name key\nconst MAX_METRIC_KEY_LENGTH = MAX_META_KEY_LENGTH\n// MAX_METRIC_VALUE_LENGTH the maximum length of a metric name value\nconst MAX_METRIC_VALUE_LENGTH = MAX_META_VALUE_LENGTH\n\n// From agent normalizer:\n// https://github.com/DataDog/datadog-agent/blob/main/pkg/trace/traceutil/normalize.go\n// DEFAULT_SPAN_NAME is the default name we assign a span if it's missing and we have no reasonable fallback\nconst DEFAULT_SPAN_NAME = 'unnamed_operation'\n// DEFAULT_SERVICE_NAME is the default name we assign a service if it's missing and we have no reasonable fallback\nconst DEFAULT_SERVICE_NAME = 'unnamed-service'\n// MAX_NAME_LENGTH the maximum length a name can have\nconst MAX_NAME_LENGTH = 100\n// MAX_SERVICE_LENGTH the maximum length a service can have\nconst MAX_SERVICE_LENGTH = 100\n// MAX_TYPE_LENGTH the maximum length a span type can have\nconst MAX_TYPE_LENGTH = 100\n\nconst fromEntries = Object.fromEntries || (entries =>\n  entries.reduce((obj, [k, v]) => Object.assign(obj, { [k]: v }), {}))\n\nfunction truncateToLength (value, maxLength) {\n  if (!value) {\n    return value\n  }\n  if (value.length > maxLength) {\n    return `${value.slice(0, maxLength)}...`\n  }\n  return value\n}\n\nfunction truncateSpan (span) {\n  return fromEntries(Object.entries(span).map(([key, value]) => {\n    switch (key) {\n      case 'resource':\n        return ['resource', truncateToLength(value, MAX_RESOURCE_NAME_LENGTH)]\n      case 'meta':\n        return ['meta', fromEntries(Object.entries(value).map(([metaKey, metaValue]) =>\n          [truncateToLength(metaKey, MAX_META_KEY_LENGTH), truncateToLength(metaValue, MAX_META_VALUE_LENGTH)]\n        ))]\n      case 'metrics':\n        return ['metrics', fromEntries(Object.entries(value).map(([metricsKey, metricsValue]) =>\n          [truncateToLength(metricsKey, MAX_METRIC_KEY_LENGTH), truncateToLength(metricsValue, MAX_METRIC_VALUE_LENGTH)]\n        ))]\n      default:\n        return [key, value]\n    }\n  }))\n}\n\nfunction normalizeSpan (span) {\n  const normalizedSpan = fromEntries(Object.entries(span).map(([key, value]) => {\n    switch (key) {\n      case 'service':\n        if (!value) {\n          return [key, DEFAULT_SERVICE_NAME]\n        }\n        if (value.length > MAX_SERVICE_LENGTH) {\n          return [key, value.slice(0, MAX_SERVICE_LENGTH)]\n        }\n        break\n      case 'name':\n        if (!value) {\n          return [key, DEFAULT_SPAN_NAME]\n        }\n        if (value.length > MAX_NAME_LENGTH) {\n          return [key, value.slice(0, MAX_NAME_LENGTH)]\n        }\n        break\n      case 'resource':\n        if (!value) {\n          return [key, span.name || DEFAULT_SPAN_NAME]\n        }\n        break\n      case 'type':\n        if (!value) {\n          return [key, value]\n        }\n        if (value.length > MAX_TYPE_LENGTH) {\n          return [key, value.slice(0, MAX_TYPE_LENGTH)]\n        }\n    }\n    return [key, value]\n  }))\n  if (!normalizedSpan.service) {\n    normalizedSpan.service = DEFAULT_SERVICE_NAME\n  }\n  if (!normalizedSpan.name) {\n    normalizedSpan.name = DEFAULT_SPAN_NAME\n  }\n  return normalizedSpan\n}\n\nmodule.exports = {\n  truncateSpan,\n  normalizeSpan,\n  MAX_META_KEY_LENGTH,\n  MAX_META_VALUE_LENGTH,\n  MAX_METRIC_KEY_LENGTH,\n  MAX_METRIC_VALUE_LENGTH,\n  MAX_NAME_LENGTH,\n  MAX_SERVICE_LENGTH,\n  MAX_TYPE_LENGTH,\n  MAX_RESOURCE_NAME_LENGTH,\n  DEFAULT_SPAN_NAME,\n  DEFAULT_SERVICE_NAME\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}