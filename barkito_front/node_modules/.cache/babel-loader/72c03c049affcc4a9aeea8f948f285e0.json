{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst fs = require('fs');\n/**\n * Given a package name and a module to start from, find a package's\n * package.json file, parses it, and returns the result.\n *\n * Equivalent to require(`${name}/package.json`) prior to Node 12.\n *\n * @typedef { import('module').Module } Module\n * @param {string} name\n * @param {Module} module\n * @return {Object} The parsed package.json\n */\n\n\nfunction requirePackageJson(name, module) {\n  if (path.isAbsolute(name)) {\n    const candidate = path.join(name, 'package.json');\n    return JSON.parse(fs.readFileSync(candidate, 'utf8'));\n  }\n\n  for (const modulePath of module.paths) {\n    const candidate = path.join(modulePath, name, 'package.json');\n\n    try {\n      return JSON.parse(fs.readFileSync(candidate, 'utf8'));\n    } catch (e) {\n      continue;\n    }\n  }\n\n  throw new Error(`could not find ${name}/package.json`);\n}\n\nmodule.exports = requirePackageJson;","map":{"version":3,"names":["path","require","fs","requirePackageJson","name","module","isAbsolute","candidate","join","JSON","parse","readFileSync","modulePath","paths","e","Error","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/require-package-json.js"],"sourcesContent":["'use strict'\n\nconst path = require('path')\nconst fs = require('fs')\n\n/**\n * Given a package name and a module to start from, find a package's\n * package.json file, parses it, and returns the result.\n *\n * Equivalent to require(`${name}/package.json`) prior to Node 12.\n *\n * @typedef { import('module').Module } Module\n * @param {string} name\n * @param {Module} module\n * @return {Object} The parsed package.json\n */\nfunction requirePackageJson (name, module) {\n  if (path.isAbsolute(name)) {\n    const candidate = path.join(name, 'package.json')\n    return JSON.parse(fs.readFileSync(candidate, 'utf8'))\n  }\n  for (const modulePath of module.paths) {\n    const candidate = path.join(modulePath, name, 'package.json')\n    try {\n      return JSON.parse(fs.readFileSync(candidate, 'utf8'))\n    } catch (e) {\n      continue\n    }\n  }\n  throw new Error(`could not find ${name}/package.json`)\n}\n\nmodule.exports = requirePackageJson\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,kBAAT,CAA6BC,IAA7B,EAAmCC,MAAnC,EAA2C;EACzC,IAAIL,IAAI,CAACM,UAAL,CAAgBF,IAAhB,CAAJ,EAA2B;IACzB,MAAMG,SAAS,GAAGP,IAAI,CAACQ,IAAL,CAAUJ,IAAV,EAAgB,cAAhB,CAAlB;IACA,OAAOK,IAAI,CAACC,KAAL,CAAWR,EAAE,CAACS,YAAH,CAAgBJ,SAAhB,EAA2B,MAA3B,CAAX,CAAP;EACD;;EACD,KAAK,MAAMK,UAAX,IAAyBP,MAAM,CAACQ,KAAhC,EAAuC;IACrC,MAAMN,SAAS,GAAGP,IAAI,CAACQ,IAAL,CAAUI,UAAV,EAAsBR,IAAtB,EAA4B,cAA5B,CAAlB;;IACA,IAAI;MACF,OAAOK,IAAI,CAACC,KAAL,CAAWR,EAAE,CAACS,YAAH,CAAgBJ,SAAhB,EAA2B,MAA3B,CAAX,CAAP;IACD,CAFD,CAEE,OAAOO,CAAP,EAAU;MACV;IACD;EACF;;EACD,MAAM,IAAIC,KAAJ,CAAW,kBAAiBX,IAAK,eAAjC,CAAN;AACD;;AAEDC,MAAM,CAACW,OAAP,GAAiBb,kBAAjB"},"metadata":{},"sourceType":"script"}