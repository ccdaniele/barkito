{"ast":null,"code":"'use strict'; // TODO (new internal tracer): use DC events for lifecycle metrics and test them\n\nconst now = require('perf_hooks').performance.now;\n\nconst dateNow = Date.now;\n\nconst semver = require('semver');\n\nconst SpanContext = require('./span_context');\n\nconst id = require('../id');\n\nconst tagger = require('../tagger');\n\nconst metrics = require('../metrics');\n\nconst log = require('../log');\n\nconst {\n  storage\n} = require('../../../datadog-core');\n\nconst {\n  DD_TRACE_EXPERIMENTAL_STATE_TRACKING,\n  DD_TRACE_EXPERIMENTAL_SPAN_COUNTS\n} = process.env;\nconst unfinishedRegistry = createRegistry('unfinished');\nconst finishedRegistry = createRegistry('finished');\n\nclass DatadogSpan {\n  constructor(tracer, processor, prioritySampler, fields, debug) {\n    const operationName = fields.operationName;\n    const parent = fields.parent || null;\n    const tags = Object.assign({}, fields.tags);\n    const hostname = fields.hostname;\n    this._parentTracer = tracer;\n    this._debug = debug;\n    this._processor = processor;\n    this._prioritySampler = prioritySampler;\n    this._store = storage.getStore();\n    this._name = operationName;\n    this._spanContext = this._createContext(parent);\n    this._spanContext._name = operationName;\n    this._spanContext._tags = tags;\n    this._spanContext._hostname = hostname;\n    this._startTime = fields.startTime || this._getTime();\n\n    if (DD_TRACE_EXPERIMENTAL_SPAN_COUNTS && finishedRegistry) {\n      metrics.increment('runtime.node.spans.unfinished');\n      metrics.increment('runtime.node.spans.unfinished.by.name', `span_name:${operationName}`);\n      metrics.increment('runtime.node.spans.open'); // unfinished for real\n\n      metrics.increment('runtime.node.spans.open.by.name', `span_name:${operationName}`);\n      unfinishedRegistry.register(this, operationName, this);\n    }\n  }\n\n  toString() {\n    const spanContext = this.context();\n    const resourceName = spanContext._tags['resource.name'];\n    const resource = resourceName.length > 100 ? `${resourceName.substring(0, 97)}...` : resourceName;\n    const json = JSON.stringify({\n      traceId: spanContext._traceId,\n      spanId: spanContext._spanId,\n      parentId: spanContext._parentId,\n      service: spanContext._tags['service.name'],\n      name: spanContext._name,\n      resource\n    });\n    return `Span${json}`;\n  }\n\n  context() {\n    return this._spanContext;\n  }\n\n  tracer() {\n    return this._parentTracer;\n  }\n\n  setOperationName(name) {\n    this._spanContext._name = name;\n    return this;\n  }\n\n  setBaggageItem(key, value) {\n    this._spanContext._baggageItems[key] = value;\n    return this;\n  }\n\n  getBaggageItem(key) {\n    return this._spanContext._baggageItems[key];\n  }\n\n  setTag(key, value) {\n    this._addTags({\n      [key]: value\n    });\n\n    return this;\n  }\n\n  addTags(keyValueMap) {\n    this._addTags(keyValueMap);\n\n    return this;\n  }\n\n  log() {\n    return this;\n  }\n\n  logEvent() {}\n\n  finish(finishTime) {\n    if (this._duration !== undefined) {\n      return;\n    }\n\n    if (DD_TRACE_EXPERIMENTAL_STATE_TRACKING === 'true') {\n      if (!this._spanContext._tags['service.name']) {\n        log.error(`Finishing invalid span: ${this}`);\n      }\n    }\n\n    if (DD_TRACE_EXPERIMENTAL_SPAN_COUNTS && finishedRegistry) {\n      metrics.decrement('runtime.node.spans.unfinished');\n      metrics.decrement('runtime.node.spans.unfinished.by.name', `span_name:${this._name}`);\n      metrics.increment('runtime.node.spans.finished');\n      metrics.increment('runtime.node.spans.finished.by.name', `span_name:${this._name}`);\n      metrics.decrement('runtime.node.spans.open'); // unfinished for real\n\n      metrics.decrement('runtime.node.spans.open.by.name', `span_name:${this._name}`);\n      unfinishedRegistry.unregister(this);\n      finishedRegistry.register(this, this._name);\n    }\n\n    finishTime = parseFloat(finishTime) || this._getTime();\n    this._duration = finishTime - this._startTime;\n\n    this._spanContext._trace.finished.push(this);\n\n    this._spanContext._isFinished = true;\n\n    this._processor.process(this);\n  }\n\n  _createContext(parent) {\n    let spanContext;\n\n    if (parent) {\n      spanContext = new SpanContext({\n        traceId: parent._traceId,\n        spanId: id(),\n        parentId: parent._spanId,\n        sampling: parent._sampling,\n        baggageItems: Object.assign({}, parent._baggageItems),\n        trace: parent._trace\n      });\n    } else {\n      const spanId = id();\n      spanContext = new SpanContext({\n        traceId: spanId,\n        spanId\n      });\n    }\n\n    spanContext._trace.started.push(this);\n\n    spanContext._trace.startTime = spanContext._trace.startTime || dateNow();\n    spanContext._trace.ticks = spanContext._trace.ticks || now();\n    return spanContext;\n  }\n\n  _getTime() {\n    const {\n      startTime,\n      ticks\n    } = this._spanContext._trace;\n    return startTime + now() - ticks;\n  }\n\n  _addTags(keyValuePairs) {\n    tagger.add(this._spanContext._tags, keyValuePairs);\n\n    this._prioritySampler.sample(this, false);\n  }\n\n}\n\nfunction createRegistry(type) {\n  if (!semver.satisfies(process.version, '>=14.6')) return;\n  return new global.FinalizationRegistry(name => {\n    metrics.decrement(`runtime.node.spans.${type}`);\n    metrics.decrement(`runtime.node.spans.${type}.by.name`, [`span_name:${name}`]);\n  });\n}\n\nmodule.exports = DatadogSpan;","map":{"version":3,"names":["now","require","performance","dateNow","Date","semver","SpanContext","id","tagger","metrics","log","storage","DD_TRACE_EXPERIMENTAL_STATE_TRACKING","DD_TRACE_EXPERIMENTAL_SPAN_COUNTS","process","env","unfinishedRegistry","createRegistry","finishedRegistry","DatadogSpan","constructor","tracer","processor","prioritySampler","fields","debug","operationName","parent","tags","Object","assign","hostname","_parentTracer","_debug","_processor","_prioritySampler","_store","getStore","_name","_spanContext","_createContext","_tags","_hostname","_startTime","startTime","_getTime","increment","register","toString","spanContext","context","resourceName","resource","length","substring","json","JSON","stringify","traceId","_traceId","spanId","_spanId","parentId","_parentId","service","name","setOperationName","setBaggageItem","key","value","_baggageItems","getBaggageItem","setTag","_addTags","addTags","keyValueMap","logEvent","finish","finishTime","_duration","undefined","error","decrement","unregister","parseFloat","_trace","finished","push","_isFinished","sampling","_sampling","baggageItems","trace","started","ticks","keyValuePairs","add","sample","type","satisfies","version","global","FinalizationRegistry","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/opentracing/span.js"],"sourcesContent":["'use strict'\n\n// TODO (new internal tracer): use DC events for lifecycle metrics and test them\nconst now = require('perf_hooks').performance.now\nconst dateNow = Date.now\nconst semver = require('semver')\nconst SpanContext = require('./span_context')\nconst id = require('../id')\nconst tagger = require('../tagger')\nconst metrics = require('../metrics')\nconst log = require('../log')\nconst { storage } = require('../../../datadog-core')\n\nconst {\n  DD_TRACE_EXPERIMENTAL_STATE_TRACKING,\n  DD_TRACE_EXPERIMENTAL_SPAN_COUNTS\n} = process.env\n\nconst unfinishedRegistry = createRegistry('unfinished')\nconst finishedRegistry = createRegistry('finished')\n\nclass DatadogSpan {\n  constructor (tracer, processor, prioritySampler, fields, debug) {\n    const operationName = fields.operationName\n    const parent = fields.parent || null\n    const tags = Object.assign({}, fields.tags)\n    const hostname = fields.hostname\n\n    this._parentTracer = tracer\n    this._debug = debug\n    this._processor = processor\n    this._prioritySampler = prioritySampler\n    this._store = storage.getStore()\n    this._name = operationName\n\n    this._spanContext = this._createContext(parent)\n    this._spanContext._name = operationName\n    this._spanContext._tags = tags\n    this._spanContext._hostname = hostname\n\n    this._startTime = fields.startTime || this._getTime()\n\n    if (DD_TRACE_EXPERIMENTAL_SPAN_COUNTS && finishedRegistry) {\n      metrics.increment('runtime.node.spans.unfinished')\n      metrics.increment('runtime.node.spans.unfinished.by.name', `span_name:${operationName}`)\n\n      metrics.increment('runtime.node.spans.open') // unfinished for real\n      metrics.increment('runtime.node.spans.open.by.name', `span_name:${operationName}`)\n\n      unfinishedRegistry.register(this, operationName, this)\n    }\n  }\n\n  toString () {\n    const spanContext = this.context()\n    const resourceName = spanContext._tags['resource.name']\n    const resource = resourceName.length > 100\n      ? `${resourceName.substring(0, 97)}...`\n      : resourceName\n    const json = JSON.stringify({\n      traceId: spanContext._traceId,\n      spanId: spanContext._spanId,\n      parentId: spanContext._parentId,\n      service: spanContext._tags['service.name'],\n      name: spanContext._name,\n      resource\n    })\n\n    return `Span${json}`\n  }\n\n  context () {\n    return this._spanContext\n  }\n\n  tracer () {\n    return this._parentTracer\n  }\n\n  setOperationName (name) {\n    this._spanContext._name = name\n    return this\n  }\n\n  setBaggageItem (key, value) {\n    this._spanContext._baggageItems[key] = value\n    return this\n  }\n\n  getBaggageItem (key) {\n    return this._spanContext._baggageItems[key]\n  }\n\n  setTag (key, value) {\n    this._addTags({ [key]: value })\n    return this\n  }\n\n  addTags (keyValueMap) {\n    this._addTags(keyValueMap)\n    return this\n  }\n\n  log () {\n    return this\n  }\n\n  logEvent () {}\n\n  finish (finishTime) {\n    if (this._duration !== undefined) {\n      return\n    }\n\n    if (DD_TRACE_EXPERIMENTAL_STATE_TRACKING === 'true') {\n      if (!this._spanContext._tags['service.name']) {\n        log.error(`Finishing invalid span: ${this}`)\n      }\n    }\n\n    if (DD_TRACE_EXPERIMENTAL_SPAN_COUNTS && finishedRegistry) {\n      metrics.decrement('runtime.node.spans.unfinished')\n      metrics.decrement('runtime.node.spans.unfinished.by.name', `span_name:${this._name}`)\n      metrics.increment('runtime.node.spans.finished')\n      metrics.increment('runtime.node.spans.finished.by.name', `span_name:${this._name}`)\n\n      metrics.decrement('runtime.node.spans.open') // unfinished for real\n      metrics.decrement('runtime.node.spans.open.by.name', `span_name:${this._name}`)\n\n      unfinishedRegistry.unregister(this)\n      finishedRegistry.register(this, this._name)\n    }\n\n    finishTime = parseFloat(finishTime) || this._getTime()\n\n    this._duration = finishTime - this._startTime\n    this._spanContext._trace.finished.push(this)\n    this._spanContext._isFinished = true\n    this._processor.process(this)\n  }\n\n  _createContext (parent) {\n    let spanContext\n\n    if (parent) {\n      spanContext = new SpanContext({\n        traceId: parent._traceId,\n        spanId: id(),\n        parentId: parent._spanId,\n        sampling: parent._sampling,\n        baggageItems: Object.assign({}, parent._baggageItems),\n        trace: parent._trace\n      })\n    } else {\n      const spanId = id()\n      spanContext = new SpanContext({\n        traceId: spanId,\n        spanId\n      })\n    }\n\n    spanContext._trace.started.push(this)\n    spanContext._trace.startTime = spanContext._trace.startTime || dateNow()\n    spanContext._trace.ticks = spanContext._trace.ticks || now()\n\n    return spanContext\n  }\n\n  _getTime () {\n    const { startTime, ticks } = this._spanContext._trace\n\n    return startTime + now() - ticks\n  }\n\n  _addTags (keyValuePairs) {\n    tagger.add(this._spanContext._tags, keyValuePairs)\n\n    this._prioritySampler.sample(this, false)\n  }\n}\n\nfunction createRegistry (type) {\n  if (!semver.satisfies(process.version, '>=14.6')) return\n\n  return new global.FinalizationRegistry(name => {\n    metrics.decrement(`runtime.node.spans.${type}`)\n    metrics.decrement(`runtime.node.spans.${type}.by.name`, [`span_name:${name}`])\n  })\n}\n\nmodule.exports = DatadogSpan\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}