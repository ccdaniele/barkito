{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst FormData = require('../../../exporters/common/form-data');\n\nconst request = require('../../../exporters/common/request');\n\nconst log = require('../../../log');\n\nconst {\n  getLatestCommits,\n  getRepositoryUrl,\n  generatePackFilesForCommits,\n  getCommitsToUpload\n} = require('../../../plugins/util/git');\n\nconst isValidSha = sha => /[0-9a-f]{40}/.test(sha);\n\nfunction sanitizeCommits(commits) {\n  return commits.map(_ref => {\n    let {\n      id: commitSha,\n      type\n    } = _ref;\n\n    if (type !== 'commit') {\n      throw new Error('Invalid commit type response');\n    }\n\n    const sanitizedCommit = commitSha.replace(/[^0-9a-f]+/g, '');\n\n    if (sanitizedCommit !== commitSha || !isValidSha(sanitizedCommit)) {\n      throw new Error('Invalid commit format');\n    }\n\n    return sanitizedCommit;\n  });\n}\n\nfunction getCommonRequestOptions(url) {\n  return {\n    method: 'POST',\n    headers: {\n      'dd-api-key': process.env.DATADOG_API_KEY || process.env.DD_API_KEY\n    },\n    timeout: 15000,\n    protocol: url.protocol,\n    hostname: url.hostname,\n    port: url.port\n  };\n}\n/**\n * This function posts the SHAs of the commits of the last month\n * The response are the commits for which the backend already has information\n * This response is used to know which commits can be ignored from there on\n */\n\n\nfunction getCommitsToExclude(_ref2, callback) {\n  let {\n    url,\n    repositoryUrl\n  } = _ref2;\n  const latestCommits = getLatestCommits();\n  const [headCommit] = latestCommits;\n  const commonOptions = getCommonRequestOptions(url);\n  const options = { ...commonOptions,\n    headers: { ...commonOptions.headers,\n      'Content-Type': 'application/json'\n    },\n    path: '/api/v2/git/repository/search_commits'\n  };\n  const localCommitData = JSON.stringify({\n    meta: {\n      repository_url: repositoryUrl\n    },\n    data: latestCommits.map(commit => ({\n      id: commit,\n      type: 'commit'\n    }))\n  });\n  request(localCommitData, options, (err, response, statusCode) => {\n    if (err) {\n      const error = new Error(`search_commits returned an error: status code ${statusCode}`);\n      return callback(error);\n    }\n\n    let commitsToExclude;\n\n    try {\n      commitsToExclude = sanitizeCommits(JSON.parse(response).data);\n    } catch (e) {\n      return callback(new Error(`Can't parse search_commits response: ${e.message}`));\n    }\n\n    callback(null, commitsToExclude, headCommit);\n  });\n}\n/**\n * This function uploads a git packfile\n */\n\n\nfunction uploadPackFile(_ref3, callback) {\n  let {\n    url,\n    packFileToUpload,\n    repositoryUrl,\n    headCommit\n  } = _ref3;\n  const form = new FormData();\n  const pushedSha = JSON.stringify({\n    data: {\n      id: headCommit,\n      type: 'commit'\n    },\n    meta: {\n      repository_url: repositoryUrl\n    }\n  });\n  form.append('pushedSha', pushedSha, {\n    contentType: 'application/json'\n  });\n\n  try {\n    const packFileContent = fs.readFileSync(packFileToUpload); // The original filename includes a random prefix, so we remove it here\n\n    const [, filename] = path.basename(packFileToUpload).split('-');\n    form.append('packfile', packFileContent, {\n      filename,\n      contentType: 'application/octet-stream'\n    });\n  } catch (e) {\n    callback(new Error(`Could not read \"${packFileToUpload}\"`));\n    return;\n  }\n\n  const commonOptions = getCommonRequestOptions(url);\n  const options = { ...commonOptions,\n    path: '/api/v2/git/repository/packfile',\n    headers: { ...commonOptions.headers,\n      ...form.getHeaders()\n    }\n  };\n  request(form, options, (err, _, statusCode) => {\n    if (err) {\n      const error = new Error(`Could not upload packfiles: status code ${statusCode}`);\n      return callback(error);\n    }\n\n    callback(null);\n  });\n}\n/**\n * This function uploads git metadata to CI Visibility's backend.\n*/\n\n\nfunction sendGitMetadata(site, callback) {\n  const url = new URL(`https://api.${site}`);\n  const repositoryUrl = getRepositoryUrl();\n\n  if (!repositoryUrl) {\n    return callback(new Error('Repository URL is empty'));\n  }\n\n  getCommitsToExclude({\n    url,\n    repositoryUrl\n  }, (err, commitsToExclude, headCommit) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const commitsToUpload = getCommitsToUpload(commitsToExclude);\n\n    if (!commitsToUpload.length) {\n      log.debug('No commits to upload');\n      return callback(null);\n    }\n\n    const packFilesToUpload = generatePackFilesForCommits(commitsToUpload);\n\n    if (!packFilesToUpload.length) {\n      return callback(new Error('Failed to generate packfiles'));\n    }\n\n    let packFileIndex = 0; // This uploads packfiles sequentially\n\n    const uploadPackFileCallback = err => {\n      if (err || packFileIndex === packFilesToUpload.length) {\n        return callback(err);\n      }\n\n      return uploadPackFile({\n        packFileToUpload: packFilesToUpload[packFileIndex++],\n        url,\n        repositoryUrl,\n        headCommit\n      }, uploadPackFileCallback);\n    };\n\n    uploadPackFile({\n      url,\n      packFileToUpload: packFilesToUpload[packFileIndex++],\n      repositoryUrl,\n      headCommit\n    }, uploadPackFileCallback);\n  });\n}\n\nmodule.exports = {\n  sendGitMetadata\n};","map":{"version":3,"names":["fs","require","path","FormData","request","log","getLatestCommits","getRepositoryUrl","generatePackFilesForCommits","getCommitsToUpload","isValidSha","sha","test","sanitizeCommits","commits","map","id","commitSha","type","Error","sanitizedCommit","replace","getCommonRequestOptions","url","method","headers","process","env","DATADOG_API_KEY","DD_API_KEY","timeout","protocol","hostname","port","getCommitsToExclude","callback","repositoryUrl","latestCommits","headCommit","commonOptions","options","localCommitData","JSON","stringify","meta","repository_url","data","commit","err","response","statusCode","error","commitsToExclude","parse","e","message","uploadPackFile","packFileToUpload","form","pushedSha","append","contentType","packFileContent","readFileSync","filename","basename","split","getHeaders","_","sendGitMetadata","site","URL","commitsToUpload","length","debug","packFilesToUpload","packFileIndex","uploadPackFileCallback","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/ci-visibility/exporters/git/git_metadata.js"],"sourcesContent":["\nconst fs = require('fs')\nconst path = require('path')\n\nconst FormData = require('../../../exporters/common/form-data')\nconst request = require('../../../exporters/common/request')\n\nconst log = require('../../../log')\nconst {\n  getLatestCommits,\n  getRepositoryUrl,\n  generatePackFilesForCommits,\n  getCommitsToUpload\n} = require('../../../plugins/util/git')\n\nconst isValidSha = (sha) => /[0-9a-f]{40}/.test(sha)\n\nfunction sanitizeCommits (commits) {\n  return commits.map(({ id: commitSha, type }) => {\n    if (type !== 'commit') {\n      throw new Error('Invalid commit type response')\n    }\n    const sanitizedCommit = commitSha.replace(/[^0-9a-f]+/g, '')\n    if (sanitizedCommit !== commitSha || !isValidSha(sanitizedCommit)) {\n      throw new Error('Invalid commit format')\n    }\n    return sanitizedCommit\n  })\n}\n\nfunction getCommonRequestOptions (url) {\n  return {\n    method: 'POST',\n    headers: {\n      'dd-api-key': process.env.DATADOG_API_KEY || process.env.DD_API_KEY\n    },\n    timeout: 15000,\n    protocol: url.protocol,\n    hostname: url.hostname,\n    port: url.port\n  }\n}\n\n/**\n * This function posts the SHAs of the commits of the last month\n * The response are the commits for which the backend already has information\n * This response is used to know which commits can be ignored from there on\n */\nfunction getCommitsToExclude ({ url, repositoryUrl }, callback) {\n  const latestCommits = getLatestCommits()\n  const [headCommit] = latestCommits\n\n  const commonOptions = getCommonRequestOptions(url)\n\n  const options = {\n    ...commonOptions,\n    headers: {\n      ...commonOptions.headers,\n      'Content-Type': 'application/json'\n    },\n    path: '/api/v2/git/repository/search_commits'\n  }\n\n  const localCommitData = JSON.stringify({\n    meta: {\n      repository_url: repositoryUrl\n    },\n    data: latestCommits.map(commit => ({\n      id: commit,\n      type: 'commit'\n    }))\n  })\n\n  request(localCommitData, options, (err, response, statusCode) => {\n    if (err) {\n      const error = new Error(`search_commits returned an error: status code ${statusCode}`)\n      return callback(error)\n    }\n    let commitsToExclude\n    try {\n      commitsToExclude = sanitizeCommits(JSON.parse(response).data)\n    } catch (e) {\n      return callback(new Error(`Can't parse search_commits response: ${e.message}`))\n    }\n    callback(null, commitsToExclude, headCommit)\n  })\n}\n\n/**\n * This function uploads a git packfile\n */\nfunction uploadPackFile ({ url, packFileToUpload, repositoryUrl, headCommit }, callback) {\n  const form = new FormData()\n\n  const pushedSha = JSON.stringify({\n    data: {\n      id: headCommit,\n      type: 'commit'\n    },\n    meta: {\n      repository_url: repositoryUrl\n    }\n  })\n\n  form.append('pushedSha', pushedSha, { contentType: 'application/json' })\n\n  try {\n    const packFileContent = fs.readFileSync(packFileToUpload)\n    // The original filename includes a random prefix, so we remove it here\n    const [, filename] = path.basename(packFileToUpload).split('-')\n    form.append('packfile', packFileContent, {\n      filename,\n      contentType: 'application/octet-stream'\n    })\n  } catch (e) {\n    callback(new Error(`Could not read \"${packFileToUpload}\"`))\n    return\n  }\n\n  const commonOptions = getCommonRequestOptions(url)\n\n  const options = {\n    ...commonOptions,\n    path: '/api/v2/git/repository/packfile',\n    headers: {\n      ...commonOptions.headers,\n      ...form.getHeaders()\n    }\n  }\n  request(form, options, (err, _, statusCode) => {\n    if (err) {\n      const error = new Error(`Could not upload packfiles: status code ${statusCode}`)\n      return callback(error)\n    }\n    callback(null)\n  })\n}\n\n/**\n * This function uploads git metadata to CI Visibility's backend.\n*/\nfunction sendGitMetadata (site, callback) {\n  const url = new URL(`https://api.${site}`)\n\n  const repositoryUrl = getRepositoryUrl()\n\n  if (!repositoryUrl) {\n    return callback(new Error('Repository URL is empty'))\n  }\n\n  getCommitsToExclude({ url, repositoryUrl }, (err, commitsToExclude, headCommit) => {\n    if (err) {\n      return callback(err)\n    }\n    const commitsToUpload = getCommitsToUpload(commitsToExclude)\n\n    if (!commitsToUpload.length) {\n      log.debug('No commits to upload')\n      return callback(null)\n    }\n    const packFilesToUpload = generatePackFilesForCommits(commitsToUpload)\n\n    if (!packFilesToUpload.length) {\n      return callback(new Error('Failed to generate packfiles'))\n    }\n\n    let packFileIndex = 0\n    // This uploads packfiles sequentially\n    const uploadPackFileCallback = (err) => {\n      if (err || packFileIndex === packFilesToUpload.length) {\n        return callback(err)\n      }\n      return uploadPackFile(\n        {\n          packFileToUpload: packFilesToUpload[packFileIndex++],\n          url,\n          repositoryUrl,\n          headCommit\n        },\n        uploadPackFileCallback\n      )\n    }\n\n    uploadPackFile(\n      {\n        url,\n        packFileToUpload: packFilesToUpload[packFileIndex++],\n        repositoryUrl,\n        headCommit\n      },\n      uploadPackFileCallback\n    )\n  })\n}\n\nmodule.exports = {\n  sendGitMetadata\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}