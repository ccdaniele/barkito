{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst profile_serializer_1 = require(\"./profile-serializer\");\n\nconst cpu_profiler_bindings_1 = require(\"./cpu-profiler-bindings\");\n\nfunction isNodeEqual(a, b) {\n  if (a.name !== b.name) return false;\n  if (a.scriptName !== b.scriptName) return false;\n  if (a.scriptId !== b.scriptId) return false;\n  if (a.lineNumber !== b.lineNumber) return false;\n  if (a.columnNumber !== b.columnNumber) return false;\n  return true;\n}\n\nfunction makeNode(location) {\n  return {\n    name: location.comment || location.functionName,\n    scriptName: location.scriptName || '',\n    scriptId: location.scriptId,\n    lineNumber: location.line,\n    columnNumber: location.column,\n    hitCount: 0,\n    cpuTime: 0,\n    labelSets: [],\n    children: []\n  };\n}\n\nclass CpuProfiler extends cpu_profiler_bindings_1.CpuProfiler {\n  profile() {\n    if (this.frequency === 0) return;\n    const profile = super.profile();\n    const timeProfile = {\n      startTime: profile.startTime,\n      endTime: profile.endTime,\n      topDownRoot: {\n        name: '(root)',\n        scriptName: '',\n        scriptId: 0,\n        lineNumber: 0,\n        columnNumber: 0,\n        hitCount: 0,\n        cpuTime: 0,\n        labelSets: [],\n        children: []\n      }\n    };\n    let targetNode = timeProfile.topDownRoot;\n\n    for (const sample of profile.samples) {\n      if (!sample) continue;\n\n      locations: for (const location of sample.locations) {\n        const node = makeNode(location);\n\n        for (const found of targetNode.children) {\n          const foundNode = found;\n\n          if (isNodeEqual(node, foundNode)) {\n            targetNode = foundNode;\n            continue locations;\n          }\n        }\n\n        targetNode.children.push(node);\n        targetNode = node;\n      }\n\n      targetNode.cpuTime += sample.cpuTime;\n      targetNode.hitCount++;\n\n      if (sample.labels) {\n        targetNode.labelSets.push(sample.labels);\n      }\n\n      targetNode = timeProfile.topDownRoot;\n    }\n\n    const intervalMicros = 1000 / this.frequency;\n    return (0, profile_serializer_1.serializeCpuProfile)(timeProfile, intervalMicros);\n  }\n\n}\n\nexports.default = CpuProfiler;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AAQA,SAASA,WAAT,CAAqBC,CAArB,EAAwCC,CAAxC,EAAyD;EACvD,IAAID,CAAC,CAACE,IAAF,KAAWD,CAAC,CAACC,IAAjB,EAAuB,OAAO,KAAP;EACvB,IAAIF,CAAC,CAACG,UAAF,KAAiBF,CAAC,CAACE,UAAvB,EAAmC,OAAO,KAAP;EACnC,IAAIH,CAAC,CAACI,QAAF,KAAeH,CAAC,CAACG,QAArB,EAA+B,OAAO,KAAP;EAC/B,IAAIJ,CAAC,CAACK,UAAF,KAAiBJ,CAAC,CAACI,UAAvB,EAAmC,OAAO,KAAP;EACnC,IAAIL,CAAC,CAACM,YAAF,KAAmBL,CAAC,CAACK,YAAzB,EAAuC,OAAO,KAAP;EACvC,OAAO,IAAP;AACD;;AAED,SAASC,QAAT,CAAkBC,QAAlB,EAAqC;EACnC,OAAO;IACLN,IAAI,EAAEM,QAAQ,CAACC,OAAT,IAAoBD,QAAQ,CAACE,YAD9B;IAELP,UAAU,EAAEK,QAAQ,CAACL,UAAT,IAAuB,EAF9B;IAGLC,QAAQ,EAAEI,QAAQ,CAACJ,QAHd;IAILC,UAAU,EAAEG,QAAQ,CAACG,IAJhB;IAKLL,YAAY,EAAEE,QAAQ,CAACI,MALlB;IAMLC,QAAQ,EAAE,CANL;IAOLC,OAAO,EAAE,CAPJ;IAQLC,SAAS,EAAE,EARN;IASLC,QAAQ,EAAE;EATL,CAAP;AAWD;;AAED,MAAqBC,WAArB,SAAyCC,mCAAzC,CAA0D;EACxDC,OAAO;IACL,IAAI,KAAKC,SAAL,KAAmB,CAAvB,EAA0B;IAE1B,MAAMD,OAAO,GAAsB,MAAMA,OAAN,EAAnC;IAEA,MAAME,WAAW,GAAe;MAC9BC,SAAS,EAAEH,OAAO,CAACG,SADW;MAE9BC,OAAO,EAAEJ,OAAO,CAACI,OAFa;MAG9BC,WAAW,EAAE;QACXtB,IAAI,EAAE,QADK;QAEXC,UAAU,EAAE,EAFD;QAGXC,QAAQ,EAAE,CAHC;QAIXC,UAAU,EAAE,CAJD;QAKXC,YAAY,EAAE,CALH;QAMXO,QAAQ,EAAE,CANC;QAOXC,OAAO,EAAE,CAPE;QAQXC,SAAS,EAAE,EARA;QASXC,QAAQ,EAAE;MATC;IAHiB,CAAhC;IAgBA,IAAIS,UAAU,GAAGJ,WAAW,CAACG,WAA7B;;IAEA,KAAK,MAAME,MAAX,IAAqBP,OAAO,CAACQ,OAA7B,EAAsC;MACpC,IAAI,CAACD,MAAL,EAAa;;MACbE,SAAS,EAAE,KAAK,MAAMpB,QAAX,IAAuBkB,MAAM,CAACE,SAA9B,EAAyC;QAClD,MAAMC,IAAI,GAAGtB,QAAQ,CAACC,QAAD,CAArB;;QAEA,KAAK,MAAMsB,KAAX,IAAoBL,UAAU,CAACT,QAA/B,EAAyC;UACvC,MAAMe,SAAS,GAAGD,KAAlB;;UACA,IAAI/B,WAAW,CAAC8B,IAAD,EAAOE,SAAP,CAAf,EAAkC;YAChCN,UAAU,GAAGM,SAAb;YACA,SAASH,SAAT;UACD;QACF;;QAEDH,UAAU,CAACT,QAAX,CAAoBgB,IAApB,CAAyBH,IAAzB;QACAJ,UAAU,GAAGI,IAAb;MACD;;MAEDJ,UAAU,CAACX,OAAX,IAAsBY,MAAM,CAACZ,OAA7B;MACAW,UAAU,CAACZ,QAAX;;MACA,IAAIa,MAAM,CAACO,MAAX,EAAmB;QACjBR,UAAU,CAACV,SAAX,CAAqBiB,IAArB,CAA0BN,MAAM,CAACO,MAAjC;MACD;;MAEDR,UAAU,GAAGJ,WAAW,CAACG,WAAzB;IACD;;IAED,MAAMU,cAAc,GAAG,OAAQ,KAAKd,SAApC;IACA,OAAO,8CAAoBC,WAApB,EAAiCa,cAAjC,CAAP;EACD;;AApDuD;;AAA1DC","names":["isNodeEqual","a","b","name","scriptName","scriptId","lineNumber","columnNumber","makeNode","location","comment","functionName","line","column","hitCount","cpuTime","labelSets","children","CpuProfiler","cpu_profiler_bindings_1","profile","frequency","timeProfile","startTime","endTime","topDownRoot","targetNode","sample","samples","locations","node","found","foundNode","push","labels","intervalMicros","exports"],"sources":["../../ts/src/cpu-profiler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}