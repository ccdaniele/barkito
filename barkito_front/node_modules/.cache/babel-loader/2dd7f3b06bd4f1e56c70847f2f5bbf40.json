{"ast":null,"code":"const os = require('os');\n\nconst {\n  version\n} = require('./pkg');\n\nconst pkg = require('../../../package.json');\n\nconst {\n  LogCollapsingLowestDenseDDSketch\n} = require('@datadog/sketches-js');\n\nconst {\n  ORIGIN_KEY,\n  TOP_LEVEL_KEY\n} = require('./constants');\n\nconst {\n  MEASURED,\n  HTTP_STATUS_CODE\n} = require('../../../ext/tags');\n\nconst {\n  SpanStatsExporter\n} = require('./exporters/span-stats');\n\nconst {\n  DEFAULT_SPAN_NAME,\n  DEFAULT_SERVICE_NAME\n} = require('./encode/tags-processors');\n\nclass SpanAggStats {\n  constructor(aggKey) {\n    this.aggKey = aggKey;\n    this.hits = 0;\n    this.topLevelHits = 0;\n    this.errors = 0;\n    this.duration = 0;\n    this.okDistribution = new LogCollapsingLowestDenseDDSketch(0.00775);\n    this.errorDistribution = new LogCollapsingLowestDenseDDSketch(0.00775);\n  }\n\n  record(span) {\n    const durationNs = span._duration * 1e6;\n    this.hits++;\n    this.duration += durationNs;\n\n    if (span.metrics[TOP_LEVEL_KEY]) {\n      this.topLevelHits++;\n    }\n\n    if (span.error) {\n      this.errors++;\n      this.errorDistribution.accept(durationNs);\n    } else {\n      this.okDistribution.accept(durationNs);\n    }\n  }\n\n  toJSON() {\n    const {\n      name,\n      service,\n      resource,\n      type,\n      statusCode,\n      synthetics\n    } = this.aggKey;\n    return {\n      Name: name,\n      Service: service,\n      Resource: resource,\n      Type: type,\n      HTTPStatusCode: statusCode,\n      Synthetics: synthetics,\n      Hits: this.hits,\n      TopLevelHits: this.topLevelHits,\n      Errors: this.errors,\n      Duration: this.duration,\n      OkSummary: this.okDistribution.toProto(),\n      ErrorSummary: this.errorDistribution.toProto()\n    };\n  }\n\n}\n\nclass SpanAggKey {\n  constructor(span) {\n    this.name = span.name || DEFAULT_SPAN_NAME;\n    this.service = span.service || DEFAULT_SERVICE_NAME;\n    this.resource = span.resource || '';\n    this.type = span.type || '';\n    this.statusCode = span.meta[HTTP_STATUS_CODE] || 0;\n    this.synthetics = span.meta[ORIGIN_KEY] === 'synthetics';\n  }\n\n  toString() {\n    return [this.name, this.service, this.resource, this.type, this.statusCode, this.synthetics].join(',');\n  }\n\n}\n\nclass SpanBuckets extends Map {\n  forSpan(span) {\n    const aggKey = new SpanAggKey(span);\n    const key = aggKey.toString();\n\n    if (!this.has(key)) {\n      this.set(key, new SpanAggStats(aggKey));\n    }\n\n    return this.get(key);\n  }\n\n}\n\nclass TimeBuckets extends Map {\n  forTime(time) {\n    if (!this.has(time)) {\n      this.set(time, new SpanBuckets());\n    }\n\n    return this.get(time);\n  }\n\n}\n\nclass SpanStatsProcessor {\n  constructor() {\n    let {\n      stats: {\n        enabled = false,\n        interval = 10\n      },\n      hostname,\n      port,\n      url,\n      env,\n      tags\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.exporter = new SpanStatsExporter({\n      hostname,\n      port,\n      tags,\n      url\n    });\n    this.interval = interval;\n    this.bucketSizeNs = interval * 1e9;\n    this.buckets = new TimeBuckets();\n    this.hostname = os.hostname();\n    this.enabled = enabled;\n    this.env = env;\n    this.tags = tags || {};\n    this.sequence = 0;\n\n    if (enabled) {\n      this.timer = setInterval(this.onInterval.bind(this), interval * 1e3);\n      this.timer.unref();\n    }\n  }\n\n  onInterval() {\n    const serialized = this._serializeBuckets();\n\n    if (!serialized) return;\n    this.exporter.export({\n      Hostname: this.hostname,\n      Env: this.env,\n      Version: version,\n      Stats: serialized,\n      Lang: 'javascript',\n      TracerVersion: pkg.version,\n      RuntimeID: this.tags['runtime-id'],\n      Sequence: ++this.sequence\n    });\n  }\n\n  onSpanFinished(span) {\n    if (!this.enabled) return;\n    if (!span.metrics[TOP_LEVEL_KEY] && !span.metrics[MEASURED]) return;\n    const spanEndNs = span.startTime + span.duration;\n    const bucketTime = spanEndNs - spanEndNs % this.bucketSizeNs;\n    this.buckets.forTime(bucketTime).forSpan(span).record(span);\n  }\n\n  _serializeBuckets() {\n    const {\n      bucketSizeNs\n    } = this;\n    const serializedBuckets = [];\n\n    for (const [timeNs, bucket] of this.buckets.entries()) {\n      const bucketAggStats = [];\n\n      for (const stats of bucket.values()) {\n        bucketAggStats.push(stats.toJSON());\n      }\n\n      serializedBuckets.push({\n        Start: timeNs,\n        Duration: bucketSizeNs,\n        Stats: bucketAggStats\n      });\n    }\n\n    this.buckets.clear();\n    return serializedBuckets;\n  }\n\n}\n\nmodule.exports = {\n  SpanAggStats,\n  SpanAggKey,\n  SpanBuckets,\n  TimeBuckets,\n  SpanStatsProcessor\n};","map":{"version":3,"names":["os","require","version","pkg","LogCollapsingLowestDenseDDSketch","ORIGIN_KEY","TOP_LEVEL_KEY","MEASURED","HTTP_STATUS_CODE","SpanStatsExporter","DEFAULT_SPAN_NAME","DEFAULT_SERVICE_NAME","SpanAggStats","constructor","aggKey","hits","topLevelHits","errors","duration","okDistribution","errorDistribution","record","span","durationNs","_duration","metrics","error","accept","toJSON","name","service","resource","type","statusCode","synthetics","Name","Service","Resource","Type","HTTPStatusCode","Synthetics","Hits","TopLevelHits","Errors","Duration","OkSummary","toProto","ErrorSummary","SpanAggKey","meta","toString","join","SpanBuckets","Map","forSpan","key","has","set","get","TimeBuckets","forTime","time","SpanStatsProcessor","stats","enabled","interval","hostname","port","url","env","tags","exporter","bucketSizeNs","buckets","sequence","timer","setInterval","onInterval","bind","unref","serialized","_serializeBuckets","export","Hostname","Env","Version","Stats","Lang","TracerVersion","RuntimeID","Sequence","onSpanFinished","spanEndNs","startTime","bucketTime","serializedBuckets","timeNs","bucket","entries","bucketAggStats","values","push","Start","clear","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/span_stats.js"],"sourcesContent":["const os = require('os')\nconst { version } = require('./pkg')\nconst pkg = require('../../../package.json')\n\nconst { LogCollapsingLowestDenseDDSketch } = require('@datadog/sketches-js')\nconst { ORIGIN_KEY, TOP_LEVEL_KEY } = require('./constants')\nconst {\n  MEASURED,\n  HTTP_STATUS_CODE\n} = require('../../../ext/tags')\n\nconst { SpanStatsExporter } = require('./exporters/span-stats')\n\nconst {\n  DEFAULT_SPAN_NAME,\n  DEFAULT_SERVICE_NAME\n} = require('./encode/tags-processors')\n\nclass SpanAggStats {\n  constructor (aggKey) {\n    this.aggKey = aggKey\n    this.hits = 0\n    this.topLevelHits = 0\n    this.errors = 0\n    this.duration = 0\n    this.okDistribution = new LogCollapsingLowestDenseDDSketch(0.00775)\n    this.errorDistribution = new LogCollapsingLowestDenseDDSketch(0.00775)\n  }\n\n  record (span) {\n    const durationNs = span._duration * 1e6\n    this.hits++\n    this.duration += durationNs\n\n    if (span.metrics[TOP_LEVEL_KEY]) {\n      this.topLevelHits++\n    }\n\n    if (span.error) {\n      this.errors++\n      this.errorDistribution.accept(durationNs)\n    } else {\n      this.okDistribution.accept(durationNs)\n    }\n  }\n\n  toJSON () {\n    const {\n      name,\n      service,\n      resource,\n      type,\n      statusCode,\n      synthetics\n    } = this.aggKey\n\n    return {\n      Name: name,\n      Service: service,\n      Resource: resource,\n      Type: type,\n      HTTPStatusCode: statusCode,\n      Synthetics: synthetics,\n      Hits: this.hits,\n      TopLevelHits: this.topLevelHits,\n      Errors: this.errors,\n      Duration: this.duration,\n      OkSummary: this.okDistribution.toProto(),\n      ErrorSummary: this.errorDistribution.toProto()\n    }\n  }\n}\n\nclass SpanAggKey {\n  constructor (span) {\n    this.name = span.name || DEFAULT_SPAN_NAME\n    this.service = span.service || DEFAULT_SERVICE_NAME\n    this.resource = span.resource || ''\n    this.type = span.type || ''\n    this.statusCode = span.meta[HTTP_STATUS_CODE] || 0\n    this.synthetics = span.meta[ORIGIN_KEY] === 'synthetics'\n  }\n\n  toString () {\n    return [\n      this.name,\n      this.service,\n      this.resource,\n      this.type,\n      this.statusCode,\n      this.synthetics\n    ].join(',')\n  }\n}\n\nclass SpanBuckets extends Map {\n  forSpan (span) {\n    const aggKey = new SpanAggKey(span)\n    const key = aggKey.toString()\n\n    if (!this.has(key)) {\n      this.set(key, new SpanAggStats(aggKey))\n    }\n\n    return this.get(key)\n  }\n}\n\nclass TimeBuckets extends Map {\n  forTime (time) {\n    if (!this.has(time)) {\n      this.set(time, new SpanBuckets())\n    }\n\n    return this.get(time)\n  }\n}\n\nclass SpanStatsProcessor {\n  constructor ({\n    stats: {\n      enabled = false,\n      interval = 10\n    },\n    hostname,\n    port,\n    url,\n    env,\n    tags\n  } = {}) {\n    this.exporter = new SpanStatsExporter({\n      hostname,\n      port,\n      tags,\n      url\n    })\n    this.interval = interval\n    this.bucketSizeNs = interval * 1e9\n    this.buckets = new TimeBuckets()\n    this.hostname = os.hostname()\n    this.enabled = enabled\n    this.env = env\n    this.tags = tags || {}\n    this.sequence = 0\n\n    if (enabled) {\n      this.timer = setInterval(this.onInterval.bind(this), interval * 1e3)\n      this.timer.unref()\n    }\n  }\n\n  onInterval () {\n    const serialized = this._serializeBuckets()\n    if (!serialized) return\n\n    this.exporter.export({\n      Hostname: this.hostname,\n      Env: this.env,\n      Version: version,\n      Stats: serialized,\n      Lang: 'javascript',\n      TracerVersion: pkg.version,\n      RuntimeID: this.tags['runtime-id'],\n      Sequence: ++this.sequence\n    })\n  }\n\n  onSpanFinished (span) {\n    if (!this.enabled) return\n    if (!span.metrics[TOP_LEVEL_KEY] && !span.metrics[MEASURED]) return\n\n    const spanEndNs = span.startTime + span.duration\n    const bucketTime = spanEndNs - (spanEndNs % this.bucketSizeNs)\n\n    this.buckets.forTime(bucketTime)\n      .forSpan(span)\n      .record(span)\n  }\n\n  _serializeBuckets () {\n    const { bucketSizeNs } = this\n    const serializedBuckets = []\n\n    for (const [ timeNs, bucket ] of this.buckets.entries()) {\n      const bucketAggStats = []\n\n      for (const stats of bucket.values()) {\n        bucketAggStats.push(stats.toJSON())\n      }\n\n      serializedBuckets.push({\n        Start: timeNs,\n        Duration: bucketSizeNs,\n        Stats: bucketAggStats\n      })\n    }\n\n    this.buckets.clear()\n\n    return serializedBuckets\n  }\n}\n\nmodule.exports = {\n  SpanAggStats,\n  SpanAggKey,\n  SpanBuckets,\n  TimeBuckets,\n  SpanStatsProcessor\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}