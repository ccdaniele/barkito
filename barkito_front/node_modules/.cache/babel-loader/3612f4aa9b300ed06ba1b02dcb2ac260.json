{"ast":null,"code":"'use strict';\n\nconst os = require('os');\n\nconst Span = require('./span');\n\nconst SpanProcessor = require('../span_processor');\n\nconst PrioritySampler = require('../priority_sampler');\n\nconst TextMapPropagator = require('./propagation/text_map');\n\nconst HttpPropagator = require('./propagation/http');\n\nconst BinaryPropagator = require('./propagation/binary');\n\nconst LogPropagator = require('./propagation/log');\n\nconst formats = require('../../../../ext/formats');\n\nconst log = require('../log');\n\nconst metrics = require('../metrics');\n\nconst getExporter = require('../exporter');\n\nconst SpanContext = require('./span_context');\n\nconst REFERENCE_CHILD_OF = 'child_of';\nconst REFERENCE_FOLLOWS_FROM = 'follows_from';\n\nclass DatadogTracer {\n  constructor(config) {\n    const Exporter = getExporter(config.experimental.exporter);\n    this._service = config.service;\n    this._version = config.version;\n    this._env = config.env;\n    this._tags = config.tags;\n    this._logInjection = config.logInjection;\n    this._debug = config.debug;\n    this._prioritySampler = new PrioritySampler(config.env, config.sampler);\n    this._exporter = new Exporter(config, this._prioritySampler);\n    this._processor = new SpanProcessor(this._exporter, this._prioritySampler, config);\n    this._url = this._exporter._url;\n    this._enableGetRumData = config.experimental.enableGetRumData;\n    this._propagators = {\n      [formats.TEXT_MAP]: new TextMapPropagator(config),\n      [formats.HTTP_HEADERS]: new HttpPropagator(config),\n      [formats.BINARY]: new BinaryPropagator(config),\n      [formats.LOG]: new LogPropagator(config)\n    };\n\n    if (config.reportHostname) {\n      this._hostname = os.hostname();\n    }\n  }\n\n  startSpan(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const parent = options.childOf ? getContext(options.childOf) : getParent(options.references);\n    const tags = {\n      'service.name': this._service\n    };\n    const span = new Span(this, this._processor, this._prioritySampler, {\n      operationName: options.operationName || name,\n      parent,\n      tags,\n      startTime: options.startTime,\n      hostname: this._hostname\n    }, this._debug);\n    span.addTags(this._tags);\n    span.addTags(options.tags);\n    return span;\n  }\n\n  inject(spanContext, format, carrier) {\n    if (spanContext instanceof Span) {\n      spanContext = spanContext.context();\n    }\n\n    try {\n      this._prioritySampler.sample(spanContext);\n\n      this._propagators[format].inject(spanContext, carrier);\n    } catch (e) {\n      log.error(e);\n      metrics.increment('datadog.tracer.node.inject.errors', true);\n    }\n  }\n\n  extract(format, carrier) {\n    try {\n      return this._propagators[format].extract(carrier);\n    } catch (e) {\n      log.error(e);\n      metrics.increment('datadog.tracer.node.extract.errors', true);\n      return null;\n    }\n  }\n\n}\n\nfunction getContext(spanContext) {\n  if (spanContext instanceof Span) {\n    spanContext = spanContext.context();\n  }\n\n  if (!(spanContext instanceof SpanContext)) {\n    spanContext = null;\n  }\n\n  return spanContext;\n}\n\nfunction getParent() {\n  let references = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let parent = null;\n\n  for (let i = 0; i < references.length; i++) {\n    const ref = references[i];\n    const type = ref.type();\n\n    if (type === REFERENCE_CHILD_OF) {\n      parent = ref.referencedContext();\n      break;\n    } else if (type === REFERENCE_FOLLOWS_FROM) {\n      if (!parent) {\n        parent = ref.referencedContext();\n      }\n    }\n  }\n\n  return parent;\n}\n\nmodule.exports = DatadogTracer;","map":{"version":3,"names":["os","require","Span","SpanProcessor","PrioritySampler","TextMapPropagator","HttpPropagator","BinaryPropagator","LogPropagator","formats","log","metrics","getExporter","SpanContext","REFERENCE_CHILD_OF","REFERENCE_FOLLOWS_FROM","DatadogTracer","constructor","config","Exporter","experimental","exporter","_service","service","_version","version","_env","env","_tags","tags","_logInjection","logInjection","_debug","debug","_prioritySampler","sampler","_exporter","_processor","_url","_enableGetRumData","enableGetRumData","_propagators","TEXT_MAP","HTTP_HEADERS","BINARY","LOG","reportHostname","_hostname","hostname","startSpan","name","options","parent","childOf","getContext","getParent","references","span","operationName","startTime","addTags","inject","spanContext","format","carrier","context","sample","e","error","increment","extract","i","length","ref","type","referencedContext","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/opentracing/tracer.js"],"sourcesContent":["'use strict'\n\nconst os = require('os')\nconst Span = require('./span')\nconst SpanProcessor = require('../span_processor')\nconst PrioritySampler = require('../priority_sampler')\nconst TextMapPropagator = require('./propagation/text_map')\nconst HttpPropagator = require('./propagation/http')\nconst BinaryPropagator = require('./propagation/binary')\nconst LogPropagator = require('./propagation/log')\nconst formats = require('../../../../ext/formats')\n\nconst log = require('../log')\nconst metrics = require('../metrics')\nconst getExporter = require('../exporter')\nconst SpanContext = require('./span_context')\n\nconst REFERENCE_CHILD_OF = 'child_of'\nconst REFERENCE_FOLLOWS_FROM = 'follows_from'\n\nclass DatadogTracer {\n  constructor (config) {\n    const Exporter = getExporter(config.experimental.exporter)\n\n    this._service = config.service\n    this._version = config.version\n    this._env = config.env\n    this._tags = config.tags\n    this._logInjection = config.logInjection\n    this._debug = config.debug\n    this._prioritySampler = new PrioritySampler(config.env, config.sampler)\n    this._exporter = new Exporter(config, this._prioritySampler)\n    this._processor = new SpanProcessor(this._exporter, this._prioritySampler, config)\n    this._url = this._exporter._url\n    this._enableGetRumData = config.experimental.enableGetRumData\n    this._propagators = {\n      [formats.TEXT_MAP]: new TextMapPropagator(config),\n      [formats.HTTP_HEADERS]: new HttpPropagator(config),\n      [formats.BINARY]: new BinaryPropagator(config),\n      [formats.LOG]: new LogPropagator(config)\n    }\n    if (config.reportHostname) {\n      this._hostname = os.hostname()\n    }\n  }\n\n  startSpan (name, options = {}) {\n    const parent = options.childOf\n      ? getContext(options.childOf)\n      : getParent(options.references)\n\n    const tags = {\n      'service.name': this._service\n    }\n\n    const span = new Span(this, this._processor, this._prioritySampler, {\n      operationName: options.operationName || name,\n      parent,\n      tags,\n      startTime: options.startTime,\n      hostname: this._hostname\n    }, this._debug)\n\n    span.addTags(this._tags)\n    span.addTags(options.tags)\n\n    return span\n  }\n\n  inject (spanContext, format, carrier) {\n    if (spanContext instanceof Span) {\n      spanContext = spanContext.context()\n    }\n\n    try {\n      this._prioritySampler.sample(spanContext)\n      this._propagators[format].inject(spanContext, carrier)\n    } catch (e) {\n      log.error(e)\n      metrics.increment('datadog.tracer.node.inject.errors', true)\n    }\n  }\n\n  extract (format, carrier) {\n    try {\n      return this._propagators[format].extract(carrier)\n    } catch (e) {\n      log.error(e)\n      metrics.increment('datadog.tracer.node.extract.errors', true)\n      return null\n    }\n  }\n}\n\nfunction getContext (spanContext) {\n  if (spanContext instanceof Span) {\n    spanContext = spanContext.context()\n  }\n\n  if (!(spanContext instanceof SpanContext)) {\n    spanContext = null\n  }\n\n  return spanContext\n}\n\nfunction getParent (references = []) {\n  let parent = null\n\n  for (let i = 0; i < references.length; i++) {\n    const ref = references[i]\n    const type = ref.type()\n\n    if (type === REFERENCE_CHILD_OF) {\n      parent = ref.referencedContext()\n      break\n    } else if (type === REFERENCE_FOLLOWS_FROM) {\n      if (!parent) {\n        parent = ref.referencedContext()\n      }\n    }\n  }\n\n  return parent\n}\n\nmodule.exports = DatadogTracer\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}