{"ast":null,"code":"'use strict';\n/**\n * Coalesce function to find the first valid value.\n * A valid value is one that is not undefined, not null and not NaN (not a number).\n * If no values are valid, then the last argument is returned.\n *\n * ```js\n * console.log(koalas(undefined, null, NaN, 'a', 'b'));\n * //=> 'a'\n *\n * console.log(koalas(undefined, null, NaN, {a: 'b'}, 'b'));\n * //=> {a: 'b'}\n *\n * console.log(koalas(undefined, null, NaN, ['a', 'b', 'c'], {a: 'b'}, 'b'));\n * //=> ['a', 'b', 'c']\n *\n * console.log(koalas(undefined, NaN, null));\n * //=> null\n * ```\n * @name koalas\n * @param {Mixed} `arguments` Pass in any amount of arguments.\n * @return {Mixed} First valid value.\n * @api public\n */\n\nfunction koalas() {\n  var len = arguments.length;\n  var arg;\n\n  for (var i = 0; i < len; i++) {\n    arg = arguments[i];\n\n    if (hasValue(arg)) {\n      return arg;\n    }\n  }\n\n  return arg;\n}\n/**\n * Check to see if a value actually has a valid value:\n *  - not undefined\n *  - not null\n *  - not NaN (not a number)\n *\n * @param  {*} `val` value to check\n * @return {Boolean} returns `true` if the `val` has a valid value\n */\n\n\nfunction hasValue(val) {\n  // eslint-disable-next-line no-self-compare\n  return val != null && val === val;\n}\n/**\n * Expose koalas\n */\n\n\nmodule.exports = koalas;","map":{"version":3,"names":["koalas","len","arguments","length","arg","i","hasValue","val","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/koalas/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Coalesce function to find the first valid value.\n * A valid value is one that is not undefined, not null and not NaN (not a number).\n * If no values are valid, then the last argument is returned.\n *\n * ```js\n * console.log(koalas(undefined, null, NaN, 'a', 'b'));\n * //=> 'a'\n *\n * console.log(koalas(undefined, null, NaN, {a: 'b'}, 'b'));\n * //=> {a: 'b'}\n *\n * console.log(koalas(undefined, null, NaN, ['a', 'b', 'c'], {a: 'b'}, 'b'));\n * //=> ['a', 'b', 'c']\n *\n * console.log(koalas(undefined, NaN, null));\n * //=> null\n * ```\n * @name koalas\n * @param {Mixed} `arguments` Pass in any amount of arguments.\n * @return {Mixed} First valid value.\n * @api public\n */\n\nfunction koalas() {\n  var len = arguments.length;\n  var arg;\n  for (var i = 0; i < len; i++) {\n    arg = arguments[i];\n    if (hasValue(arg)) {\n      return arg;\n    }\n  }\n  return arg;\n}\n\n/**\n * Check to see if a value actually has a valid value:\n *  - not undefined\n *  - not null\n *  - not NaN (not a number)\n *\n * @param  {*} `val` value to check\n * @return {Boolean} returns `true` if the `val` has a valid value\n */\n\nfunction hasValue(val) {\n  // eslint-disable-next-line no-self-compare\n  return val != null && val === val;\n}\n\n/**\n * Expose koalas\n */\n\nmodule.exports = koalas;\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAT,GAAkB;EAChB,IAAIC,GAAG,GAAGC,SAAS,CAACC,MAApB;EACA,IAAIC,GAAJ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EAA8B;IAC5BD,GAAG,GAAGF,SAAS,CAACG,CAAD,CAAf;;IACA,IAAIC,QAAQ,CAACF,GAAD,CAAZ,EAAmB;MACjB,OAAOA,GAAP;IACD;EACF;;EACD,OAAOA,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,QAAT,CAAkBC,GAAlB,EAAuB;EACrB;EACA,OAAOA,GAAG,IAAI,IAAP,IAAeA,GAAG,KAAKA,GAA9B;AACD;AAED;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBT,MAAjB"},"metadata":{},"sourceType":"script"}