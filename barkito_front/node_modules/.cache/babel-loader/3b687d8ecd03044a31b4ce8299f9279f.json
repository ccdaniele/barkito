{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nfunction findRoot() {\n  return require.main && require.main.filename ? path.dirname(require.main.filename) : process.cwd();\n}\n\nfunction findPkg() {\n  const cwd = findRoot();\n  const directory = path.resolve(cwd);\n  const res = path.parse(directory);\n  if (!res) return {};\n  const {\n    root\n  } = res;\n  const filePath = findUp('package.json', root, directory);\n\n  try {\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'));\n  } catch (e) {\n    return {};\n  }\n}\n\nfunction findUp(name, root, directory) {\n  while (true) {\n    const current = path.resolve(directory, name);\n    if (fs.existsSync(current)) return current;\n    if (directory === root) return;\n    directory = path.dirname(directory);\n  }\n}\n\nmodule.exports = Object.assign(findPkg(), {\n  findRoot,\n  findUp\n});","map":{"version":3,"names":["fs","require","path","findRoot","main","filename","dirname","process","cwd","findPkg","directory","resolve","res","parse","root","filePath","findUp","JSON","readFileSync","e","name","current","existsSync","module","exports","Object","assign"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/pkg.js"],"sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction findRoot () {\n  return require.main && require.main.filename\n    ? path.dirname(require.main.filename)\n    : process.cwd()\n}\n\nfunction findPkg () {\n  const cwd = findRoot()\n  const directory = path.resolve(cwd)\n  const res = path.parse(directory)\n\n  if (!res) return {}\n\n  const { root } = res\n\n  const filePath = findUp('package.json', root, directory)\n\n  try {\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'))\n  } catch (e) {\n    return {}\n  }\n}\n\nfunction findUp (name, root, directory) {\n  while (true) {\n    const current = path.resolve(directory, name)\n\n    if (fs.existsSync(current)) return current\n\n    if (directory === root) return\n\n    directory = path.dirname(directory)\n  }\n}\n\nmodule.exports = Object.assign(findPkg(), { findRoot, findUp })\n"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,SAASE,QAAT,GAAqB;EACnB,OAAOF,OAAO,CAACG,IAAR,IAAgBH,OAAO,CAACG,IAAR,CAAaC,QAA7B,GACHH,IAAI,CAACI,OAAL,CAAaL,OAAO,CAACG,IAAR,CAAaC,QAA1B,CADG,GAEHE,OAAO,CAACC,GAAR,EAFJ;AAGD;;AAED,SAASC,OAAT,GAAoB;EAClB,MAAMD,GAAG,GAAGL,QAAQ,EAApB;EACA,MAAMO,SAAS,GAAGR,IAAI,CAACS,OAAL,CAAaH,GAAb,CAAlB;EACA,MAAMI,GAAG,GAAGV,IAAI,CAACW,KAAL,CAAWH,SAAX,CAAZ;EAEA,IAAI,CAACE,GAAL,EAAU,OAAO,EAAP;EAEV,MAAM;IAAEE;EAAF,IAAWF,GAAjB;EAEA,MAAMG,QAAQ,GAAGC,MAAM,CAAC,cAAD,EAAiBF,IAAjB,EAAuBJ,SAAvB,CAAvB;;EAEA,IAAI;IACF,OAAOO,IAAI,CAACJ,KAAL,CAAWb,EAAE,CAACkB,YAAH,CAAgBH,QAAhB,EAA0B,MAA1B,CAAX,CAAP;EACD,CAFD,CAEE,OAAOI,CAAP,EAAU;IACV,OAAO,EAAP;EACD;AACF;;AAED,SAASH,MAAT,CAAiBI,IAAjB,EAAuBN,IAAvB,EAA6BJ,SAA7B,EAAwC;EACtC,OAAO,IAAP,EAAa;IACX,MAAMW,OAAO,GAAGnB,IAAI,CAACS,OAAL,CAAaD,SAAb,EAAwBU,IAAxB,CAAhB;IAEA,IAAIpB,EAAE,CAACsB,UAAH,CAAcD,OAAd,CAAJ,EAA4B,OAAOA,OAAP;IAE5B,IAAIX,SAAS,KAAKI,IAAlB,EAAwB;IAExBJ,SAAS,GAAGR,IAAI,CAACI,OAAL,CAAaI,SAAb,CAAZ;EACD;AACF;;AAEDa,MAAM,CAACC,OAAP,GAAiBC,MAAM,CAACC,MAAP,CAAcjB,OAAO,EAArB,EAAyB;EAAEN,QAAF;EAAYa;AAAZ,CAAzB,CAAjB"},"metadata":{},"sourceType":"script"}