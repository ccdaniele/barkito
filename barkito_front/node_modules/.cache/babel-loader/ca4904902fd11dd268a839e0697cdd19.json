{"ast":null,"code":"'use strict';\n\nconst {\n  storage\n} = require('../../../../datadog-core');\n\nconst dc = require('diagnostics_channel');\n\nconst beforeCh = dc.channel('dd-trace:storage:before');\nconst afterCh = dc.channel('dd-trace:storage:after');\n\nfunction getActiveSpan() {\n  const store = storage.getStore();\n  if (!store) return;\n  return store.span;\n}\n\nfunction getStartedSpans(activeSpan) {\n  const context = activeSpan.context();\n  if (!context) return;\n  return context._trace.started;\n}\n\nfunction getSpanContextTags(span) {\n  return span.context()._tags;\n}\n\nfunction isWebServerSpan(tags) {\n  return tags['span.type'] === 'web';\n}\n\nfunction endpointNameFromTags(tags) {\n  return tags['resource.name'] || [tags['http.method'], tags['http.route']].filter(v => v).join(' ');\n}\n\nclass NativeCpuProfiler {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.type = 'cpu';\n    this._frequency = options.frequency || 99;\n    this._mapper = undefined;\n    this._pprof = undefined;\n    this._started = false;\n    this._cpuProfiler = undefined;\n    this._endpointCollection = options.endpointCollection; // Bind to this so the same value can be used to unsubscribe later\n\n    this._enter = this._enter.bind(this);\n    this._exit = this._exit.bind(this);\n  }\n\n  _enter() {\n    if (!this._cpuProfiler) return;\n    const active = getActiveSpan();\n    if (!active) return;\n    const activeCtx = active.context();\n    if (!activeCtx) return;\n    const spans = getStartedSpans(active);\n    if (!spans || !spans.length) return;\n    const firstCtx = spans[0].context();\n    if (!firstCtx) return;\n    const labels = {\n      'local root span id': firstCtx.toSpanId(),\n      'span id': activeCtx.toSpanId()\n    };\n\n    if (this._endpointCollection) {\n      const webServerTags = spans.map(getSpanContextTags).filter(isWebServerSpan)[0];\n\n      if (webServerTags) {\n        labels['trace endpoint'] = endpointNameFromTags(webServerTags);\n      }\n    }\n\n    this._cpuProfiler.labels = labels;\n  }\n\n  _exit() {\n    if (!this._cpuProfiler) return;\n    this._cpuProfiler.labels = {};\n  }\n\n  start() {\n    let {\n      mapper\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this._started) return;\n    this._started = true;\n    this._mapper = mapper;\n\n    if (!this._pprof) {\n      this._pprof = require('@datadog/pprof');\n      this._cpuProfiler = new this._pprof.CpuProfiler();\n    }\n\n    this._cpuProfiler.start(this._frequency);\n\n    this._enter();\n\n    beforeCh.subscribe(this._enter);\n    afterCh.subscribe(this._exit);\n  }\n\n  profile() {\n    if (!this._started) return;\n    return this._cpuProfiler.profile();\n  }\n\n  encode(profile) {\n    return this._pprof.encode(profile);\n  }\n\n  stop() {\n    if (!this._started) return;\n    this._started = false;\n\n    this._cpuProfiler.stop();\n\n    beforeCh.unsubscribe(this._enter);\n    afterCh.unsubscribe(this._exit);\n  }\n\n}\n\nmodule.exports = NativeCpuProfiler;","map":{"version":3,"names":["storage","require","dc","beforeCh","channel","afterCh","getActiveSpan","store","getStore","span","getStartedSpans","activeSpan","context","_trace","started","getSpanContextTags","_tags","isWebServerSpan","tags","endpointNameFromTags","filter","v","join","NativeCpuProfiler","constructor","options","type","_frequency","frequency","_mapper","undefined","_pprof","_started","_cpuProfiler","_endpointCollection","endpointCollection","_enter","bind","_exit","active","activeCtx","spans","length","firstCtx","labels","toSpanId","webServerTags","map","start","mapper","CpuProfiler","subscribe","profile","encode","stop","unsubscribe","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/profiling/profilers/cpu.js"],"sourcesContent":["'use strict'\n\nconst { storage } = require('../../../../datadog-core')\n\nconst dc = require('diagnostics_channel')\n\nconst beforeCh = dc.channel('dd-trace:storage:before')\nconst afterCh = dc.channel('dd-trace:storage:after')\n\nfunction getActiveSpan () {\n  const store = storage.getStore()\n  if (!store) return\n  return store.span\n}\n\nfunction getStartedSpans (activeSpan) {\n  const context = activeSpan.context()\n  if (!context) return\n  return context._trace.started\n}\n\nfunction getSpanContextTags (span) {\n  return span.context()._tags\n}\n\nfunction isWebServerSpan (tags) {\n  return tags['span.type'] === 'web'\n}\n\nfunction endpointNameFromTags (tags) {\n  return tags['resource.name'] || [\n    tags['http.method'],\n    tags['http.route']\n  ].filter(v => v).join(' ')\n}\n\nclass NativeCpuProfiler {\n  constructor (options = {}) {\n    this.type = 'cpu'\n    this._frequency = options.frequency || 99\n    this._mapper = undefined\n    this._pprof = undefined\n    this._started = false\n    this._cpuProfiler = undefined\n    this._endpointCollection = options.endpointCollection\n\n    // Bind to this so the same value can be used to unsubscribe later\n    this._enter = this._enter.bind(this)\n    this._exit = this._exit.bind(this)\n  }\n\n  _enter () {\n    if (!this._cpuProfiler) return\n\n    const active = getActiveSpan()\n    if (!active) return\n\n    const activeCtx = active.context()\n    if (!activeCtx) return\n\n    const spans = getStartedSpans(active)\n    if (!spans || !spans.length) return\n\n    const firstCtx = spans[0].context()\n    if (!firstCtx) return\n\n    const labels = {\n      'local root span id': firstCtx.toSpanId(),\n      'span id': activeCtx.toSpanId()\n    }\n\n    if (this._endpointCollection) {\n      const webServerTags = spans\n        .map(getSpanContextTags)\n        .filter(isWebServerSpan)[0]\n\n      if (webServerTags) {\n        labels['trace endpoint'] = endpointNameFromTags(webServerTags)\n      }\n    }\n\n    this._cpuProfiler.labels = labels\n  }\n\n  _exit () {\n    if (!this._cpuProfiler) return\n    this._cpuProfiler.labels = {}\n  }\n\n  start ({ mapper } = {}) {\n    if (this._started) return\n    this._started = true\n\n    this._mapper = mapper\n    if (!this._pprof) {\n      this._pprof = require('@datadog/pprof')\n      this._cpuProfiler = new this._pprof.CpuProfiler()\n    }\n\n    this._cpuProfiler.start(this._frequency)\n\n    this._enter()\n    beforeCh.subscribe(this._enter)\n    afterCh.subscribe(this._exit)\n  }\n\n  profile () {\n    if (!this._started) return\n    return this._cpuProfiler.profile()\n  }\n\n  encode (profile) {\n    return this._pprof.encode(profile)\n  }\n\n  stop () {\n    if (!this._started) return\n    this._started = false\n\n    this._cpuProfiler.stop()\n    beforeCh.unsubscribe(this._enter)\n    afterCh.unsubscribe(this._exit)\n  }\n}\n\nmodule.exports = NativeCpuProfiler\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}