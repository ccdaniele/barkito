{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst os = require('os');\n\nconst URL = require('url').URL;\n\nconst path = require('path');\n\nconst pkg = require('./pkg');\n\nconst coalesce = require('koalas');\n\nconst tagger = require('./tagger');\n\nconst {\n  isTrue,\n  isFalse\n} = require('./util');\n\nconst uuid = require('crypto-randomuuid');\n\nconst fromEntries = Object.fromEntries || (entries => entries.reduce((obj, _ref) => {\n  let [k, v] = _ref;\n  return Object.assign(obj, {\n    [k]: v\n  });\n}, {}));\n\nfunction safeJsonParse(input) {\n  try {\n    return JSON.parse(input);\n  } catch (err) {\n    return undefined;\n  }\n} // Shallow clone with property name remapping\n\n\nfunction remapify(input, mappings) {\n  if (!input) return;\n  const output = {};\n\n  for (const [key, value] of Object.entries(input)) {\n    output[key in mappings ? mappings[key] : key] = value;\n  }\n\n  return output;\n}\n\nclass Config {\n  constructor(options) {\n    options = options || {};\n    this.tags = {};\n    tagger.add(this.tags, process.env.DD_TAGS);\n    tagger.add(this.tags, process.env.DD_TRACE_TAGS);\n    tagger.add(this.tags, process.env.DD_TRACE_GLOBAL_TAGS);\n    tagger.add(this.tags, options.tags);\n    const DD_TRACING_ENABLED = coalesce(process.env.DD_TRACING_ENABLED, true);\n    const DD_PROFILING_ENABLED = coalesce(options.profiling, // TODO: remove when enabled by default\n    process.env.DD_EXPERIMENTAL_PROFILING_ENABLED, process.env.DD_PROFILING_ENABLED, false);\n    const DD_PROFILING_EXPORTERS = coalesce(process.env.DD_PROFILING_EXPORTERS, 'agent');\n    const DD_PROFILING_SOURCE_MAP = process.env.DD_PROFILING_SOURCE_MAP;\n    const DD_LOGS_INJECTION = coalesce(options.logInjection, process.env.DD_LOGS_INJECTION, false);\n    const DD_RUNTIME_METRICS_ENABLED = coalesce(options.runtimeMetrics, // TODO: remove when enabled by default\n    process.env.DD_RUNTIME_METRICS_ENABLED, false);\n    const DD_AGENT_HOST = coalesce(options.hostname, process.env.DD_AGENT_HOST, process.env.DD_TRACE_AGENT_HOSTNAME, '127.0.0.1');\n    const DD_TRACE_AGENT_PORT = coalesce(options.port, process.env.DD_TRACE_AGENT_PORT, '8126');\n    const DD_TRACE_AGENT_URL = coalesce(options.url, process.env.DD_TRACE_AGENT_URL, process.env.DD_TRACE_URL, null);\n    const DD_CIVISIBILITY_AGENTLESS_URL = process.env.DD_CIVISIBILITY_AGENTLESS_URL;\n    const DD_CIVISIBILITY_ITR_ENABLED = coalesce(process.env.DD_CIVISIBILITY_ITR_ENABLED, false);\n    const DD_SERVICE = options.service || process.env.DD_SERVICE || process.env.DD_SERVICE_NAME || this.tags.service || process.env.AWS_LAMBDA_FUNCTION_NAME || pkg.name || 'node';\n    const DD_SERVICE_MAPPING = process.env.DD_SERVICE_MAPPING || '';\n    const DD_ENV = coalesce(options.env, process.env.DD_ENV, this.tags.env);\n    const DD_VERSION = coalesce(options.version, process.env.DD_VERSION, this.tags.version, pkg.version);\n    const DD_TRACE_STARTUP_LOGS = coalesce(options.startupLogs, process.env.DD_TRACE_STARTUP_LOGS, false);\n    const DD_TRACE_TELEMETRY_ENABLED = coalesce(process.env.DD_TRACE_TELEMETRY_ENABLED, !process.env.AWS_LAMBDA_FUNCTION_NAME);\n    const DD_TRACE_DEBUG = coalesce(process.env.DD_TRACE_DEBUG, false);\n    const DD_TRACE_AGENT_PROTOCOL_VERSION = coalesce(options.protocolVersion, process.env.DD_TRACE_AGENT_PROTOCOL_VERSION, '0.4');\n    const DD_TRACE_PARTIAL_FLUSH_MIN_SPANS = coalesce(parseInt(options.flushMinSpans), parseInt(process.env.DD_TRACE_PARTIAL_FLUSH_MIN_SPANS), 1000);\n    const DD_TRACE_CLIENT_IP_HEADER_DISABLED = coalesce(process.env.DD_TRACE_CLIENT_IP_HEADER_DISABLED, false);\n    const DD_TRACE_CLIENT_IP_HEADER = coalesce(process.env.DD_TRACE_CLIENT_IP_HEADER, null);\n    const DD_TRACE_B3_ENABLED = coalesce(options.experimental && options.experimental.b3, process.env.DD_TRACE_EXPERIMENTAL_B3_ENABLED, false);\n    const DD_TRACE_TRACEPARENT_ENABLED = coalesce(options.experimental && options.experimental.traceparent, process.env.DD_TRACE_EXPERIMENTAL_TRACEPARENT_ENABLED, false);\n    const DD_TRACE_RUNTIME_ID_ENABLED = coalesce(options.experimental && options.experimental.runtimeId, process.env.DD_TRACE_EXPERIMENTAL_RUNTIME_ID_ENABLED, false);\n    const DD_TRACE_EXPORTER = coalesce(options.experimental && options.experimental.exporter, process.env.DD_TRACE_EXPERIMENTAL_EXPORTER);\n    const DD_TRACE_GET_RUM_DATA_ENABLED = coalesce(options.experimental && options.experimental.enableGetRumData, process.env.DD_TRACE_EXPERIMENTAL_GET_RUM_DATA_ENABLED, false);\n    const DD_TRACE_X_DATADOG_TAGS_MAX_LENGTH = coalesce(process.env.DD_TRACE_X_DATADOG_TAGS_MAX_LENGTH, '512');\n    const DD_TRACE_STATS_COMPUTATION_ENABLED = coalesce(options.stats, process.env.DD_TRACE_STATS_COMPUTATION_ENABLED, false);\n    let appsec = options.appsec || options.experimental && options.experimental.appsec;\n    const DD_APPSEC_ENABLED = coalesce(appsec && (appsec === true || appsec.enabled === true), // TODO: remove when enabled by default\n    process.env.DD_APPSEC_ENABLED, false);\n    appsec = appsec || {};\n    const DD_APPSEC_RULES = coalesce(appsec.rules, process.env.DD_APPSEC_RULES, path.join(__dirname, 'appsec', 'recommended.json'));\n    const DD_APPSEC_TRACE_RATE_LIMIT = coalesce(parseInt(appsec.rateLimit), parseInt(process.env.DD_APPSEC_TRACE_RATE_LIMIT), 100);\n    const DD_APPSEC_WAF_TIMEOUT = coalesce(parseInt(appsec.wafTimeout), parseInt(process.env.DD_APPSEC_WAF_TIMEOUT), 5e3 // Âµs\n    );\n    const DD_APPSEC_OBFUSCATION_PARAMETER_KEY_REGEXP = coalesce(appsec.obfuscatorKeyRegex, process.env.DD_APPSEC_OBFUSCATION_PARAMETER_KEY_REGEXP, `(?i)(?:p(?:ass)?w(?:or)?d|pass(?:_?phrase)?|secret|(?:api_?|private_?|public_?)key)|token|consumer_?(?:id|key|se\\\ncret)|sign(?:ed|ature)|bearer|authorization`);\n    const DD_APPSEC_OBFUSCATION_PARAMETER_VALUE_REGEXP = coalesce(appsec.obfuscatorValueRegex, process.env.DD_APPSEC_OBFUSCATION_PARAMETER_VALUE_REGEXP, `(?i)(?:p(?:ass)?w(?:or)?d|pass(?:_?phrase)?|secret|(?:api_?|private_?|public_?|access_?|secret_?)key(?:_?id)?|to\\\nken|consumer_?(?:id|key|secret)|sign(?:ed|ature)?|auth(?:entication|orization)?)(?:\\\\s*=[^;]|\"\\\\s*:\\\\s*\"[^\"]+\")|bearer\\\n\\\\s+[a-z0-9\\\\._\\\\-]+|token:[a-z0-9]{13}|gh[opsu]_[0-9a-zA-Z]{36}|ey[I-L][\\\\w=-]+\\\\.ey[I-L][\\\\w=-]+(?:\\\\.[\\\\w.+\\\\/=-]+)?\\\n|[\\\\-]{5}BEGIN[a-z\\\\s]+PRIVATE\\\\sKEY[\\\\-]{5}[^\\\\-]+[\\\\-]{5}END[a-z\\\\s]+PRIVATE\\\\sKEY|ssh-rsa\\\\s*[a-z0-9\\\\/\\\\.+]{100,}`);\n    const iastOptions = options.experimental && options.experimental.iast;\n    const DD_IAST_ENABLED = coalesce(iastOptions && (iastOptions === true || iastOptions.enabled === true), process.env.DD_IAST_ENABLED, false);\n    const defaultIastRequestSampling = 30;\n    const iastRequestSampling = coalesce(parseInt(iastOptions && iastOptions.requestSampling), parseInt(process.env.DD_IAST_REQUEST_SAMPLING), defaultIastRequestSampling);\n    const DD_IAST_REQUEST_SAMPLING = iastRequestSampling < 0 || iastRequestSampling > 100 ? defaultIastRequestSampling : iastRequestSampling;\n    const DD_IAST_MAX_CONCURRENT_REQUESTS = coalesce(parseInt(iastOptions && iastOptions.maxConcurrentRequests), parseInt(process.env.DD_IAST_MAX_CONCURRENT_REQUESTS), 2);\n    const DD_IAST_MAX_CONTEXT_OPERATIONS = coalesce(parseInt(iastOptions && iastOptions.maxContextOperations), parseInt(process.env.DD_IAST_MAX_CONTEXT_OPERATIONS), 2);\n    const DD_CIVISIBILITY_GIT_UPLOAD_ENABLED = coalesce(process.env.DD_CIVISIBILITY_GIT_UPLOAD_ENABLED, false);\n    const ingestion = options.ingestion || {};\n    const dogstatsd = coalesce(options.dogstatsd, {});\n    const sampler = {\n      sampleRate: coalesce(options.sampleRate, process.env.DD_TRACE_SAMPLE_RATE, ingestion.sampleRate),\n      rateLimit: coalesce(options.rateLimit, process.env.DD_TRACE_RATE_LIMIT, ingestion.rateLimit),\n      rules: coalesce(options.samplingRules, safeJsonParse(process.env.DD_TRACE_SAMPLING_RULES), []).map(rule => {\n        return remapify(rule, {\n          sample_rate: 'sampleRate'\n        });\n      })\n    };\n    const inAWSLambda = process.env.AWS_LAMBDA_FUNCTION_NAME !== undefined;\n    const defaultFlushInterval = inAWSLambda ? 0 : 2000;\n    this.tracing = !isFalse(DD_TRACING_ENABLED);\n    this.debug = isTrue(DD_TRACE_DEBUG);\n    this.logInjection = isTrue(DD_LOGS_INJECTION);\n    this.env = DD_ENV;\n    this.url = DD_CIVISIBILITY_AGENTLESS_URL ? new URL(DD_CIVISIBILITY_AGENTLESS_URL) : getAgentUrl(DD_TRACE_AGENT_URL, options);\n    this.site = coalesce(options.site, process.env.DD_SITE, 'datadoghq.com');\n    this.hostname = DD_AGENT_HOST || this.url && this.url.hostname;\n    this.port = String(DD_TRACE_AGENT_PORT || this.url && this.url.port);\n    this.flushInterval = coalesce(parseInt(options.flushInterval, 10), defaultFlushInterval);\n    this.flushMinSpans = DD_TRACE_PARTIAL_FLUSH_MIN_SPANS;\n    this.sampleRate = coalesce(Math.min(Math.max(sampler.sampleRate, 0), 1), 1);\n    this.clientIpHeaderDisabled = isTrue(DD_TRACE_CLIENT_IP_HEADER_DISABLED);\n    this.clientIpHeader = DD_TRACE_CLIENT_IP_HEADER;\n    this.logger = options.logger;\n    this.plugins = !!coalesce(options.plugins, true);\n    this.service = DD_SERVICE;\n    this.serviceMapping = DD_SERVICE_MAPPING.length ? fromEntries(DD_SERVICE_MAPPING.split(',').map(x => x.trim().split(':'))) : {};\n    this.version = DD_VERSION;\n    this.dogstatsd = {\n      hostname: coalesce(dogstatsd.hostname, process.env.DD_DOGSTATSD_HOSTNAME, this.hostname),\n      port: String(coalesce(dogstatsd.port, process.env.DD_DOGSTATSD_PORT, 8125))\n    };\n    this.runtimeMetrics = isTrue(DD_RUNTIME_METRICS_ENABLED);\n    this.experimental = {\n      b3: isTrue(DD_TRACE_B3_ENABLED),\n      traceparent: isTrue(DD_TRACE_TRACEPARENT_ENABLED),\n      runtimeId: isTrue(DD_TRACE_RUNTIME_ID_ENABLED),\n      exporter: DD_TRACE_EXPORTER,\n      enableGetRumData: isTrue(DD_TRACE_GET_RUM_DATA_ENABLED)\n    };\n    this.sampler = sampler;\n    this.reportHostname = isTrue(coalesce(options.reportHostname, process.env.DD_TRACE_REPORT_HOSTNAME, false));\n    this.scope = process.env.DD_TRACE_SCOPE;\n    this.logLevel = coalesce(options.logLevel, process.env.DD_TRACE_LOG_LEVEL, 'debug');\n    this.profiling = {\n      enabled: isTrue(DD_PROFILING_ENABLED),\n      sourceMap: !isFalse(DD_PROFILING_SOURCE_MAP),\n      exporters: DD_PROFILING_EXPORTERS\n    };\n    this.lookup = options.lookup;\n    this.startupLogs = isTrue(DD_TRACE_STARTUP_LOGS); // Disabled for CI Visibility's agentless\n\n    this.telemetryEnabled = DD_TRACE_EXPORTER !== 'datadog' && isTrue(DD_TRACE_TELEMETRY_ENABLED);\n    this.protocolVersion = DD_TRACE_AGENT_PROTOCOL_VERSION;\n    this.tagsHeaderMaxLength = parseInt(DD_TRACE_X_DATADOG_TAGS_MAX_LENGTH);\n    this.appsec = {\n      enabled: isTrue(DD_APPSEC_ENABLED),\n      rules: DD_APPSEC_RULES,\n      rateLimit: DD_APPSEC_TRACE_RATE_LIMIT,\n      wafTimeout: DD_APPSEC_WAF_TIMEOUT,\n      obfuscatorKeyRegex: DD_APPSEC_OBFUSCATION_PARAMETER_KEY_REGEXP,\n      obfuscatorValueRegex: DD_APPSEC_OBFUSCATION_PARAMETER_VALUE_REGEXP\n    };\n    this.iast = {\n      enabled: isTrue(DD_IAST_ENABLED),\n      requestSampling: DD_IAST_REQUEST_SAMPLING,\n      maxConcurrentRequests: DD_IAST_MAX_CONCURRENT_REQUESTS,\n      maxContextOperations: DD_IAST_MAX_CONTEXT_OPERATIONS\n    };\n    this.isGitUploadEnabled = isTrue(DD_CIVISIBILITY_GIT_UPLOAD_ENABLED);\n    this.isIntelligentTestRunnerEnabled = isTrue(DD_CIVISIBILITY_ITR_ENABLED);\n    this.stats = {\n      enabled: isTrue(DD_TRACE_STATS_COMPUTATION_ENABLED)\n    };\n    tagger.add(this.tags, {\n      service: this.service,\n      env: this.env,\n      version: this.version,\n      'runtime-id': uuid()\n    });\n  }\n\n}\n\nfunction getAgentUrl(url, options) {\n  if (url) return new URL(url);\n  if (os.type() === 'Windows_NT') return;\n\n  if (!options.hostname && !options.port && !process.env.DD_AGENT_HOST && !process.env.DD_TRACE_AGENT_HOSTNAME && !process.env.DD_TRACE_AGENT_PORT && fs.existsSync('/var/run/datadog/apm.socket')) {\n    return new URL('unix:///var/run/datadog/apm.socket');\n  }\n}\n\nmodule.exports = Config;","map":{"version":3,"names":["fs","require","os","URL","path","pkg","coalesce","tagger","isTrue","isFalse","uuid","fromEntries","Object","entries","reduce","obj","k","v","assign","safeJsonParse","input","JSON","parse","err","undefined","remapify","mappings","output","key","value","Config","constructor","options","tags","add","process","env","DD_TAGS","DD_TRACE_TAGS","DD_TRACE_GLOBAL_TAGS","DD_TRACING_ENABLED","DD_PROFILING_ENABLED","profiling","DD_EXPERIMENTAL_PROFILING_ENABLED","DD_PROFILING_EXPORTERS","DD_PROFILING_SOURCE_MAP","DD_LOGS_INJECTION","logInjection","DD_RUNTIME_METRICS_ENABLED","runtimeMetrics","DD_AGENT_HOST","hostname","DD_TRACE_AGENT_HOSTNAME","DD_TRACE_AGENT_PORT","port","DD_TRACE_AGENT_URL","url","DD_TRACE_URL","DD_CIVISIBILITY_AGENTLESS_URL","DD_CIVISIBILITY_ITR_ENABLED","DD_SERVICE","service","DD_SERVICE_NAME","AWS_LAMBDA_FUNCTION_NAME","name","DD_SERVICE_MAPPING","DD_ENV","DD_VERSION","version","DD_TRACE_STARTUP_LOGS","startupLogs","DD_TRACE_TELEMETRY_ENABLED","DD_TRACE_DEBUG","DD_TRACE_AGENT_PROTOCOL_VERSION","protocolVersion","DD_TRACE_PARTIAL_FLUSH_MIN_SPANS","parseInt","flushMinSpans","DD_TRACE_CLIENT_IP_HEADER_DISABLED","DD_TRACE_CLIENT_IP_HEADER","DD_TRACE_B3_ENABLED","experimental","b3","DD_TRACE_EXPERIMENTAL_B3_ENABLED","DD_TRACE_TRACEPARENT_ENABLED","traceparent","DD_TRACE_EXPERIMENTAL_TRACEPARENT_ENABLED","DD_TRACE_RUNTIME_ID_ENABLED","runtimeId","DD_TRACE_EXPERIMENTAL_RUNTIME_ID_ENABLED","DD_TRACE_EXPORTER","exporter","DD_TRACE_EXPERIMENTAL_EXPORTER","DD_TRACE_GET_RUM_DATA_ENABLED","enableGetRumData","DD_TRACE_EXPERIMENTAL_GET_RUM_DATA_ENABLED","DD_TRACE_X_DATADOG_TAGS_MAX_LENGTH","DD_TRACE_STATS_COMPUTATION_ENABLED","stats","appsec","DD_APPSEC_ENABLED","enabled","DD_APPSEC_RULES","rules","join","__dirname","DD_APPSEC_TRACE_RATE_LIMIT","rateLimit","DD_APPSEC_WAF_TIMEOUT","wafTimeout","DD_APPSEC_OBFUSCATION_PARAMETER_KEY_REGEXP","obfuscatorKeyRegex","DD_APPSEC_OBFUSCATION_PARAMETER_VALUE_REGEXP","obfuscatorValueRegex","iastOptions","iast","DD_IAST_ENABLED","defaultIastRequestSampling","iastRequestSampling","requestSampling","DD_IAST_REQUEST_SAMPLING","DD_IAST_MAX_CONCURRENT_REQUESTS","maxConcurrentRequests","DD_IAST_MAX_CONTEXT_OPERATIONS","maxContextOperations","DD_CIVISIBILITY_GIT_UPLOAD_ENABLED","ingestion","dogstatsd","sampler","sampleRate","DD_TRACE_SAMPLE_RATE","DD_TRACE_RATE_LIMIT","samplingRules","DD_TRACE_SAMPLING_RULES","map","rule","sample_rate","inAWSLambda","defaultFlushInterval","tracing","debug","getAgentUrl","site","DD_SITE","String","flushInterval","Math","min","max","clientIpHeaderDisabled","clientIpHeader","logger","plugins","serviceMapping","length","split","x","trim","DD_DOGSTATSD_HOSTNAME","DD_DOGSTATSD_PORT","reportHostname","DD_TRACE_REPORT_HOSTNAME","scope","DD_TRACE_SCOPE","logLevel","DD_TRACE_LOG_LEVEL","sourceMap","exporters","lookup","telemetryEnabled","tagsHeaderMaxLength","isGitUploadEnabled","isIntelligentTestRunnerEnabled","type","existsSync","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/config.js"],"sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst os = require('os')\nconst URL = require('url').URL\nconst path = require('path')\nconst pkg = require('./pkg')\nconst coalesce = require('koalas')\nconst tagger = require('./tagger')\nconst { isTrue, isFalse } = require('./util')\nconst uuid = require('crypto-randomuuid')\n\nconst fromEntries = Object.fromEntries || (entries =>\n  entries.reduce((obj, [k, v]) => Object.assign(obj, { [k]: v }), {}))\n\nfunction safeJsonParse (input) {\n  try {\n    return JSON.parse(input)\n  } catch (err) {\n    return undefined\n  }\n}\n\n// Shallow clone with property name remapping\nfunction remapify (input, mappings) {\n  if (!input) return\n  const output = {}\n  for (const [key, value] of Object.entries(input)) {\n    output[key in mappings ? mappings[key] : key] = value\n  }\n  return output\n}\n\nclass Config {\n  constructor (options) {\n    options = options || {}\n\n    this.tags = {}\n\n    tagger.add(this.tags, process.env.DD_TAGS)\n    tagger.add(this.tags, process.env.DD_TRACE_TAGS)\n    tagger.add(this.tags, process.env.DD_TRACE_GLOBAL_TAGS)\n    tagger.add(this.tags, options.tags)\n\n    const DD_TRACING_ENABLED = coalesce(\n      process.env.DD_TRACING_ENABLED,\n      true\n    )\n    const DD_PROFILING_ENABLED = coalesce(\n      options.profiling, // TODO: remove when enabled by default\n      process.env.DD_EXPERIMENTAL_PROFILING_ENABLED,\n      process.env.DD_PROFILING_ENABLED,\n      false\n    )\n    const DD_PROFILING_EXPORTERS = coalesce(\n      process.env.DD_PROFILING_EXPORTERS,\n      'agent'\n    )\n    const DD_PROFILING_SOURCE_MAP = process.env.DD_PROFILING_SOURCE_MAP\n    const DD_LOGS_INJECTION = coalesce(\n      options.logInjection,\n      process.env.DD_LOGS_INJECTION,\n      false\n    )\n    const DD_RUNTIME_METRICS_ENABLED = coalesce(\n      options.runtimeMetrics, // TODO: remove when enabled by default\n      process.env.DD_RUNTIME_METRICS_ENABLED,\n      false\n    )\n    const DD_AGENT_HOST = coalesce(\n      options.hostname,\n      process.env.DD_AGENT_HOST,\n      process.env.DD_TRACE_AGENT_HOSTNAME,\n      '127.0.0.1'\n    )\n    const DD_TRACE_AGENT_PORT = coalesce(\n      options.port,\n      process.env.DD_TRACE_AGENT_PORT,\n      '8126'\n    )\n    const DD_TRACE_AGENT_URL = coalesce(\n      options.url,\n      process.env.DD_TRACE_AGENT_URL,\n      process.env.DD_TRACE_URL,\n      null\n    )\n    const DD_CIVISIBILITY_AGENTLESS_URL = process.env.DD_CIVISIBILITY_AGENTLESS_URL\n\n    const DD_CIVISIBILITY_ITR_ENABLED = coalesce(\n      process.env.DD_CIVISIBILITY_ITR_ENABLED,\n      false\n    )\n\n    const DD_SERVICE = options.service ||\n      process.env.DD_SERVICE ||\n      process.env.DD_SERVICE_NAME ||\n      this.tags.service ||\n      process.env.AWS_LAMBDA_FUNCTION_NAME ||\n      pkg.name ||\n      'node'\n    const DD_SERVICE_MAPPING = process.env.DD_SERVICE_MAPPING || ''\n    const DD_ENV = coalesce(\n      options.env,\n      process.env.DD_ENV,\n      this.tags.env\n    )\n    const DD_VERSION = coalesce(\n      options.version,\n      process.env.DD_VERSION,\n      this.tags.version,\n      pkg.version\n    )\n    const DD_TRACE_STARTUP_LOGS = coalesce(\n      options.startupLogs,\n      process.env.DD_TRACE_STARTUP_LOGS,\n      false\n    )\n    const DD_TRACE_TELEMETRY_ENABLED = coalesce(\n      process.env.DD_TRACE_TELEMETRY_ENABLED,\n      !process.env.AWS_LAMBDA_FUNCTION_NAME\n    )\n    const DD_TRACE_DEBUG = coalesce(\n      process.env.DD_TRACE_DEBUG,\n      false\n    )\n    const DD_TRACE_AGENT_PROTOCOL_VERSION = coalesce(\n      options.protocolVersion,\n      process.env.DD_TRACE_AGENT_PROTOCOL_VERSION,\n      '0.4'\n    )\n    const DD_TRACE_PARTIAL_FLUSH_MIN_SPANS = coalesce(\n      parseInt(options.flushMinSpans),\n      parseInt(process.env.DD_TRACE_PARTIAL_FLUSH_MIN_SPANS),\n      1000\n    )\n    const DD_TRACE_CLIENT_IP_HEADER_DISABLED = coalesce(\n      process.env.DD_TRACE_CLIENT_IP_HEADER_DISABLED,\n      false\n    )\n    const DD_TRACE_CLIENT_IP_HEADER = coalesce(\n      process.env.DD_TRACE_CLIENT_IP_HEADER,\n      null\n    )\n    const DD_TRACE_B3_ENABLED = coalesce(\n      options.experimental && options.experimental.b3,\n      process.env.DD_TRACE_EXPERIMENTAL_B3_ENABLED,\n      false\n    )\n    const DD_TRACE_TRACEPARENT_ENABLED = coalesce(\n      options.experimental && options.experimental.traceparent,\n      process.env.DD_TRACE_EXPERIMENTAL_TRACEPARENT_ENABLED,\n      false\n    )\n    const DD_TRACE_RUNTIME_ID_ENABLED = coalesce(\n      options.experimental && options.experimental.runtimeId,\n      process.env.DD_TRACE_EXPERIMENTAL_RUNTIME_ID_ENABLED,\n      false\n    )\n    const DD_TRACE_EXPORTER = coalesce(\n      options.experimental && options.experimental.exporter,\n      process.env.DD_TRACE_EXPERIMENTAL_EXPORTER\n    )\n    const DD_TRACE_GET_RUM_DATA_ENABLED = coalesce(\n      options.experimental && options.experimental.enableGetRumData,\n      process.env.DD_TRACE_EXPERIMENTAL_GET_RUM_DATA_ENABLED,\n      false\n    )\n\n    const DD_TRACE_X_DATADOG_TAGS_MAX_LENGTH = coalesce(\n      process.env.DD_TRACE_X_DATADOG_TAGS_MAX_LENGTH,\n      '512'\n    )\n\n    const DD_TRACE_STATS_COMPUTATION_ENABLED = coalesce(\n      options.stats,\n      process.env.DD_TRACE_STATS_COMPUTATION_ENABLED,\n      false\n    )\n\n    let appsec = options.appsec || (options.experimental && options.experimental.appsec)\n\n    const DD_APPSEC_ENABLED = coalesce(\n      appsec && (appsec === true || appsec.enabled === true), // TODO: remove when enabled by default\n      process.env.DD_APPSEC_ENABLED,\n      false\n    )\n\n    appsec = appsec || {}\n\n    const DD_APPSEC_RULES = coalesce(\n      appsec.rules,\n      process.env.DD_APPSEC_RULES,\n      path.join(__dirname, 'appsec', 'recommended.json')\n    )\n    const DD_APPSEC_TRACE_RATE_LIMIT = coalesce(\n      parseInt(appsec.rateLimit),\n      parseInt(process.env.DD_APPSEC_TRACE_RATE_LIMIT),\n      100\n    )\n    const DD_APPSEC_WAF_TIMEOUT = coalesce(\n      parseInt(appsec.wafTimeout),\n      parseInt(process.env.DD_APPSEC_WAF_TIMEOUT),\n      5e3 // Âµs\n    )\n    const DD_APPSEC_OBFUSCATION_PARAMETER_KEY_REGEXP = coalesce(\n      appsec.obfuscatorKeyRegex,\n      process.env.DD_APPSEC_OBFUSCATION_PARAMETER_KEY_REGEXP,\n      `(?i)(?:p(?:ass)?w(?:or)?d|pass(?:_?phrase)?|secret|(?:api_?|private_?|public_?)key)|token|consumer_?(?:id|key|se\\\ncret)|sign(?:ed|ature)|bearer|authorization`\n    )\n    const DD_APPSEC_OBFUSCATION_PARAMETER_VALUE_REGEXP = coalesce(\n      appsec.obfuscatorValueRegex,\n      process.env.DD_APPSEC_OBFUSCATION_PARAMETER_VALUE_REGEXP,\n      `(?i)(?:p(?:ass)?w(?:or)?d|pass(?:_?phrase)?|secret|(?:api_?|private_?|public_?|access_?|secret_?)key(?:_?id)?|to\\\nken|consumer_?(?:id|key|secret)|sign(?:ed|ature)?|auth(?:entication|orization)?)(?:\\\\s*=[^;]|\"\\\\s*:\\\\s*\"[^\"]+\")|bearer\\\n\\\\s+[a-z0-9\\\\._\\\\-]+|token:[a-z0-9]{13}|gh[opsu]_[0-9a-zA-Z]{36}|ey[I-L][\\\\w=-]+\\\\.ey[I-L][\\\\w=-]+(?:\\\\.[\\\\w.+\\\\/=-]+)?\\\n|[\\\\-]{5}BEGIN[a-z\\\\s]+PRIVATE\\\\sKEY[\\\\-]{5}[^\\\\-]+[\\\\-]{5}END[a-z\\\\s]+PRIVATE\\\\sKEY|ssh-rsa\\\\s*[a-z0-9\\\\/\\\\.+]{100,}`\n    )\n\n    const iastOptions = options.experimental && options.experimental.iast\n    const DD_IAST_ENABLED = coalesce(\n      iastOptions &&\n      (iastOptions === true || iastOptions.enabled === true),\n      process.env.DD_IAST_ENABLED,\n      false\n    )\n\n    const defaultIastRequestSampling = 30\n    const iastRequestSampling = coalesce(\n      parseInt(iastOptions && iastOptions.requestSampling),\n      parseInt(process.env.DD_IAST_REQUEST_SAMPLING),\n      defaultIastRequestSampling\n    )\n    const DD_IAST_REQUEST_SAMPLING = iastRequestSampling < 0 ||\n      iastRequestSampling > 100 ? defaultIastRequestSampling : iastRequestSampling\n\n    const DD_IAST_MAX_CONCURRENT_REQUESTS = coalesce(\n      parseInt(iastOptions && iastOptions.maxConcurrentRequests),\n      parseInt(process.env.DD_IAST_MAX_CONCURRENT_REQUESTS),\n      2\n    )\n\n    const DD_IAST_MAX_CONTEXT_OPERATIONS = coalesce(\n      parseInt(iastOptions && iastOptions.maxContextOperations),\n      parseInt(process.env.DD_IAST_MAX_CONTEXT_OPERATIONS),\n      2\n    )\n\n    const DD_CIVISIBILITY_GIT_UPLOAD_ENABLED = coalesce(\n      process.env.DD_CIVISIBILITY_GIT_UPLOAD_ENABLED,\n      false\n    )\n\n    const ingestion = options.ingestion || {}\n    const dogstatsd = coalesce(options.dogstatsd, {})\n    const sampler = {\n      sampleRate: coalesce(\n        options.sampleRate,\n        process.env.DD_TRACE_SAMPLE_RATE,\n        ingestion.sampleRate\n      ),\n      rateLimit: coalesce(options.rateLimit, process.env.DD_TRACE_RATE_LIMIT, ingestion.rateLimit),\n      rules: coalesce(options.samplingRules, safeJsonParse(process.env.DD_TRACE_SAMPLING_RULES), []).map(rule => {\n        return remapify(rule, {\n          sample_rate: 'sampleRate'\n        })\n      })\n    }\n\n    const inAWSLambda = process.env.AWS_LAMBDA_FUNCTION_NAME !== undefined\n    const defaultFlushInterval = inAWSLambda ? 0 : 2000\n\n    this.tracing = !isFalse(DD_TRACING_ENABLED)\n    this.debug = isTrue(DD_TRACE_DEBUG)\n    this.logInjection = isTrue(DD_LOGS_INJECTION)\n    this.env = DD_ENV\n    this.url = DD_CIVISIBILITY_AGENTLESS_URL ? new URL(DD_CIVISIBILITY_AGENTLESS_URL)\n      : getAgentUrl(DD_TRACE_AGENT_URL, options)\n    this.site = coalesce(options.site, process.env.DD_SITE, 'datadoghq.com')\n    this.hostname = DD_AGENT_HOST || (this.url && this.url.hostname)\n    this.port = String(DD_TRACE_AGENT_PORT || (this.url && this.url.port))\n    this.flushInterval = coalesce(parseInt(options.flushInterval, 10), defaultFlushInterval)\n    this.flushMinSpans = DD_TRACE_PARTIAL_FLUSH_MIN_SPANS\n    this.sampleRate = coalesce(Math.min(Math.max(sampler.sampleRate, 0), 1), 1)\n    this.clientIpHeaderDisabled = isTrue(DD_TRACE_CLIENT_IP_HEADER_DISABLED)\n    this.clientIpHeader = DD_TRACE_CLIENT_IP_HEADER\n    this.logger = options.logger\n    this.plugins = !!coalesce(options.plugins, true)\n    this.service = DD_SERVICE\n    this.serviceMapping = DD_SERVICE_MAPPING.length ? fromEntries(\n      DD_SERVICE_MAPPING.split(',').map(x => x.trim().split(':'))\n    ) : {}\n    this.version = DD_VERSION\n    this.dogstatsd = {\n      hostname: coalesce(dogstatsd.hostname, process.env.DD_DOGSTATSD_HOSTNAME, this.hostname),\n      port: String(coalesce(dogstatsd.port, process.env.DD_DOGSTATSD_PORT, 8125))\n    }\n    this.runtimeMetrics = isTrue(DD_RUNTIME_METRICS_ENABLED)\n    this.experimental = {\n      b3: isTrue(DD_TRACE_B3_ENABLED),\n      traceparent: isTrue(DD_TRACE_TRACEPARENT_ENABLED),\n      runtimeId: isTrue(DD_TRACE_RUNTIME_ID_ENABLED),\n      exporter: DD_TRACE_EXPORTER,\n      enableGetRumData: isTrue(DD_TRACE_GET_RUM_DATA_ENABLED)\n    }\n    this.sampler = sampler\n    this.reportHostname = isTrue(coalesce(options.reportHostname, process.env.DD_TRACE_REPORT_HOSTNAME, false))\n    this.scope = process.env.DD_TRACE_SCOPE\n    this.logLevel = coalesce(\n      options.logLevel,\n      process.env.DD_TRACE_LOG_LEVEL,\n      'debug'\n    )\n    this.profiling = {\n      enabled: isTrue(DD_PROFILING_ENABLED),\n      sourceMap: !isFalse(DD_PROFILING_SOURCE_MAP),\n      exporters: DD_PROFILING_EXPORTERS\n    }\n    this.lookup = options.lookup\n    this.startupLogs = isTrue(DD_TRACE_STARTUP_LOGS)\n    // Disabled for CI Visibility's agentless\n    this.telemetryEnabled = DD_TRACE_EXPORTER !== 'datadog' && isTrue(DD_TRACE_TELEMETRY_ENABLED)\n    this.protocolVersion = DD_TRACE_AGENT_PROTOCOL_VERSION\n    this.tagsHeaderMaxLength = parseInt(DD_TRACE_X_DATADOG_TAGS_MAX_LENGTH)\n    this.appsec = {\n      enabled: isTrue(DD_APPSEC_ENABLED),\n      rules: DD_APPSEC_RULES,\n      rateLimit: DD_APPSEC_TRACE_RATE_LIMIT,\n      wafTimeout: DD_APPSEC_WAF_TIMEOUT,\n      obfuscatorKeyRegex: DD_APPSEC_OBFUSCATION_PARAMETER_KEY_REGEXP,\n      obfuscatorValueRegex: DD_APPSEC_OBFUSCATION_PARAMETER_VALUE_REGEXP\n    }\n    this.iast = {\n      enabled: isTrue(DD_IAST_ENABLED),\n      requestSampling: DD_IAST_REQUEST_SAMPLING,\n      maxConcurrentRequests: DD_IAST_MAX_CONCURRENT_REQUESTS,\n      maxContextOperations: DD_IAST_MAX_CONTEXT_OPERATIONS\n    }\n    this.isGitUploadEnabled = isTrue(DD_CIVISIBILITY_GIT_UPLOAD_ENABLED)\n    this.isIntelligentTestRunnerEnabled = isTrue(DD_CIVISIBILITY_ITR_ENABLED)\n    this.stats = {\n      enabled: isTrue(DD_TRACE_STATS_COMPUTATION_ENABLED)\n    }\n\n    tagger.add(this.tags, {\n      service: this.service,\n      env: this.env,\n      version: this.version,\n      'runtime-id': uuid()\n    })\n  }\n}\n\nfunction getAgentUrl (url, options) {\n  if (url) return new URL(url)\n\n  if (os.type() === 'Windows_NT') return\n\n  if (\n    !options.hostname &&\n    !options.port &&\n    !process.env.DD_AGENT_HOST &&\n    !process.env.DD_TRACE_AGENT_HOSTNAME &&\n    !process.env.DD_TRACE_AGENT_PORT &&\n    fs.existsSync('/var/run/datadog/apm.socket')\n  ) {\n    return new URL('unix:///var/run/datadog/apm.socket')\n  }\n}\n\nmodule.exports = Config\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}