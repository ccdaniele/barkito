{"ast":null,"code":"'use strict';\n\nconst OVERHEAD_CONTROLLER_CONTEXT_KEY = 'oce';\nconst REPORT_VULNERABILITY = 'REPORT_VULNERABILITY';\nconst GLOBAL_OCE_CONTEXT = {};\nlet config = {};\nlet availableRequest = 0;\nconst OPERATIONS = {\n  REPORT_VULNERABILITY: {\n    hasQuota: context => {\n      const reserved = context && context.tokens && context.tokens[REPORT_VULNERABILITY] > 0;\n\n      if (reserved) {\n        context.tokens[REPORT_VULNERABILITY]--;\n      }\n\n      return reserved;\n    },\n    name: REPORT_VULNERABILITY,\n\n    initialTokenBucketSize() {\n      return typeof config.maxContextOperations === 'number' ? config.maxContextOperations : 2;\n    },\n\n    initContext: function (context) {\n      context.tokens[REPORT_VULNERABILITY] = this.initialTokenBucketSize();\n    }\n  }\n};\n\nfunction _getNewContext() {\n  const oceContext = {\n    tokens: {}\n  };\n\n  for (const operation in OPERATIONS) {\n    OPERATIONS[operation].initContext(oceContext);\n  }\n\n  return oceContext;\n}\n\nfunction _getContext(iastContext) {\n  if (iastContext && iastContext[OVERHEAD_CONTROLLER_CONTEXT_KEY]) {\n    return iastContext[OVERHEAD_CONTROLLER_CONTEXT_KEY];\n  }\n\n  return GLOBAL_OCE_CONTEXT;\n}\n\nfunction _resetGlobalContext() {\n  Object.assign(GLOBAL_OCE_CONTEXT, _getNewContext());\n}\n\nfunction acquireRequest(rootSpan) {\n  if (availableRequest > 0) {\n    const sampling = config && typeof config.requestSampling === 'number' ? config.requestSampling : 30;\n\n    if (rootSpan.context().toSpanId().slice(-2) <= sampling) {\n      availableRequest--;\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction releaseRequest() {\n  if (availableRequest < config.maxConcurrentRequests) {\n    availableRequest++;\n  }\n}\n\nfunction hasQuota(operation, iastContext) {\n  const oceContext = _getContext(iastContext);\n\n  return operation.hasQuota(oceContext);\n}\n\nfunction initializeRequestContext(iastContext) {\n  if (iastContext) iastContext[OVERHEAD_CONTROLLER_CONTEXT_KEY] = _getNewContext();\n}\n\nfunction configure(cfg) {\n  config = cfg;\n  availableRequest = config.maxConcurrentRequests;\n}\n\n_resetGlobalContext();\n\nmodule.exports = {\n  OVERHEAD_CONTROLLER_CONTEXT_KEY,\n  OPERATIONS,\n  _resetGlobalContext,\n  initializeRequestContext,\n  hasQuota,\n  acquireRequest,\n  releaseRequest,\n  configure\n};","map":{"version":3,"names":["OVERHEAD_CONTROLLER_CONTEXT_KEY","REPORT_VULNERABILITY","GLOBAL_OCE_CONTEXT","config","availableRequest","OPERATIONS","hasQuota","context","reserved","tokens","name","initialTokenBucketSize","maxContextOperations","initContext","_getNewContext","oceContext","operation","_getContext","iastContext","_resetGlobalContext","Object","assign","acquireRequest","rootSpan","sampling","requestSampling","toSpanId","slice","releaseRequest","maxConcurrentRequests","initializeRequestContext","configure","cfg","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/appsec/iast/overhead-controller.js"],"sourcesContent":["'use strict'\n\nconst OVERHEAD_CONTROLLER_CONTEXT_KEY = 'oce'\nconst REPORT_VULNERABILITY = 'REPORT_VULNERABILITY'\n\nconst GLOBAL_OCE_CONTEXT = {}\nlet config = {}\nlet availableRequest = 0\nconst OPERATIONS = {\n  REPORT_VULNERABILITY: {\n    hasQuota: (context) => {\n      const reserved = context && context.tokens && context.tokens[REPORT_VULNERABILITY] > 0\n      if (reserved) {\n        context.tokens[REPORT_VULNERABILITY]--\n      }\n      return reserved\n    },\n    name: REPORT_VULNERABILITY,\n    initialTokenBucketSize () {\n      return typeof config.maxContextOperations === 'number' ? config.maxContextOperations : 2\n    },\n    initContext: function (context) {\n      context.tokens[REPORT_VULNERABILITY] = this.initialTokenBucketSize()\n    }\n  }\n}\n\nfunction _getNewContext () {\n  const oceContext = {\n    tokens: {}\n  }\n\n  for (const operation in OPERATIONS) {\n    OPERATIONS[operation].initContext(oceContext)\n  }\n\n  return oceContext\n}\n\nfunction _getContext (iastContext) {\n  if (iastContext && iastContext[OVERHEAD_CONTROLLER_CONTEXT_KEY]) {\n    return iastContext[OVERHEAD_CONTROLLER_CONTEXT_KEY]\n  }\n  return GLOBAL_OCE_CONTEXT\n}\n\nfunction _resetGlobalContext () {\n  Object.assign(GLOBAL_OCE_CONTEXT, _getNewContext())\n}\n\nfunction acquireRequest (rootSpan) {\n  if (availableRequest > 0) {\n    const sampling = config && typeof config.requestSampling === 'number'\n      ? config.requestSampling : 30\n    if (rootSpan.context().toSpanId().slice(-2) <= sampling) {\n      availableRequest--\n      return true\n    }\n  }\n  return false\n}\n\nfunction releaseRequest () {\n  if (availableRequest < config.maxConcurrentRequests) {\n    availableRequest++\n  }\n}\n\nfunction hasQuota (operation, iastContext) {\n  const oceContext = _getContext(iastContext)\n  return operation.hasQuota(oceContext)\n}\n\nfunction initializeRequestContext (iastContext) {\n  if (iastContext) iastContext[OVERHEAD_CONTROLLER_CONTEXT_KEY] = _getNewContext()\n}\n\nfunction configure (cfg) {\n  config = cfg\n  availableRequest = config.maxConcurrentRequests\n}\n\n_resetGlobalContext()\n\nmodule.exports = {\n  OVERHEAD_CONTROLLER_CONTEXT_KEY,\n  OPERATIONS,\n  _resetGlobalContext,\n  initializeRequestContext,\n  hasQuota,\n  acquireRequest,\n  releaseRequest,\n  configure\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}