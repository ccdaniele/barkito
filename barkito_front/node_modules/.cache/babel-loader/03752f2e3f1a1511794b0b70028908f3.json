{"ast":null,"code":"'use strict';\n\nconst mainLogger = require('./log');\n\nconst os = require('os');\n\nconst {\n  inspect\n} = require('util');\n\nconst tracerVersion = require('../../../package.json').version;\n\nconst logger = Object.create(mainLogger);\nlogger._enabled = true;\nlet config;\nlet pluginManager;\nlet samplingRules = [];\nlet alreadyRan = false;\n\nfunction getIntegrationsAndAnalytics() {\n  const integrations = new Set();\n  const extras = {};\n\n  for (const pluginName in pluginManager._pluginsByName) {\n    integrations.add(pluginName);\n  }\n\n  extras.integrations_loaded = Array.from(integrations);\n  return extras;\n}\n\nfunction startupLog() {\n  let {\n    agentError\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!config || !pluginManager) {\n    return;\n  }\n\n  if (alreadyRan) {\n    return;\n  }\n\n  alreadyRan = true;\n\n  if (!config.startupLogs) {\n    return;\n  }\n\n  const url = config.url || `http://${config.hostname || 'localhost'}:${config.port}`;\n  const out = {\n    [inspect.custom]() {\n      return String(this);\n    },\n\n    toString() {\n      return JSON.stringify(this);\n    }\n\n  };\n  out.date = new Date().toISOString();\n  out.os_name = os.type();\n  out.os_version = os.release();\n  out.architecture = os.arch();\n  out.version = tracerVersion;\n  out.lang = 'nodejs';\n  out.lang_version = process.versions.node;\n  out.env = config.env;\n  out.enabled = config.enabled;\n  out.service = config.service;\n  out.agent_url = url;\n\n  if (agentError) {\n    out.agent_error = agentError.message;\n  }\n\n  out.debug = !!config.debug;\n  out.sample_rate = config.sampleRate;\n  out.sampling_rules = samplingRules;\n  out.tags = config.tags;\n\n  if (config.tags && config.tags.version) {\n    out.dd_version = config.tags.version;\n  }\n\n  out.log_injection_enabled = !!config.logInjection;\n  out.runtime_metrics_enabled = !!config.runtimeMetrics;\n  out.profiling_enabled = !!(config.profiling || {}).enabled;\n  Object.assign(out, getIntegrationsAndAnalytics());\n  out.appsec_enabled = !!config.appsec.enabled; // // This next bunch is for features supported by other tracers, but not this\n  // // one. They may be implemented in the future.\n  // out.enabled_cli\n  // out.sampling_rules_error\n  // out.integration_XXX_analytics_enabled\n  // out.integration_XXX_sample_rate\n  // out.service_mapping\n  // out.service_mapping_error\n\n  logger.info('DATADOG TRACER CONFIGURATION - ' + out);\n\n  if (agentError) {\n    logger.warn('DATADOG TRACER DIAGNOSTIC - Agent Error: ' + agentError.message);\n  }\n\n  config = undefined;\n  pluginManager = undefined;\n  samplingRules = undefined;\n}\n\nfunction setStartupLogConfig(aConfig) {\n  config = aConfig;\n}\n\nfunction setStartupLogPluginManager(thePluginManager) {\n  pluginManager = thePluginManager;\n}\n\nfunction setSamplingRules(theRules) {\n  samplingRules = theRules;\n}\n\nmodule.exports = {\n  startupLog,\n  setStartupLogConfig,\n  setStartupLogPluginManager,\n  setSamplingRules\n};","map":{"version":3,"names":["mainLogger","require","os","inspect","tracerVersion","version","logger","Object","create","_enabled","config","pluginManager","samplingRules","alreadyRan","getIntegrationsAndAnalytics","integrations","Set","extras","pluginName","_pluginsByName","add","integrations_loaded","Array","from","startupLog","agentError","startupLogs","url","hostname","port","out","custom","String","toString","JSON","stringify","date","Date","toISOString","os_name","type","os_version","release","architecture","arch","lang","lang_version","process","versions","node","env","enabled","service","agent_url","agent_error","message","debug","sample_rate","sampleRate","sampling_rules","tags","dd_version","log_injection_enabled","logInjection","runtime_metrics_enabled","runtimeMetrics","profiling_enabled","profiling","assign","appsec_enabled","appsec","info","warn","undefined","setStartupLogConfig","aConfig","setStartupLogPluginManager","thePluginManager","setSamplingRules","theRules","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/startup-log.js"],"sourcesContent":["'use strict'\n\nconst mainLogger = require('./log')\n\nconst os = require('os')\nconst { inspect } = require('util')\nconst tracerVersion = require('../../../package.json').version\n\nconst logger = Object.create(mainLogger)\nlogger._enabled = true\n\nlet config\nlet pluginManager\nlet samplingRules = []\nlet alreadyRan = false\n\nfunction getIntegrationsAndAnalytics () {\n  const integrations = new Set()\n  const extras = {}\n  for (const pluginName in pluginManager._pluginsByName) {\n    integrations.add(pluginName)\n  }\n  extras.integrations_loaded = Array.from(integrations)\n  return extras\n}\n\nfunction startupLog ({ agentError } = {}) {\n  if (!config || !pluginManager) {\n    return\n  }\n\n  if (alreadyRan) {\n    return\n  }\n\n  alreadyRan = true\n\n  if (!config.startupLogs) {\n    return\n  }\n\n  const url = config.url || `http://${config.hostname || 'localhost'}:${config.port}`\n\n  const out = {\n    [inspect.custom] () {\n      return String(this)\n    },\n    toString () {\n      return JSON.stringify(this)\n    }\n  }\n\n  out.date = new Date().toISOString()\n  out.os_name = os.type()\n  out.os_version = os.release()\n  out.architecture = os.arch()\n  out.version = tracerVersion\n  out.lang = 'nodejs'\n  out.lang_version = process.versions.node\n  out.env = config.env\n  out.enabled = config.enabled\n  out.service = config.service\n  out.agent_url = url\n  if (agentError) {\n    out.agent_error = agentError.message\n  }\n  out.debug = !!config.debug\n  out.sample_rate = config.sampleRate\n  out.sampling_rules = samplingRules\n  out.tags = config.tags\n  if (config.tags && config.tags.version) {\n    out.dd_version = config.tags.version\n  }\n\n  out.log_injection_enabled = !!config.logInjection\n  out.runtime_metrics_enabled = !!config.runtimeMetrics\n  out.profiling_enabled = !!(config.profiling || {}).enabled\n  Object.assign(out, getIntegrationsAndAnalytics())\n\n  out.appsec_enabled = !!config.appsec.enabled\n\n  // // This next bunch is for features supported by other tracers, but not this\n  // // one. They may be implemented in the future.\n\n  // out.enabled_cli\n  // out.sampling_rules_error\n  // out.integration_XXX_analytics_enabled\n  // out.integration_XXX_sample_rate\n  // out.service_mapping\n  // out.service_mapping_error\n\n  logger.info('DATADOG TRACER CONFIGURATION - ' + out)\n  if (agentError) {\n    logger.warn('DATADOG TRACER DIAGNOSTIC - Agent Error: ' + agentError.message)\n  }\n\n  config = undefined\n  pluginManager = undefined\n  samplingRules = undefined\n}\n\nfunction setStartupLogConfig (aConfig) {\n  config = aConfig\n}\n\nfunction setStartupLogPluginManager (thePluginManager) {\n  pluginManager = thePluginManager\n}\n\nfunction setSamplingRules (theRules) {\n  samplingRules = theRules\n}\n\nmodule.exports = {\n  startupLog,\n  setStartupLogConfig,\n  setStartupLogPluginManager,\n  setSamplingRules\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}