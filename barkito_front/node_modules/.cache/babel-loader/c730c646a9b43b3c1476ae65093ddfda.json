{"ast":null,"code":"'use strict';\n\nconst util = require('util'); // Port from node core lib/internal/errors.js\n\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(message, actual) {\n    super();\n\n    if (actual == null) {\n      message += `. Received ${actual}`;\n    } else if (typeof actual === 'function' && actual.name) {\n      message += `. Received function ${actual.name}`;\n    } else if (typeof actual === 'object') {\n      if (actual.constructor && actual.constructor.name) {\n        message += `. Received an instance of ${actual.constructor.name}`;\n      } else {\n        const inspected = util.inspect(actual, {\n          depth: -1\n        });\n        message += `. Received ${inspected}`;\n      }\n    } else {\n      let inspected = util.inspect(actual, {\n        colors: false\n      });\n\n      if (inspected.length > 25) {\n        inspected = `${inspected.slice(0, 25)}...`;\n      }\n\n      message += `. Received type ${typeof actual} (${inspected})`;\n    }\n\n    this.code = this.constructor.name;\n    Object.defineProperties(this, {\n      message: {\n        value: message,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      },\n      toString: {\n        value() {\n          return `${this.name} [${this.code}]: ${this.message}`;\n        },\n\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  }\n\n}\n\nclass ActiveChannel {\n  subscribe(subscription) {\n    if (typeof subscription !== 'function') {\n      throw new ERR_INVALID_ARG_TYPE('The \"subscription\" argument must be of type function', subscription);\n    }\n\n    this._subscribers.push(subscription);\n  }\n\n  unsubscribe(subscription) {\n    const index = this._subscribers.indexOf(subscription);\n\n    if (index === -1) return false;\n\n    this._subscribers.splice(index, 1); // When there are no more active subscribers, restore to fast prototype.\n\n\n    if (!this._subscribers.length) {\n      // eslint-disable-next-line no-use-before-define\n      Object.setPrototypeOf(this, Channel.prototype);\n    }\n\n    return true;\n  }\n\n  get hasSubscribers() {\n    return true;\n  }\n\n  publish(data) {\n    for (let i = 0; i < this._subscribers.length; i++) {\n      try {\n        const onMessage = this._subscribers[i];\n        onMessage(data, this.name);\n      } catch (err) {\n        process.nextTick(() => {\n          throw err;\n        });\n      }\n    }\n  }\n\n}\n\nclass Channel {\n  constructor(name) {\n    this._subscribers = undefined;\n    this.name = name;\n  }\n\n  static [Symbol.hasInstance](instance) {\n    const prototype = Object.getPrototypeOf(instance);\n    return prototype === Channel.prototype || prototype === ActiveChannel.prototype;\n  }\n\n  subscribe(subscription) {\n    Object.setPrototypeOf(this, ActiveChannel.prototype);\n    this._subscribers = [];\n    this.subscribe(subscription);\n  }\n\n  unsubscribe() {\n    return false;\n  }\n\n  get hasSubscribers() {\n    return false;\n  }\n\n  publish() {}\n\n}\n\nconst channels = {};\n\nfunction channel(name) {\n  const channel = channels[name];\n  if (channel) return channel;\n\n  if (typeof name !== 'string' && typeof name !== 'symbol') {\n    throw new ERR_INVALID_ARG_TYPE('The \"channel\" argument must be one of type string or symbol', name);\n  }\n\n  return channels[name] = new Channel(name);\n}\n\nfunction hasSubscribers(name) {\n  const channel = channels[name];\n\n  if (!channel) {\n    return false;\n  }\n\n  return channel.hasSubscribers;\n}\n\nfunction deleteChannel(name) {\n  if (channels[name]) {\n    channels[name] = null;\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  channel,\n  hasSubscribers,\n  Channel,\n  deleteChannel\n};","map":{"version":3,"names":["util","require","ERR_INVALID_ARG_TYPE","TypeError","constructor","message","actual","name","inspected","inspect","depth","colors","length","slice","code","Object","defineProperties","value","enumerable","writable","configurable","toString","ActiveChannel","subscribe","subscription","_subscribers","push","unsubscribe","index","indexOf","splice","setPrototypeOf","Channel","prototype","hasSubscribers","publish","data","i","onMessage","err","process","nextTick","undefined","Symbol","hasInstance","instance","getPrototypeOf","channels","channel","deleteChannel","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/diagnostics_channel/index.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\n\n// Port from node core lib/internal/errors.js\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(message, actual) {\n    super();\n\n    if (actual == null) {\n      message += `. Received ${actual}`;\n    } else if (typeof actual === 'function' && actual.name) {\n      message += `. Received function ${actual.name}`;\n    } else if (typeof actual === 'object') {\n      if (actual.constructor && actual.constructor.name) {\n        message += `. Received an instance of ${actual.constructor.name}`;\n      } else {\n        const inspected = util.inspect(actual, { depth: -1 });\n        message += `. Received ${inspected}`;\n      }\n    } else {\n      let inspected = util.inspect(actual, { colors: false });\n      if (inspected.length > 25) {\n        inspected = `${inspected.slice(0, 25)}...`;\n      }\n      message += `. Received type ${typeof actual} (${inspected})`;\n    }\n\n    this.code = this.constructor.name;\n\n    Object.defineProperties(this, {\n      message: {\n        value: message,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n      toString: {\n        value() {\n          return `${this.name} [${this.code}]: ${this.message}`;\n        },\n        enumerable: false,\n        writable: true,\n        configurable: true,\n      },\n    });\n  }\n}\n\nclass ActiveChannel {\n  subscribe(subscription) {\n    if (typeof subscription !== 'function') {\n      throw new ERR_INVALID_ARG_TYPE('The \"subscription\" argument must be of type function', subscription);\n    }\n    this._subscribers.push(subscription);\n  }\n\n  unsubscribe(subscription) {\n    const index = this._subscribers.indexOf(subscription);\n    if (index === -1) return false;\n\n    this._subscribers.splice(index, 1);\n\n    // When there are no more active subscribers, restore to fast prototype.\n    if (!this._subscribers.length) {\n      // eslint-disable-next-line no-use-before-define\n      Object.setPrototypeOf(this, Channel.prototype);\n    }\n\n    return true;\n  }\n\n  get hasSubscribers() {\n    return true;\n  }\n\n  publish(data) {\n    for (let i = 0; i < this._subscribers.length; i++) {\n      try {\n        const onMessage = this._subscribers[i];\n        onMessage(data, this.name);\n      } catch (err) {\n        process.nextTick(() => {\n          throw err;\n        });\n      }\n    }\n  }\n}\n\nclass Channel {\n  constructor(name) {\n    this._subscribers = undefined;\n    this.name = name;\n  }\n\n  static [Symbol.hasInstance](instance) {\n    const prototype = Object.getPrototypeOf(instance);\n    return prototype === Channel.prototype ||\n           prototype === ActiveChannel.prototype;\n  }\n\n  subscribe(subscription) {\n    Object.setPrototypeOf(this, ActiveChannel.prototype);\n    this._subscribers = [];\n    this.subscribe(subscription);\n  }\n\n  unsubscribe() {\n    return false;\n  }\n\n  get hasSubscribers() {\n    return false;\n  }\n\n  publish() {}\n}\n\nconst channels = {};\n\nfunction channel(name) {\n  const channel = channels[name];\n  if (channel) return channel;\n\n  if (typeof name !== 'string' && typeof name !== 'symbol') {\n    throw new ERR_INVALID_ARG_TYPE('The \"channel\" argument must be one of type string or symbol', name);\n  }\n\n  return channels[name] = new Channel(name);\n}\n\nfunction hasSubscribers(name) {\n  const channel = channels[name];\n  if (!channel) {\n    return false;\n  }\n\n  return channel.hasSubscribers;\n}\n\nfunction deleteChannel(name) {\n  if (channels[name]) {\n    channels[name] = null;\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  channel,\n  hasSubscribers,\n  Channel,\n  deleteChannel\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}