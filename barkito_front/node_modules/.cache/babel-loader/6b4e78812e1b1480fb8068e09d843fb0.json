{"ast":null,"code":"'use strict';\n\nconst DatabasePlugin = require('../../dd-trace/src/plugins/database');\n\nclass ElasticsearchPlugin extends DatabasePlugin {\n  static get name() {\n    return 'elasticsearch';\n  }\n\n  start(_ref) {\n    let {\n      params\n    } = _ref;\n    const body = getBody(params.body || params.bulkBody);\n    this.startSpan('elasticsearch.query', {\n      service: this.config.service,\n      resource: `${params.method} ${quantizePath(params.path)}`,\n      type: 'elasticsearch',\n      kind: 'client',\n      meta: {\n        'db.type': 'elasticsearch',\n        'elasticsearch.url': params.path,\n        'elasticsearch.method': params.method,\n        'elasticsearch.body': body,\n        'elasticsearch.params': JSON.stringify(params.querystring || params.query)\n      }\n    });\n  }\n\n  finish(_ref2) {\n    let {\n      params\n    } = _ref2;\n    const span = this.activeSpan();\n    this.config.hooks.query(span, params);\n    super.finish({\n      params\n    });\n  }\n\n}\n\nfunction getBody(body) {\n  return body && JSON.stringify(body);\n}\n\nfunction quantizePath(path) {\n  return path && path.replace(/[0-9]+/g, '?');\n}\n\nmodule.exports = ElasticsearchPlugin;","map":{"version":3,"names":["DatabasePlugin","require","ElasticsearchPlugin","name","start","params","body","getBody","bulkBody","startSpan","service","config","resource","method","quantizePath","path","type","kind","meta","JSON","stringify","querystring","query","finish","span","activeSpan","hooks","replace","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-elasticsearch/src/index.js"],"sourcesContent":["'use strict'\n\nconst DatabasePlugin = require('../../dd-trace/src/plugins/database')\n\nclass ElasticsearchPlugin extends DatabasePlugin {\n  static get name () { return 'elasticsearch' }\n\n  start ({ params }) {\n    const body = getBody(params.body || params.bulkBody)\n\n    this.startSpan('elasticsearch.query', {\n      service: this.config.service,\n      resource: `${params.method} ${quantizePath(params.path)}`,\n      type: 'elasticsearch',\n      kind: 'client',\n      meta: {\n        'db.type': 'elasticsearch',\n        'elasticsearch.url': params.path,\n        'elasticsearch.method': params.method,\n        'elasticsearch.body': body,\n        'elasticsearch.params': JSON.stringify(params.querystring || params.query)\n      }\n    })\n  }\n\n  finish ({ params }) {\n    const span = this.activeSpan()\n    this.config.hooks.query(span, params)\n    super.finish({ params })\n  }\n}\n\nfunction getBody (body) {\n  return body && JSON.stringify(body)\n}\n\nfunction quantizePath (path) {\n  return path && path.replace(/[0-9]+/g, '?')\n}\n\nmodule.exports = ElasticsearchPlugin\n"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,qCAAD,CAA9B;;AAEA,MAAMC,mBAAN,SAAkCF,cAAlC,CAAiD;EAChC,WAAJG,IAAI,GAAI;IAAE,OAAO,eAAP;EAAwB;;EAE7CC,KAAK,OAAc;IAAA,IAAZ;MAAEC;IAAF,CAAY;IACjB,MAAMC,IAAI,GAAGC,OAAO,CAACF,MAAM,CAACC,IAAP,IAAeD,MAAM,CAACG,QAAvB,CAApB;IAEA,KAAKC,SAAL,CAAe,qBAAf,EAAsC;MACpCC,OAAO,EAAE,KAAKC,MAAL,CAAYD,OADe;MAEpCE,QAAQ,EAAG,GAAEP,MAAM,CAACQ,MAAO,IAAGC,YAAY,CAACT,MAAM,CAACU,IAAR,CAAc,EAFpB;MAGpCC,IAAI,EAAE,eAH8B;MAIpCC,IAAI,EAAE,QAJ8B;MAKpCC,IAAI,EAAE;QACJ,WAAW,eADP;QAEJ,qBAAqBb,MAAM,CAACU,IAFxB;QAGJ,wBAAwBV,MAAM,CAACQ,MAH3B;QAIJ,sBAAsBP,IAJlB;QAKJ,wBAAwBa,IAAI,CAACC,SAAL,CAAef,MAAM,CAACgB,WAAP,IAAsBhB,MAAM,CAACiB,KAA5C;MALpB;IAL8B,CAAtC;EAaD;;EAEDC,MAAM,QAAc;IAAA,IAAZ;MAAElB;IAAF,CAAY;IAClB,MAAMmB,IAAI,GAAG,KAAKC,UAAL,EAAb;IACA,KAAKd,MAAL,CAAYe,KAAZ,CAAkBJ,KAAlB,CAAwBE,IAAxB,EAA8BnB,MAA9B;IACA,MAAMkB,MAAN,CAAa;MAAElB;IAAF,CAAb;EACD;;AAzB8C;;AA4BjD,SAASE,OAAT,CAAkBD,IAAlB,EAAwB;EACtB,OAAOA,IAAI,IAAIa,IAAI,CAACC,SAAL,CAAed,IAAf,CAAf;AACD;;AAED,SAASQ,YAAT,CAAuBC,IAAvB,EAA6B;EAC3B,OAAOA,IAAI,IAAIA,IAAI,CAACY,OAAL,CAAa,SAAb,EAAwB,GAAxB,CAAf;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB3B,mBAAjB"},"metadata":{},"sourceType":"script"}