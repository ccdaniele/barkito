{"ast":null,"code":"'use strict';\n\nconst istanbul = require('istanbul-lib-coverage');\n\nconst {\n  addHook,\n  channel,\n  AsyncResource\n} = require('./helpers/instrument');\n\nconst shimmer = require('../../datadog-shimmer');\n\nconst log = require('../../dd-trace/src/log');\n\nconst testSessionStartCh = channel('ci:jest:session:start');\nconst testSessionFinishCh = channel('ci:jest:session:finish');\nconst testSessionConfigurationCh = channel('ci:jest:session:configuration');\nconst testSuiteStartCh = channel('ci:jest:test-suite:start');\nconst testSuiteFinishCh = channel('ci:jest:test-suite:finish');\nconst testSuiteCodeCoverageCh = channel('ci:jest:test-suite:code-coverage');\nconst testStartCh = channel('ci:jest:test:start');\nconst testSkippedCh = channel('ci:jest:test:skip');\nconst testRunFinishCh = channel('ci:jest:test:finish');\nconst testErrCh = channel('ci:jest:test:err');\nconst skippableSuitesCh = channel('ci:jest:test-suite:skippable');\nconst jestConfigurationCh = channel('ci:jest:configuration');\nlet skippableSuites = [];\nlet isCodeCoverageEnabled = false;\n\nconst {\n  getTestSuitePath,\n  getTestParametersString\n} = require('../../dd-trace/src/plugins/util/test');\n\nconst {\n  getFormattedJestTestParameters,\n  getJestTestName\n} = require('../../datadog-plugin-jest/src/util');\n\nconst sessionAsyncResource = new AsyncResource('bound-anonymous-fn');\n\nfunction extractCoverageInformation(coverage, rootDir) {\n  const coverageMap = istanbul.createCoverageMap(coverage);\n  return coverageMap.files().filter(filename => {\n    const fileCoverage = coverageMap.fileCoverageFor(filename);\n    const lineCoverage = fileCoverage.getLineCoverage();\n    const isAnyLineExecuted = Object.entries(lineCoverage).some(_ref => {\n      let [, numExecutions] = _ref;\n      return !!numExecutions;\n    });\n    return isAnyLineExecuted;\n  }).map(filename => filename.replace(`${rootDir}/`, ''));\n}\n\nconst specStatusToTestStatus = {\n  'pending': 'skip',\n  'disabled': 'skip',\n  'todo': 'skip',\n  'passed': 'pass',\n  'failed': 'fail'\n};\nconst asyncResources = new WeakMap();\nconst originalTestFns = new WeakMap(); // based on https://github.com/facebook/jest/blob/main/packages/jest-circus/src/formatNodeAssertErrors.ts#L41\n\nfunction formatJestError(errors) {\n  let error;\n\n  if (Array.isArray(errors)) {\n    const [originalError, asyncError] = errors;\n\n    if (originalError === null || !originalError.stack) {\n      error = asyncError;\n      error.message = originalError;\n    } else {\n      error = originalError;\n    }\n  } else {\n    error = errors;\n  }\n\n  return error;\n}\n\nfunction getTestEnvironmentOptions(config) {\n  if (config.projectConfig && config.projectConfig.testEnvironmentOptions) {\n    // newer versions\n    return config.projectConfig.testEnvironmentOptions;\n  }\n\n  if (config.testEnvironmentOptions) {\n    return config.testEnvironmentOptions;\n  }\n\n  return {};\n}\n\nfunction getWrappedEnvironment(BaseEnvironment) {\n  return class DatadogEnvironment extends BaseEnvironment {\n    constructor(config, context) {\n      super(config, context);\n      const rootDir = config.globalConfig ? config.globalConfig.rootDir : config.rootDir;\n      this.rootDir = rootDir;\n      this.testSuite = getTestSuitePath(context.testPath, rootDir);\n      this.nameToParams = {};\n      this.global._ddtrace = global._ddtrace;\n      this.testEnvironmentOptions = getTestEnvironmentOptions(config);\n    }\n\n    async handleTestEvent(event, state) {\n      if (super.handleTestEvent) {\n        await super.handleTestEvent(event, state);\n      }\n\n      const setNameToParams = (name, params) => {\n        this.nameToParams[name] = params;\n      };\n\n      if (event.name === 'setup') {\n        if (this.global.test) {\n          shimmer.wrap(this.global.test, 'each', each => function () {\n            const testParameters = getFormattedJestTestParameters(arguments);\n            const eachBind = each.apply(this, arguments);\n            return function () {\n              const [testName] = arguments;\n              setNameToParams(testName, testParameters);\n              return eachBind.apply(this, arguments);\n            };\n          });\n        }\n      }\n\n      if (event.name === 'test_start') {\n        const testParameters = getTestParametersString(this.nameToParams, event.test.name); // Async resource for this test is created here\n        // It is used later on by the test_done handler\n\n        const asyncResource = new AsyncResource('bound-anonymous-fn');\n        asyncResources.set(event.test, asyncResource);\n        asyncResource.runInAsyncScope(() => {\n          testStartCh.publish({\n            name: getJestTestName(event.test),\n            suite: this.testSuite,\n            runner: 'jest-circus',\n            testParameters\n          });\n          originalTestFns.set(event.test, event.test.fn);\n          event.test.fn = asyncResource.bind(event.test.fn);\n        });\n      }\n\n      if (event.name === 'test_done') {\n        const asyncResource = asyncResources.get(event.test);\n        asyncResource.runInAsyncScope(() => {\n          let status = 'pass';\n\n          if (event.test.errors && event.test.errors.length) {\n            status = 'fail';\n            const formattedError = formatJestError(event.test.errors[0]);\n            testErrCh.publish(formattedError);\n          }\n\n          testRunFinishCh.publish(status); // restore in case it is retried\n\n          event.test.fn = originalTestFns.get(event.test);\n        });\n      }\n\n      if (event.name === 'test_skip' || event.name === 'test_todo') {\n        const asyncResource = new AsyncResource('bound-anonymous-fn');\n        asyncResource.runInAsyncScope(() => {\n          testSkippedCh.publish({\n            name: getJestTestName(event.test),\n            suite: this.testSuite,\n            runner: 'jest-circus'\n          });\n        });\n      }\n    }\n\n  };\n}\n\nfunction getTestEnvironment(pkg) {\n  if (pkg.default) {\n    const wrappedTestEnvironment = getWrappedEnvironment(pkg.default);\n    pkg.default = wrappedTestEnvironment;\n    pkg.TestEnvironment = wrappedTestEnvironment;\n    return pkg;\n  }\n\n  return getWrappedEnvironment(pkg);\n}\n\naddHook({\n  name: 'jest-environment-node',\n  versions: ['>=24.8.0']\n}, getTestEnvironment);\naddHook({\n  name: 'jest-environment-jsdom',\n  versions: ['>=24.8.0']\n}, getTestEnvironment);\n\nfunction cliWrapper(cli) {\n  const wrapped = shimmer.wrap(cli, 'runCLI', runCLI => async function () {\n    let onResponse, onError;\n    const configurationPromise = new Promise((resolve, reject) => {\n      onResponse = resolve;\n      onError = reject;\n    });\n    sessionAsyncResource.runInAsyncScope(() => {\n      jestConfigurationCh.publish({\n        onResponse,\n        onError\n      });\n    });\n    let isSuitesSkippingEnabled = false;\n\n    try {\n      const config = await configurationPromise;\n      isCodeCoverageEnabled = config.isCodeCoverageEnabled;\n      isSuitesSkippingEnabled = config.isSuitesSkippingEnabled;\n    } catch (e) {// ignore error\n    }\n\n    if (isSuitesSkippingEnabled) {\n      const skippableSuitesPromise = new Promise((resolve, reject) => {\n        onResponse = resolve;\n        onError = reject;\n      });\n      sessionAsyncResource.runInAsyncScope(() => {\n        skippableSuitesCh.publish({\n          onResponse,\n          onError\n        });\n      });\n\n      try {\n        skippableSuites = await skippableSuitesPromise;\n      } catch (e) {\n        log.error(e);\n      }\n    }\n\n    const isTestsSkipped = !!skippableSuites.length;\n    const processArgv = process.argv.slice(2).join(' ');\n    sessionAsyncResource.runInAsyncScope(() => {\n      testSessionStartCh.publish(`jest ${processArgv}`);\n    });\n    const result = await runCLI.apply(this, arguments);\n    const {\n      results: {\n        success,\n        coverageMap\n      }\n    } = result;\n    let testCodeCoverageLinesTotal;\n\n    try {\n      testCodeCoverageLinesTotal = coverageMap.getCoverageSummary().lines.pct;\n    } catch (e) {// ignore errors\n    }\n\n    sessionAsyncResource.runInAsyncScope(() => {\n      testSessionFinishCh.publish({\n        status: success ? 'pass' : 'fail',\n        isTestsSkipped,\n        testCodeCoverageLinesTotal\n      });\n    });\n    return result;\n  });\n  cli.runCLI = wrapped.runCLI;\n  return cli;\n}\n\naddHook({\n  name: '@jest/core',\n  file: 'build/cli/index.js',\n  versions: ['>=24.8.0']\n}, cliWrapper);\n\nfunction jestAdapterWrapper(jestAdapter) {\n  const adapter = jestAdapter.default ? jestAdapter.default : jestAdapter;\n  const newAdapter = shimmer.wrap(adapter, function () {\n    const environment = arguments[2];\n    const asyncResource = new AsyncResource('bound-anonymous-fn');\n    return asyncResource.runInAsyncScope(() => {\n      testSuiteStartCh.publish({\n        testSuite: environment.testSuite,\n        testEnvironmentOptions: environment.testEnvironmentOptions\n      });\n      return adapter.apply(this, arguments).then(suiteResults => {\n        const {\n          numFailingTests,\n          skipped,\n          failureMessage: errorMessage\n        } = suiteResults;\n        let status = 'pass';\n\n        if (skipped) {\n          status = 'skipped';\n        } else if (numFailingTests !== 0) {\n          status = 'fail';\n        }\n\n        testSuiteFinishCh.publish({\n          status,\n          errorMessage\n        });\n\n        if (environment.global.__coverage__) {\n          const coverageFiles = extractCoverageInformation(environment.global.__coverage__, environment.rootDir);\n\n          if (coverageFiles.length) {\n            testSuiteCodeCoverageCh.publish([...coverageFiles, environment.testSuite]);\n          }\n        }\n\n        return suiteResults;\n      });\n    });\n  });\n\n  if (jestAdapter.default) {\n    jestAdapter.default = newAdapter;\n  } else {\n    jestAdapter = newAdapter;\n  }\n\n  return jestAdapter;\n}\n\naddHook({\n  name: 'jest-circus',\n  file: 'build/legacy-code-todo-rewrite/jestAdapter.js',\n  versions: ['>=24.8.0']\n}, jestAdapterWrapper);\n\nfunction configureTestEnvironment(readConfigsResult) {\n  const {\n    configs\n  } = readConfigsResult;\n  configs.forEach(config => {\n    skippableSuites.forEach(suite => {\n      config.testMatch.push(`!**/${suite}`);\n    });\n    skippableSuites = [];\n  });\n  sessionAsyncResource.runInAsyncScope(() => {\n    testSessionConfigurationCh.publish(configs.map(config => config.testEnvironmentOptions));\n  });\n\n  if (isCodeCoverageEnabled) {\n    const globalConfig = { ...readConfigsResult.globalConfig,\n      collectCoverage: true\n    };\n    readConfigsResult.globalConfig = globalConfig;\n  }\n\n  return readConfigsResult;\n}\n\nfunction jestConfigAsyncWrapper(jestConfig) {\n  shimmer.wrap(jestConfig, 'readConfigs', readConfigs => async function () {\n    const readConfigsResult = await readConfigs.apply(this, arguments);\n    configureTestEnvironment(readConfigsResult);\n    return readConfigsResult;\n  });\n  return jestConfig;\n}\n\nfunction jestConfigSyncWrapper(jestConfig) {\n  shimmer.wrap(jestConfig, 'readConfigs', readConfigs => function () {\n    const readConfigsResult = readConfigs.apply(this, arguments);\n    configureTestEnvironment(readConfigsResult);\n    return readConfigsResult;\n  });\n  return jestConfig;\n} // from 25.1.0 on, readConfigs becomes async\n\n\naddHook({\n  name: 'jest-config',\n  versions: ['>=25.1.0']\n}, jestConfigAsyncWrapper);\naddHook({\n  name: 'jest-config',\n  versions: ['24.8.0 - 24.9.0']\n}, jestConfigSyncWrapper);\n\nfunction jasmineAsyncInstallWraper(jasmineAsyncInstallExport) {\n  return function (globalConfig, globalInput) {\n    globalInput._ddtrace = global._ddtrace;\n    shimmer.wrap(globalInput.jasmine.Spec.prototype, 'execute', execute => function (onComplete) {\n      const asyncResource = new AsyncResource('bound-anonymous-fn');\n      asyncResource.runInAsyncScope(() => {\n        const testSuite = getTestSuitePath(this.result.testPath, globalConfig.rootDir);\n        testStartCh.publish({\n          name: this.getFullName(),\n          suite: testSuite,\n          runner: 'jest-jasmine2'\n        });\n        const spec = this;\n        const callback = asyncResource.bind(function () {\n          if (spec.result.failedExpectations && spec.result.failedExpectations.length) {\n            const formattedError = formatJestError(spec.result.failedExpectations[0].error);\n            testErrCh.publish(formattedError);\n          }\n\n          testRunFinishCh.publish(specStatusToTestStatus[spec.result.status]);\n          onComplete.apply(this, arguments);\n        });\n        arguments[0] = callback;\n        execute.apply(this, arguments);\n      });\n    });\n    return jasmineAsyncInstallExport.default(globalConfig, globalInput);\n  };\n}\n\naddHook({\n  name: 'jest-jasmine2',\n  versions: ['>=24.8.0'],\n  file: 'build/jasmineAsyncInstall.js'\n}, jasmineAsyncInstallWraper);","map":{"version":3,"names":["istanbul","require","addHook","channel","AsyncResource","shimmer","log","testSessionStartCh","testSessionFinishCh","testSessionConfigurationCh","testSuiteStartCh","testSuiteFinishCh","testSuiteCodeCoverageCh","testStartCh","testSkippedCh","testRunFinishCh","testErrCh","skippableSuitesCh","jestConfigurationCh","skippableSuites","isCodeCoverageEnabled","getTestSuitePath","getTestParametersString","getFormattedJestTestParameters","getJestTestName","sessionAsyncResource","extractCoverageInformation","coverage","rootDir","coverageMap","createCoverageMap","files","filter","filename","fileCoverage","fileCoverageFor","lineCoverage","getLineCoverage","isAnyLineExecuted","Object","entries","some","numExecutions","map","replace","specStatusToTestStatus","asyncResources","WeakMap","originalTestFns","formatJestError","errors","error","Array","isArray","originalError","asyncError","stack","message","getTestEnvironmentOptions","config","projectConfig","testEnvironmentOptions","getWrappedEnvironment","BaseEnvironment","DatadogEnvironment","constructor","context","globalConfig","testSuite","testPath","nameToParams","global","_ddtrace","handleTestEvent","event","state","setNameToParams","name","params","test","wrap","each","testParameters","arguments","eachBind","apply","testName","asyncResource","set","runInAsyncScope","publish","suite","runner","fn","bind","get","status","length","formattedError","getTestEnvironment","pkg","default","wrappedTestEnvironment","TestEnvironment","versions","cliWrapper","cli","wrapped","runCLI","onResponse","onError","configurationPromise","Promise","resolve","reject","isSuitesSkippingEnabled","e","skippableSuitesPromise","isTestsSkipped","processArgv","process","argv","slice","join","result","results","success","testCodeCoverageLinesTotal","getCoverageSummary","lines","pct","file","jestAdapterWrapper","jestAdapter","adapter","newAdapter","environment","then","suiteResults","numFailingTests","skipped","failureMessage","errorMessage","__coverage__","coverageFiles","configureTestEnvironment","readConfigsResult","configs","forEach","testMatch","push","collectCoverage","jestConfigAsyncWrapper","jestConfig","readConfigs","jestConfigSyncWrapper","jasmineAsyncInstallWraper","jasmineAsyncInstallExport","globalInput","jasmine","Spec","prototype","execute","onComplete","getFullName","spec","callback","failedExpectations"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-instrumentations/src/jest.js"],"sourcesContent":["'use strict'\nconst istanbul = require('istanbul-lib-coverage')\nconst { addHook, channel, AsyncResource } = require('./helpers/instrument')\nconst shimmer = require('../../datadog-shimmer')\nconst log = require('../../dd-trace/src/log')\n\nconst testSessionStartCh = channel('ci:jest:session:start')\nconst testSessionFinishCh = channel('ci:jest:session:finish')\n\nconst testSessionConfigurationCh = channel('ci:jest:session:configuration')\n\nconst testSuiteStartCh = channel('ci:jest:test-suite:start')\nconst testSuiteFinishCh = channel('ci:jest:test-suite:finish')\nconst testSuiteCodeCoverageCh = channel('ci:jest:test-suite:code-coverage')\n\nconst testStartCh = channel('ci:jest:test:start')\nconst testSkippedCh = channel('ci:jest:test:skip')\nconst testRunFinishCh = channel('ci:jest:test:finish')\nconst testErrCh = channel('ci:jest:test:err')\n\nconst skippableSuitesCh = channel('ci:jest:test-suite:skippable')\nconst jestConfigurationCh = channel('ci:jest:configuration')\n\nlet skippableSuites = []\nlet isCodeCoverageEnabled = false\n\nconst {\n  getTestSuitePath,\n  getTestParametersString\n} = require('../../dd-trace/src/plugins/util/test')\n\nconst { getFormattedJestTestParameters, getJestTestName } = require('../../datadog-plugin-jest/src/util')\n\nconst sessionAsyncResource = new AsyncResource('bound-anonymous-fn')\n\nfunction extractCoverageInformation (coverage, rootDir) {\n  const coverageMap = istanbul.createCoverageMap(coverage)\n\n  return coverageMap\n    .files()\n    .filter(filename => {\n      const fileCoverage = coverageMap.fileCoverageFor(filename)\n      const lineCoverage = fileCoverage.getLineCoverage()\n      const isAnyLineExecuted = Object.entries(lineCoverage).some(([, numExecutions]) => !!numExecutions)\n\n      return isAnyLineExecuted\n    })\n    .map(filename => filename.replace(`${rootDir}/`, ''))\n}\n\nconst specStatusToTestStatus = {\n  'pending': 'skip',\n  'disabled': 'skip',\n  'todo': 'skip',\n  'passed': 'pass',\n  'failed': 'fail'\n}\n\nconst asyncResources = new WeakMap()\nconst originalTestFns = new WeakMap()\n\n// based on https://github.com/facebook/jest/blob/main/packages/jest-circus/src/formatNodeAssertErrors.ts#L41\nfunction formatJestError (errors) {\n  let error\n  if (Array.isArray(errors)) {\n    const [originalError, asyncError] = errors\n    if (originalError === null || !originalError.stack) {\n      error = asyncError\n      error.message = originalError\n    } else {\n      error = originalError\n    }\n  } else {\n    error = errors\n  }\n  return error\n}\n\nfunction getTestEnvironmentOptions (config) {\n  if (config.projectConfig && config.projectConfig.testEnvironmentOptions) { // newer versions\n    return config.projectConfig.testEnvironmentOptions\n  }\n  if (config.testEnvironmentOptions) {\n    return config.testEnvironmentOptions\n  }\n  return {}\n}\n\nfunction getWrappedEnvironment (BaseEnvironment) {\n  return class DatadogEnvironment extends BaseEnvironment {\n    constructor (config, context) {\n      super(config, context)\n      const rootDir = config.globalConfig ? config.globalConfig.rootDir : config.rootDir\n      this.rootDir = rootDir\n      this.testSuite = getTestSuitePath(context.testPath, rootDir)\n      this.nameToParams = {}\n      this.global._ddtrace = global._ddtrace\n\n      this.testEnvironmentOptions = getTestEnvironmentOptions(config)\n    }\n\n    async handleTestEvent (event, state) {\n      if (super.handleTestEvent) {\n        await super.handleTestEvent(event, state)\n      }\n\n      const setNameToParams = (name, params) => { this.nameToParams[name] = params }\n\n      if (event.name === 'setup') {\n        if (this.global.test) {\n          shimmer.wrap(this.global.test, 'each', each => function () {\n            const testParameters = getFormattedJestTestParameters(arguments)\n            const eachBind = each.apply(this, arguments)\n            return function () {\n              const [testName] = arguments\n              setNameToParams(testName, testParameters)\n              return eachBind.apply(this, arguments)\n            }\n          })\n        }\n      }\n      if (event.name === 'test_start') {\n        const testParameters = getTestParametersString(this.nameToParams, event.test.name)\n        // Async resource for this test is created here\n        // It is used later on by the test_done handler\n        const asyncResource = new AsyncResource('bound-anonymous-fn')\n        asyncResources.set(event.test, asyncResource)\n        asyncResource.runInAsyncScope(() => {\n          testStartCh.publish({\n            name: getJestTestName(event.test),\n            suite: this.testSuite,\n            runner: 'jest-circus',\n            testParameters\n          })\n          originalTestFns.set(event.test, event.test.fn)\n          event.test.fn = asyncResource.bind(event.test.fn)\n        })\n      }\n      if (event.name === 'test_done') {\n        const asyncResource = asyncResources.get(event.test)\n        asyncResource.runInAsyncScope(() => {\n          let status = 'pass'\n          if (event.test.errors && event.test.errors.length) {\n            status = 'fail'\n            const formattedError = formatJestError(event.test.errors[0])\n            testErrCh.publish(formattedError)\n          }\n          testRunFinishCh.publish(status)\n          // restore in case it is retried\n          event.test.fn = originalTestFns.get(event.test)\n        })\n      }\n      if (event.name === 'test_skip' || event.name === 'test_todo') {\n        const asyncResource = new AsyncResource('bound-anonymous-fn')\n        asyncResource.runInAsyncScope(() => {\n          testSkippedCh.publish({\n            name: getJestTestName(event.test),\n            suite: this.testSuite,\n            runner: 'jest-circus'\n          })\n        })\n      }\n    }\n  }\n}\n\nfunction getTestEnvironment (pkg) {\n  if (pkg.default) {\n    const wrappedTestEnvironment = getWrappedEnvironment(pkg.default)\n    pkg.default = wrappedTestEnvironment\n    pkg.TestEnvironment = wrappedTestEnvironment\n    return pkg\n  }\n  return getWrappedEnvironment(pkg)\n}\n\naddHook({\n  name: 'jest-environment-node',\n  versions: ['>=24.8.0']\n}, getTestEnvironment)\n\naddHook({\n  name: 'jest-environment-jsdom',\n  versions: ['>=24.8.0']\n}, getTestEnvironment)\n\nfunction cliWrapper (cli) {\n  const wrapped = shimmer.wrap(cli, 'runCLI', runCLI => async function () {\n    let onResponse, onError\n    const configurationPromise = new Promise((resolve, reject) => {\n      onResponse = resolve\n      onError = reject\n    })\n\n    sessionAsyncResource.runInAsyncScope(() => {\n      jestConfigurationCh.publish({ onResponse, onError })\n    })\n\n    let isSuitesSkippingEnabled = false\n\n    try {\n      const config = await configurationPromise\n      isCodeCoverageEnabled = config.isCodeCoverageEnabled\n      isSuitesSkippingEnabled = config.isSuitesSkippingEnabled\n    } catch (e) {\n      // ignore error\n    }\n\n    if (isSuitesSkippingEnabled) {\n      const skippableSuitesPromise = new Promise((resolve, reject) => {\n        onResponse = resolve\n        onError = reject\n      })\n\n      sessionAsyncResource.runInAsyncScope(() => {\n        skippableSuitesCh.publish({ onResponse, onError })\n      })\n\n      try {\n        skippableSuites = await skippableSuitesPromise\n      } catch (e) {\n        log.error(e)\n      }\n    }\n\n    const isTestsSkipped = !!skippableSuites.length\n\n    const processArgv = process.argv.slice(2).join(' ')\n    sessionAsyncResource.runInAsyncScope(() => {\n      testSessionStartCh.publish(`jest ${processArgv}`)\n    })\n\n    const result = await runCLI.apply(this, arguments)\n\n    const { results: { success, coverageMap } } = result\n\n    let testCodeCoverageLinesTotal\n    try {\n      testCodeCoverageLinesTotal = coverageMap.getCoverageSummary().lines.pct\n    } catch (e) {\n      // ignore errors\n    }\n\n    sessionAsyncResource.runInAsyncScope(() => {\n      testSessionFinishCh.publish({ status: success ? 'pass' : 'fail', isTestsSkipped, testCodeCoverageLinesTotal })\n    })\n\n    return result\n  })\n\n  cli.runCLI = wrapped.runCLI\n\n  return cli\n}\n\naddHook({\n  name: '@jest/core',\n  file: 'build/cli/index.js',\n  versions: ['>=24.8.0']\n}, cliWrapper)\n\nfunction jestAdapterWrapper (jestAdapter) {\n  const adapter = jestAdapter.default ? jestAdapter.default : jestAdapter\n  const newAdapter = shimmer.wrap(adapter, function () {\n    const environment = arguments[2]\n    const asyncResource = new AsyncResource('bound-anonymous-fn')\n    return asyncResource.runInAsyncScope(() => {\n      testSuiteStartCh.publish({\n        testSuite: environment.testSuite,\n        testEnvironmentOptions: environment.testEnvironmentOptions\n      })\n      return adapter.apply(this, arguments).then(suiteResults => {\n        const { numFailingTests, skipped, failureMessage: errorMessage } = suiteResults\n        let status = 'pass'\n        if (skipped) {\n          status = 'skipped'\n        } else if (numFailingTests !== 0) {\n          status = 'fail'\n        }\n        testSuiteFinishCh.publish({ status, errorMessage })\n        if (environment.global.__coverage__) {\n          const coverageFiles = extractCoverageInformation(environment.global.__coverage__, environment.rootDir)\n          if (coverageFiles.length) {\n            testSuiteCodeCoverageCh.publish([...coverageFiles, environment.testSuite])\n          }\n        }\n        return suiteResults\n      })\n    })\n  })\n  if (jestAdapter.default) {\n    jestAdapter.default = newAdapter\n  } else {\n    jestAdapter = newAdapter\n  }\n\n  return jestAdapter\n}\n\naddHook({\n  name: 'jest-circus',\n  file: 'build/legacy-code-todo-rewrite/jestAdapter.js',\n  versions: ['>=24.8.0']\n}, jestAdapterWrapper)\n\nfunction configureTestEnvironment (readConfigsResult) {\n  const { configs } = readConfigsResult\n  configs.forEach(config => {\n    skippableSuites.forEach((suite) => {\n      config.testMatch.push(`!**/${suite}`)\n    })\n    skippableSuites = []\n  })\n  sessionAsyncResource.runInAsyncScope(() => {\n    testSessionConfigurationCh.publish(configs.map(config => config.testEnvironmentOptions))\n  })\n  if (isCodeCoverageEnabled) {\n    const globalConfig = {\n      ...readConfigsResult.globalConfig,\n      collectCoverage: true\n    }\n    readConfigsResult.globalConfig = globalConfig\n  }\n  return readConfigsResult\n}\n\nfunction jestConfigAsyncWrapper (jestConfig) {\n  shimmer.wrap(jestConfig, 'readConfigs', readConfigs => async function () {\n    const readConfigsResult = await readConfigs.apply(this, arguments)\n    configureTestEnvironment(readConfigsResult)\n    return readConfigsResult\n  })\n  return jestConfig\n}\n\nfunction jestConfigSyncWrapper (jestConfig) {\n  shimmer.wrap(jestConfig, 'readConfigs', readConfigs => function () {\n    const readConfigsResult = readConfigs.apply(this, arguments)\n    configureTestEnvironment(readConfigsResult)\n    return readConfigsResult\n  })\n  return jestConfig\n}\n\n// from 25.1.0 on, readConfigs becomes async\naddHook({\n  name: 'jest-config',\n  versions: ['>=25.1.0']\n}, jestConfigAsyncWrapper)\n\naddHook({\n  name: 'jest-config',\n  versions: ['24.8.0 - 24.9.0']\n}, jestConfigSyncWrapper)\n\nfunction jasmineAsyncInstallWraper (jasmineAsyncInstallExport) {\n  return function (globalConfig, globalInput) {\n    globalInput._ddtrace = global._ddtrace\n    shimmer.wrap(globalInput.jasmine.Spec.prototype, 'execute', execute => function (onComplete) {\n      const asyncResource = new AsyncResource('bound-anonymous-fn')\n      asyncResource.runInAsyncScope(() => {\n        const testSuite = getTestSuitePath(this.result.testPath, globalConfig.rootDir)\n        testStartCh.publish({\n          name: this.getFullName(),\n          suite: testSuite,\n          runner: 'jest-jasmine2'\n        })\n        const spec = this\n        const callback = asyncResource.bind(function () {\n          if (spec.result.failedExpectations && spec.result.failedExpectations.length) {\n            const formattedError = formatJestError(spec.result.failedExpectations[0].error)\n            testErrCh.publish(formattedError)\n          }\n          testRunFinishCh.publish(specStatusToTestStatus[spec.result.status])\n          onComplete.apply(this, arguments)\n        })\n        arguments[0] = callback\n        execute.apply(this, arguments)\n      })\n    })\n    return jasmineAsyncInstallExport.default(globalConfig, globalInput)\n  }\n}\n\naddHook({\n  name: 'jest-jasmine2',\n  versions: ['>=24.8.0'],\n  file: 'build/jasmineAsyncInstall.js'\n}, jasmineAsyncInstallWraper)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}