{"ast":null,"code":"'use strict';\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin');\n\nconst {\n  storage\n} = require('../../datadog-core');\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nclass NetPlugin extends Plugin {\n  static get name() {\n    return 'net';\n  }\n\n  constructor() {\n    super(...arguments);\n    this.addSub(`apm:net:ipc:start`, _ref => {\n      let {\n        options\n      } = _ref;\n      const store = storage.getStore();\n      const childOf = store ? store.span : store;\n      const span = this.tracer.startSpan('ipc.connect', {\n        childOf,\n        tags: {\n          'resource.name': options.path,\n          'ipc.path': options.path,\n          'span.kind': 'client',\n          'service.name': this.config.service || this.tracer._service\n        }\n      });\n      analyticsSampler.sample(span, this.config.measured);\n      this.enter(span, store);\n    });\n    this.addSub(`apm:net:ipc:error`, errorHandler);\n    this.addSub(`apm:net:ipc:finish`, defaultFinish);\n    this.addSub(`apm:net:tcp:start`, _ref2 => {\n      let {\n        options\n      } = _ref2;\n      const store = storage.getStore();\n      const childOf = store ? store.span : store;\n      const host = options.host || 'localhost';\n      const port = options.port || 0;\n      const family = options.family || 4;\n      const span = this.tracer.startSpan('tcp.connect', {\n        childOf,\n        tags: {\n          'resource.name': [host, port].filter(val => val).join(':'),\n          'tcp.remote.host': host,\n          'tcp.remote.port': port,\n          'tcp.family': `IPv${family}`,\n          'out.host': host,\n          'out.port': port,\n          'span.kind': 'client',\n          'service.name': this.config.service || this.tracer._service\n        }\n      });\n      analyticsSampler.sample(span, this.config.measured);\n      this.enter(span, store);\n    });\n    this.addSub(`apm:net:tcp:error`, errorHandler);\n    this.addSub(`apm:net:tcp:finish`, defaultFinish);\n    this.addSub(`apm:net:tcp:connection`, _ref3 => {\n      let {\n        socket\n      } = _ref3;\n      const span = storage.getStore().span;\n      span.addTags({\n        'tcp.local.address': socket.localAddress,\n        'tcp.local.port': socket.localPort\n      });\n    });\n  }\n\n}\n\nfunction defaultFinish() {\n  storage.getStore().span.finish();\n}\n\nfunction errorHandler(error) {\n  storage.getStore().span.setTag('error', error);\n}\n\nmodule.exports = NetPlugin;","map":{"version":3,"names":["Plugin","require","storage","analyticsSampler","NetPlugin","name","constructor","addSub","options","store","getStore","childOf","span","tracer","startSpan","tags","path","config","service","_service","sample","measured","enter","errorHandler","defaultFinish","host","port","family","filter","val","join","socket","addTags","localAddress","localPort","finish","error","setTag","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-net/src/index.js"],"sourcesContent":["'use strict'\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin')\nconst { storage } = require('../../datadog-core')\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\n\nclass NetPlugin extends Plugin {\n  static get name () {\n    return 'net'\n  }\n\n  constructor (...args) {\n    super(...args)\n\n    this.addSub(`apm:net:ipc:start`, ({ options }) => {\n      const store = storage.getStore()\n      const childOf = store ? store.span : store\n\n      const span = this.tracer.startSpan('ipc.connect', {\n        childOf,\n        tags: {\n          'resource.name': options.path,\n          'ipc.path': options.path,\n          'span.kind': 'client',\n          'service.name': this.config.service || this.tracer._service\n        }\n      })\n\n      analyticsSampler.sample(span, this.config.measured)\n      this.enter(span, store)\n    })\n\n    this.addSub(`apm:net:ipc:error`, errorHandler)\n\n    this.addSub(`apm:net:ipc:finish`, defaultFinish)\n\n    this.addSub(`apm:net:tcp:start`, ({ options }) => {\n      const store = storage.getStore()\n      const childOf = store ? store.span : store\n\n      const host = options.host || 'localhost'\n      const port = options.port || 0\n      const family = options.family || 4\n\n      const span = this.tracer.startSpan('tcp.connect', {\n        childOf,\n        tags: {\n          'resource.name': [host, port].filter(val => val).join(':'),\n          'tcp.remote.host': host,\n          'tcp.remote.port': port,\n          'tcp.family': `IPv${family}`,\n          'out.host': host,\n          'out.port': port,\n          'span.kind': 'client',\n          'service.name': this.config.service || this.tracer._service\n        }\n      })\n\n      analyticsSampler.sample(span, this.config.measured)\n      this.enter(span, store)\n    })\n\n    this.addSub(`apm:net:tcp:error`, errorHandler)\n\n    this.addSub(`apm:net:tcp:finish`, defaultFinish)\n\n    this.addSub(`apm:net:tcp:connection`, ({ socket }) => {\n      const span = storage.getStore().span\n      span.addTags({\n        'tcp.local.address': socket.localAddress,\n        'tcp.local.port': socket.localPort\n      })\n    })\n  }\n}\n\nfunction defaultFinish () {\n  storage.getStore().span.finish()\n}\n\nfunction errorHandler (error) {\n  storage.getStore().span.setTag('error', error)\n}\n\nmodule.exports = NetPlugin\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}