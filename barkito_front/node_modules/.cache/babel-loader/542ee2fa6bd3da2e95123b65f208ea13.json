{"ast":null,"code":"'use strict';\n\nconst {\n  channel\n} = require('diagnostics_channel');\n\nconst NoopProxy = require('./noop/proxy');\n\nconst DatadogTracer = require('./tracer');\n\nconst Config = require('./config');\n\nconst metrics = require('./metrics');\n\nconst log = require('./log');\n\nconst {\n  setStartupLogPluginManager\n} = require('./startup-log');\n\nconst telemetry = require('./telemetry');\n\nconst PluginManager = require('./plugin_manager');\n\nconst {\n  sendGitMetadata\n} = require('./ci-visibility/exporters/git/git_metadata');\n\nconst gitMetadataUploadFinishCh = channel('ci:git-metadata-upload:finish');\n\nclass Tracer extends NoopProxy {\n  constructor() {\n    super();\n    this._initialized = false;\n    this._pluginManager = new PluginManager(this);\n  }\n\n  init(options) {\n    if (this._initialized) return this;\n    this._initialized = true;\n\n    try {\n      const config = new Config(options); // TODO: support dynamic config\n\n      log.use(config.logger);\n      log.toggle(config.debug, config.logLevel, this);\n\n      if (config.profiling.enabled) {\n        // do not stop tracer initialization if the profiler fails to be imported\n        try {\n          const profiler = require('./profiler');\n\n          profiler.start(config);\n        } catch (e) {\n          log.error(e);\n        }\n      }\n\n      if (config.runtimeMetrics) {\n        metrics.start(config);\n      }\n\n      if (config.tracing) {\n        // dirty require for now so zero appsec code is executed unless explicitly enabled\n        if (config.appsec.enabled) {\n          require('./appsec').enable(config);\n        }\n\n        if (config.iast.enabled) {\n          require('./appsec/iast').enable(config);\n        }\n\n        this._tracer = new DatadogTracer(config);\n\n        this._pluginManager.configure(config);\n\n        setStartupLogPluginManager(this._pluginManager);\n        telemetry.start(config, this._pluginManager);\n      }\n\n      if (config.isGitUploadEnabled) {\n        sendGitMetadata(config.site, err => {\n          if (err) {\n            log.error(`Error uploading git metadata: ${err}`);\n          } else {\n            log.debug('Successfully uploaded git metadata');\n          }\n\n          gitMetadataUploadFinishCh.publish(err);\n        });\n      }\n    } catch (e) {\n      log.error(e);\n    }\n\n    return this;\n  }\n\n  use() {\n    this._pluginManager.configurePlugin(...arguments);\n\n    return this;\n  }\n\n}\n\nmodule.exports = Tracer;","map":{"version":3,"names":["channel","require","NoopProxy","DatadogTracer","Config","metrics","log","setStartupLogPluginManager","telemetry","PluginManager","sendGitMetadata","gitMetadataUploadFinishCh","Tracer","constructor","_initialized","_pluginManager","init","options","config","use","logger","toggle","debug","logLevel","profiling","enabled","profiler","start","e","error","runtimeMetrics","tracing","appsec","enable","iast","_tracer","configure","isGitUploadEnabled","site","err","publish","configurePlugin","arguments","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/proxy.js"],"sourcesContent":["'use strict'\nconst { channel } = require('diagnostics_channel')\n\nconst NoopProxy = require('./noop/proxy')\nconst DatadogTracer = require('./tracer')\nconst Config = require('./config')\nconst metrics = require('./metrics')\nconst log = require('./log')\nconst { setStartupLogPluginManager } = require('./startup-log')\nconst telemetry = require('./telemetry')\nconst PluginManager = require('./plugin_manager')\nconst { sendGitMetadata } = require('./ci-visibility/exporters/git/git_metadata')\n\nconst gitMetadataUploadFinishCh = channel('ci:git-metadata-upload:finish')\n\nclass Tracer extends NoopProxy {\n  constructor () {\n    super()\n\n    this._initialized = false\n    this._pluginManager = new PluginManager(this)\n  }\n\n  init (options) {\n    if (this._initialized) return this\n\n    this._initialized = true\n\n    try {\n      const config = new Config(options) // TODO: support dynamic config\n\n      log.use(config.logger)\n      log.toggle(config.debug, config.logLevel, this)\n\n      if (config.profiling.enabled) {\n        // do not stop tracer initialization if the profiler fails to be imported\n        try {\n          const profiler = require('./profiler')\n          profiler.start(config)\n        } catch (e) {\n          log.error(e)\n        }\n      }\n\n      if (config.runtimeMetrics) {\n        metrics.start(config)\n      }\n\n      if (config.tracing) {\n        // dirty require for now so zero appsec code is executed unless explicitly enabled\n        if (config.appsec.enabled) {\n          require('./appsec').enable(config)\n        }\n        if (config.iast.enabled) {\n          require('./appsec/iast').enable(config)\n        }\n\n        this._tracer = new DatadogTracer(config)\n        this._pluginManager.configure(config)\n        setStartupLogPluginManager(this._pluginManager)\n        telemetry.start(config, this._pluginManager)\n      }\n\n      if (config.isGitUploadEnabled) {\n        sendGitMetadata(config.site, (err) => {\n          if (err) {\n            log.error(`Error uploading git metadata: ${err}`)\n          } else {\n            log.debug('Successfully uploaded git metadata')\n          }\n          gitMetadataUploadFinishCh.publish(err)\n        })\n      }\n    } catch (e) {\n      log.error(e)\n    }\n\n    return this\n  }\n\n  use () {\n    this._pluginManager.configurePlugin(...arguments)\n    return this\n  }\n}\n\nmodule.exports = Tracer\n"],"mappings":"AAAA;;AACA,MAAM;EAAEA;AAAF,IAAcC,OAAO,CAAC,qBAAD,CAA3B;;AAEA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,UAAD,CAA7B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMK,GAAG,GAAGL,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAM;EAAEM;AAAF,IAAiCN,OAAO,CAAC,eAAD,CAA9C;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMQ,aAAa,GAAGR,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAM;EAAES;AAAF,IAAsBT,OAAO,CAAC,4CAAD,CAAnC;;AAEA,MAAMU,yBAAyB,GAAGX,OAAO,CAAC,+BAAD,CAAzC;;AAEA,MAAMY,MAAN,SAAqBV,SAArB,CAA+B;EAC7BW,WAAW,GAAI;IACb;IAEA,KAAKC,YAAL,GAAoB,KAApB;IACA,KAAKC,cAAL,GAAsB,IAAIN,aAAJ,CAAkB,IAAlB,CAAtB;EACD;;EAEDO,IAAI,CAAEC,OAAF,EAAW;IACb,IAAI,KAAKH,YAAT,EAAuB,OAAO,IAAP;IAEvB,KAAKA,YAAL,GAAoB,IAApB;;IAEA,IAAI;MACF,MAAMI,MAAM,GAAG,IAAId,MAAJ,CAAWa,OAAX,CAAf,CADE,CACiC;;MAEnCX,GAAG,CAACa,GAAJ,CAAQD,MAAM,CAACE,MAAf;MACAd,GAAG,CAACe,MAAJ,CAAWH,MAAM,CAACI,KAAlB,EAAyBJ,MAAM,CAACK,QAAhC,EAA0C,IAA1C;;MAEA,IAAIL,MAAM,CAACM,SAAP,CAAiBC,OAArB,EAA8B;QAC5B;QACA,IAAI;UACF,MAAMC,QAAQ,GAAGzB,OAAO,CAAC,YAAD,CAAxB;;UACAyB,QAAQ,CAACC,KAAT,CAAeT,MAAf;QACD,CAHD,CAGE,OAAOU,CAAP,EAAU;UACVtB,GAAG,CAACuB,KAAJ,CAAUD,CAAV;QACD;MACF;;MAED,IAAIV,MAAM,CAACY,cAAX,EAA2B;QACzBzB,OAAO,CAACsB,KAAR,CAAcT,MAAd;MACD;;MAED,IAAIA,MAAM,CAACa,OAAX,EAAoB;QAClB;QACA,IAAIb,MAAM,CAACc,MAAP,CAAcP,OAAlB,EAA2B;UACzBxB,OAAO,CAAC,UAAD,CAAP,CAAoBgC,MAApB,CAA2Bf,MAA3B;QACD;;QACD,IAAIA,MAAM,CAACgB,IAAP,CAAYT,OAAhB,EAAyB;UACvBxB,OAAO,CAAC,eAAD,CAAP,CAAyBgC,MAAzB,CAAgCf,MAAhC;QACD;;QAED,KAAKiB,OAAL,GAAe,IAAIhC,aAAJ,CAAkBe,MAAlB,CAAf;;QACA,KAAKH,cAAL,CAAoBqB,SAApB,CAA8BlB,MAA9B;;QACAX,0BAA0B,CAAC,KAAKQ,cAAN,CAA1B;QACAP,SAAS,CAACmB,KAAV,CAAgBT,MAAhB,EAAwB,KAAKH,cAA7B;MACD;;MAED,IAAIG,MAAM,CAACmB,kBAAX,EAA+B;QAC7B3B,eAAe,CAACQ,MAAM,CAACoB,IAAR,EAAeC,GAAD,IAAS;UACpC,IAAIA,GAAJ,EAAS;YACPjC,GAAG,CAACuB,KAAJ,CAAW,iCAAgCU,GAAI,EAA/C;UACD,CAFD,MAEO;YACLjC,GAAG,CAACgB,KAAJ,CAAU,oCAAV;UACD;;UACDX,yBAAyB,CAAC6B,OAA1B,CAAkCD,GAAlC;QACD,CAPc,CAAf;MAQD;IACF,CA7CD,CA6CE,OAAOX,CAAP,EAAU;MACVtB,GAAG,CAACuB,KAAJ,CAAUD,CAAV;IACD;;IAED,OAAO,IAAP;EACD;;EAEDT,GAAG,GAAI;IACL,KAAKJ,cAAL,CAAoB0B,eAApB,CAAoC,GAAGC,SAAvC;;IACA,OAAO,IAAP;EACD;;AApE4B;;AAuE/BC,MAAM,CAACC,OAAP,GAAiBhC,MAAjB"},"metadata":{},"sourceType":"script"}