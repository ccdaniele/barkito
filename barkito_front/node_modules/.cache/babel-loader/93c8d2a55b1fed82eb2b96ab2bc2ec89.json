{"ast":null,"code":"'use strict';\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin');\n\nconst {\n  storage\n} = require('../../datadog-core');\n\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler');\n\nclass RheaPlugin extends Plugin {\n  static get name() {\n    return 'rhea';\n  }\n\n  constructor() {\n    super(...arguments);\n    this.addSub(`apm:rhea:send:start`, _ref => {\n      let {\n        targetAddress,\n        host,\n        port,\n        msg\n      } = _ref;\n      const store = storage.getStore();\n      const childOf = store ? store.span : store;\n      const name = targetAddress || 'amq.topic';\n      const span = this.tracer.startSpan('amqp.send', {\n        childOf,\n        tags: {\n          'component': 'rhea',\n          'resource.name': name,\n          'service.name': this.config.service || `${this.tracer._service}-amqp-producer`,\n          'span.kind': 'producer',\n          'amqp.link.target.address': name,\n          'amqp.link.role': 'sender',\n          'out.host': host,\n          'out.port': port\n        }\n      });\n      analyticsSampler.sample(span, this.config.measured);\n      this.enter(span, store);\n    });\n    this.addSub('apm:rhea:encode', msg => {\n      addDeliveryAnnotations(msg, this.tracer, this.tracer.scope().active());\n    });\n    this.addSub(`apm:rhea:receive:start`, _ref2 => {\n      let {\n        msgObj,\n        connection\n      } = _ref2;\n      const name = getResourceNameFromMessage(msgObj);\n      const store = storage.getStore();\n      const childOf = extractTextMap(msgObj, this.tracer);\n      const span = this.tracer.startSpan('amqp.receive', {\n        childOf,\n        tags: {\n          'span.type': 'worker',\n          'component': 'rhea',\n          'resource.name': name,\n          'service.name': this.config.service || this.tracer._service,\n          'span.kind': 'consumer',\n          'amqp.link.source.address': name,\n          'amqp.link.role': 'receiver'\n        }\n      });\n      analyticsSampler.sample(span, this.config.measured, true);\n      this.enter(span, store);\n    });\n    this.addSub(`apm:rhea:error`, error => {\n      storage.getStore().span.setTag('error', error);\n    });\n    this.addSub(`apm:rhea:finish`, () => {\n      const span = storage.getStore().span;\n      span.finish();\n    });\n    this.addSub(`apm:rhea:dispatch`, _ref3 => {\n      let {\n        state\n      } = _ref3;\n      const span = storage.getStore().span;\n      span.setTag('amqp.delivery.state', state);\n    });\n  }\n\n}\n\nfunction getResourceNameFromMessage(msgObj) {\n  let resourceName = 'amq.topic';\n  let options = {};\n\n  if (msgObj.receiver && msgObj.receiver.options) {\n    options = msgObj.receiver.options;\n  }\n\n  if (options.source && options.source.address) {\n    resourceName = options.source.address;\n  }\n\n  return resourceName;\n}\n\nfunction extractTextMap(msgObj, tracer) {\n  if (msgObj.message) {\n    return tracer.extract('text_map', msgObj.message.delivery_annotations);\n  }\n}\n\nfunction addDeliveryAnnotations(msg, tracer, span) {\n  if (msg) {\n    msg.delivery_annotations = msg.delivery_annotations || {};\n    tracer.inject(span, 'text_map', msg.delivery_annotations);\n  }\n}\n\nmodule.exports = RheaPlugin;","map":{"version":3,"names":["Plugin","require","storage","analyticsSampler","RheaPlugin","name","constructor","addSub","targetAddress","host","port","msg","store","getStore","childOf","span","tracer","startSpan","tags","config","service","_service","sample","measured","enter","addDeliveryAnnotations","scope","active","msgObj","connection","getResourceNameFromMessage","extractTextMap","error","setTag","finish","state","resourceName","options","receiver","source","address","message","extract","delivery_annotations","inject","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-rhea/src/index.js"],"sourcesContent":["'use strict'\n\nconst Plugin = require('../../dd-trace/src/plugins/plugin')\nconst { storage } = require('../../datadog-core')\nconst analyticsSampler = require('../../dd-trace/src/analytics_sampler')\n\nclass RheaPlugin extends Plugin {\n  static get name () {\n    return 'rhea'\n  }\n\n  constructor (...args) {\n    super(...args)\n\n    this.addSub(`apm:rhea:send:start`, ({ targetAddress, host, port, msg }) => {\n      const store = storage.getStore()\n      const childOf = store ? store.span : store\n      const name = targetAddress || 'amq.topic'\n      const span = this.tracer.startSpan('amqp.send', {\n        childOf,\n        tags: {\n          'component': 'rhea',\n          'resource.name': name,\n          'service.name': this.config.service || `${this.tracer._service}-amqp-producer`,\n          'span.kind': 'producer',\n          'amqp.link.target.address': name,\n          'amqp.link.role': 'sender',\n          'out.host': host,\n          'out.port': port\n        }\n      })\n      analyticsSampler.sample(span, this.config.measured)\n\n      this.enter(span, store)\n    })\n\n    this.addSub('apm:rhea:encode', msg => {\n      addDeliveryAnnotations(msg, this.tracer, this.tracer.scope().active())\n    })\n\n    this.addSub(`apm:rhea:receive:start`, ({ msgObj, connection }) => {\n      const name = getResourceNameFromMessage(msgObj)\n\n      const store = storage.getStore()\n      const childOf = extractTextMap(msgObj, this.tracer)\n      const span = this.tracer.startSpan('amqp.receive', {\n        childOf,\n        tags: {\n          'span.type': 'worker',\n          'component': 'rhea',\n          'resource.name': name,\n          'service.name': this.config.service || this.tracer._service,\n          'span.kind': 'consumer',\n          'amqp.link.source.address': name,\n          'amqp.link.role': 'receiver'\n        }\n      })\n      analyticsSampler.sample(span, this.config.measured, true)\n\n      this.enter(span, store)\n    })\n\n    this.addSub(`apm:rhea:error`, error => {\n      storage.getStore().span.setTag('error', error)\n    })\n\n    this.addSub(`apm:rhea:finish`, () => {\n      const span = storage.getStore().span\n      span.finish()\n    })\n\n    this.addSub(`apm:rhea:dispatch`, ({ state }) => {\n      const span = storage.getStore().span\n      span.setTag('amqp.delivery.state', state)\n    })\n  }\n}\n\nfunction getResourceNameFromMessage (msgObj) {\n  let resourceName = 'amq.topic'\n  let options = {}\n  if (msgObj.receiver && msgObj.receiver.options) {\n    options = msgObj.receiver.options\n  }\n  if (options.source && options.source.address) {\n    resourceName = options.source.address\n  }\n  return resourceName\n}\n\nfunction extractTextMap (msgObj, tracer) {\n  if (msgObj.message) {\n    return tracer.extract('text_map', msgObj.message.delivery_annotations)\n  }\n}\n\nfunction addDeliveryAnnotations (msg, tracer, span) {\n  if (msg) {\n    msg.delivery_annotations = msg.delivery_annotations || {}\n\n    tracer.inject(span, 'text_map', msg.delivery_annotations)\n  }\n}\n\nmodule.exports = RheaPlugin\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}