{"ast":null,"code":"'use strict';\n\nconst DatabasePlugin = require('../../dd-trace/src/plugins/database');\n\nclass CassandraDriverPlugin extends DatabasePlugin {\n  static get name() {\n    return 'cassandra-driver';\n  }\n\n  static get system() {\n    return 'cassandra';\n  }\n\n  start(_ref) {\n    let {\n      keyspace,\n      query,\n      connectionOptions = {}\n    } = _ref;\n\n    if (Array.isArray(query)) {\n      query = combine(query);\n    }\n\n    this.startSpan('cassandra.query', {\n      service: this.config.service,\n      resource: trim(query, 5000),\n      type: 'cassandra',\n      kind: 'client',\n      meta: {\n        'db.type': 'cassandra',\n        'cassandra.query': query,\n        'cassandra.keyspace': keyspace,\n        'out.host': connectionOptions.host,\n        'out.port': connectionOptions.port\n      }\n    });\n  }\n\n}\n\nfunction combine(queries) {\n  return queries.map(query => (query.query || query).replace(/;?$/, ';')).join(' ');\n}\n\nfunction trim(str, size) {\n  if (!str || str.length <= size) return str;\n  return `${str.substr(0, size - 3)}...`;\n}\n\nmodule.exports = CassandraDriverPlugin;","map":{"version":3,"names":["DatabasePlugin","require","CassandraDriverPlugin","name","system","start","keyspace","query","connectionOptions","Array","isArray","combine","startSpan","service","config","resource","trim","type","kind","meta","host","port","queries","map","replace","join","str","size","length","substr","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/datadog-plugin-cassandra-driver/src/index.js"],"sourcesContent":["'use strict'\n\nconst DatabasePlugin = require('../../dd-trace/src/plugins/database')\n\nclass CassandraDriverPlugin extends DatabasePlugin {\n  static get name () { return 'cassandra-driver' }\n  static get system () { return 'cassandra' }\n\n  start ({ keyspace, query, connectionOptions = {} }) {\n    if (Array.isArray(query)) {\n      query = combine(query)\n    }\n\n    this.startSpan('cassandra.query', {\n      service: this.config.service,\n      resource: trim(query, 5000),\n      type: 'cassandra',\n      kind: 'client',\n      meta: {\n        'db.type': 'cassandra',\n        'cassandra.query': query,\n        'cassandra.keyspace': keyspace,\n        'out.host': connectionOptions.host,\n        'out.port': connectionOptions.port\n      }\n    })\n  }\n}\n\nfunction combine (queries) {\n  return queries\n    .map(query => (query.query || query).replace(/;?$/, ';'))\n    .join(' ')\n}\n\nfunction trim (str, size) {\n  if (!str || str.length <= size) return str\n\n  return `${str.substr(0, size - 3)}...`\n}\n\nmodule.exports = CassandraDriverPlugin\n"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,qCAAD,CAA9B;;AAEA,MAAMC,qBAAN,SAAoCF,cAApC,CAAmD;EAClC,WAAJG,IAAI,GAAI;IAAE,OAAO,kBAAP;EAA2B;;EAC/B,WAANC,MAAM,GAAI;IAAE,OAAO,WAAP;EAAoB;;EAE3CC,KAAK,OAA+C;IAAA,IAA7C;MAAEC,QAAF;MAAYC,KAAZ;MAAmBC,iBAAiB,GAAG;IAAvC,CAA6C;;IAClD,IAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;MACxBA,KAAK,GAAGI,OAAO,CAACJ,KAAD,CAAf;IACD;;IAED,KAAKK,SAAL,CAAe,iBAAf,EAAkC;MAChCC,OAAO,EAAE,KAAKC,MAAL,CAAYD,OADW;MAEhCE,QAAQ,EAAEC,IAAI,CAACT,KAAD,EAAQ,IAAR,CAFkB;MAGhCU,IAAI,EAAE,WAH0B;MAIhCC,IAAI,EAAE,QAJ0B;MAKhCC,IAAI,EAAE;QACJ,WAAW,WADP;QAEJ,mBAAmBZ,KAFf;QAGJ,sBAAsBD,QAHlB;QAIJ,YAAYE,iBAAiB,CAACY,IAJ1B;QAKJ,YAAYZ,iBAAiB,CAACa;MAL1B;IAL0B,CAAlC;EAaD;;AAtBgD;;AAyBnD,SAASV,OAAT,CAAkBW,OAAlB,EAA2B;EACzB,OAAOA,OAAO,CACXC,GADI,CACAhB,KAAK,IAAI,CAACA,KAAK,CAACA,KAAN,IAAeA,KAAhB,EAAuBiB,OAAvB,CAA+B,KAA/B,EAAsC,GAAtC,CADT,EAEJC,IAFI,CAEC,GAFD,CAAP;AAGD;;AAED,SAAST,IAAT,CAAeU,GAAf,EAAoBC,IAApB,EAA0B;EACxB,IAAI,CAACD,GAAD,IAAQA,GAAG,CAACE,MAAJ,IAAcD,IAA1B,EAAgC,OAAOD,GAAP;EAEhC,OAAQ,GAAEA,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcF,IAAI,GAAG,CAArB,CAAwB,KAAlC;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB7B,qBAAjB"},"metadata":{},"sourceType":"script"}