{"ast":null,"code":"'use strict';\n\nconst {\n  AgentEncoder\n} = require('./0.4');\n\nconst Chunk = require('./chunk');\n\nconst log = require('../log');\n\nconst FormData = require('../exporters/common/form-data');\n\nconst COVERAGE_PAYLOAD_VERSION = 1;\nconst COVERAGE_KEYS_LENGTH = 4;\nconst MAXIMUM_NUM_COVERAGE_FILES = 100;\n\nclass CoverageCIVisibilityEncoder extends AgentEncoder {\n  constructor() {\n    super(...arguments);\n    this._coverageBytes = new Chunk();\n    this.form = new FormData();\n    this.fileIndex = 1;\n    this.reset();\n  }\n\n  count() {\n    return this.fileIndex - 1;\n  }\n\n  encode(coverage) {\n    const bytes = this._coverageBytes;\n    const coverageBuffer = this.encodeCodeCoverage(bytes, coverage);\n    const coverageFilename = `coverage${this.fileIndex++}`;\n    this.form.append(coverageFilename, coverageBuffer, {\n      filename: `${coverageFilename}.msgpack`,\n      contentType: 'application/msgpack'\n    });\n\n    if (this.fileIndex === MAXIMUM_NUM_COVERAGE_FILES) {\n      log.debug('Coverage buffer reached the limit, flushing');\n\n      this._writer.flush();\n    }\n\n    this.reset();\n  }\n\n  encodeCodeCoverage(bytes, coverage) {\n    this._encodeMapPrefix(bytes, COVERAGE_KEYS_LENGTH);\n\n    this._encodeString(bytes, 'version');\n\n    this._encodeInteger(bytes, COVERAGE_PAYLOAD_VERSION);\n\n    this._encodeString(bytes, 'trace_id');\n\n    this._encodeId(bytes, coverage.traceId);\n\n    this._encodeString(bytes, 'span_id');\n\n    this._encodeId(bytes, coverage.spanId);\n\n    this._encodeString(bytes, 'files');\n\n    this._encodeArrayPrefix(bytes, coverage.files);\n\n    for (const filename of coverage.files) {\n      this._encodeMapPrefix(bytes, 1);\n\n      this._encodeString(bytes, 'filename');\n\n      this._encodeString(bytes, filename);\n    }\n\n    const traceSize = bytes.length;\n    const buffer = Buffer.allocUnsafe(traceSize);\n    bytes.buffer.copy(buffer, 0, 0, bytes.length);\n    return buffer;\n  }\n\n  reset() {\n    this._reset();\n\n    if (this._coverageBytes) {\n      this._coverageBytes.length = 0;\n    }\n  }\n\n  makePayload() {\n    this.form.append('event', // The intake requires a populated dictionary here. Simply having {} is not valid.\n    // We use dummy: true but any other key/value pair would be valid.\n    JSON.stringify({\n      dummy: true\n    }), {\n      filename: 'event.json',\n      contentType: 'application/json'\n    });\n    const form = this.form;\n    this.form = new FormData();\n    this.fileIndex = 1;\n    return form;\n  }\n\n}\n\nmodule.exports = {\n  CoverageCIVisibilityEncoder\n};","map":{"version":3,"names":["AgentEncoder","require","Chunk","log","FormData","COVERAGE_PAYLOAD_VERSION","COVERAGE_KEYS_LENGTH","MAXIMUM_NUM_COVERAGE_FILES","CoverageCIVisibilityEncoder","constructor","arguments","_coverageBytes","form","fileIndex","reset","count","encode","coverage","bytes","coverageBuffer","encodeCodeCoverage","coverageFilename","append","filename","contentType","debug","_writer","flush","_encodeMapPrefix","_encodeString","_encodeInteger","_encodeId","traceId","spanId","_encodeArrayPrefix","files","traceSize","length","buffer","Buffer","allocUnsafe","copy","_reset","makePayload","JSON","stringify","dummy","module","exports"],"sources":["/Users/daniel.calderon/Projects/barkito/barkito_front/node_modules/dd-trace/packages/dd-trace/src/encode/coverage-ci-visibility.js"],"sourcesContent":["'use strict'\nconst { AgentEncoder } = require('./0.4')\nconst Chunk = require('./chunk')\nconst log = require('../log')\n\nconst FormData = require('../exporters/common/form-data')\n\nconst COVERAGE_PAYLOAD_VERSION = 1\nconst COVERAGE_KEYS_LENGTH = 4\nconst MAXIMUM_NUM_COVERAGE_FILES = 100\n\nclass CoverageCIVisibilityEncoder extends AgentEncoder {\n  constructor () {\n    super(...arguments)\n    this._coverageBytes = new Chunk()\n    this.form = new FormData()\n    this.fileIndex = 1\n    this.reset()\n  }\n\n  count () {\n    return this.fileIndex - 1\n  }\n\n  encode (coverage) {\n    const bytes = this._coverageBytes\n    const coverageBuffer = this.encodeCodeCoverage(bytes, coverage)\n    const coverageFilename = `coverage${this.fileIndex++}`\n\n    this.form.append(\n      coverageFilename,\n      coverageBuffer,\n      {\n        filename: `${coverageFilename}.msgpack`,\n        contentType: 'application/msgpack'\n      }\n    )\n\n    if (this.fileIndex === MAXIMUM_NUM_COVERAGE_FILES) {\n      log.debug('Coverage buffer reached the limit, flushing')\n      this._writer.flush()\n    }\n\n    this.reset()\n  }\n\n  encodeCodeCoverage (bytes, coverage) {\n    this._encodeMapPrefix(bytes, COVERAGE_KEYS_LENGTH)\n    this._encodeString(bytes, 'version')\n    this._encodeInteger(bytes, COVERAGE_PAYLOAD_VERSION)\n    this._encodeString(bytes, 'trace_id')\n    this._encodeId(bytes, coverage.traceId)\n    this._encodeString(bytes, 'span_id')\n    this._encodeId(bytes, coverage.spanId)\n    this._encodeString(bytes, 'files')\n    this._encodeArrayPrefix(bytes, coverage.files)\n    for (const filename of coverage.files) {\n      this._encodeMapPrefix(bytes, 1)\n      this._encodeString(bytes, 'filename')\n      this._encodeString(bytes, filename)\n    }\n    const traceSize = bytes.length\n    const buffer = Buffer.allocUnsafe(traceSize)\n\n    bytes.buffer.copy(buffer, 0, 0, bytes.length)\n\n    return buffer\n  }\n\n  reset () {\n    this._reset()\n    if (this._coverageBytes) {\n      this._coverageBytes.length = 0\n    }\n  }\n\n  makePayload () {\n    this.form.append(\n      'event',\n      // The intake requires a populated dictionary here. Simply having {} is not valid.\n      // We use dummy: true but any other key/value pair would be valid.\n      JSON.stringify({ dummy: true }),\n      { filename: 'event.json', contentType: 'application/json' }\n    )\n\n    const form = this.form\n\n    this.form = new FormData()\n    this.fileIndex = 1\n\n    return form\n  }\n}\n\nmodule.exports = { CoverageCIVisibilityEncoder }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}